
JAIA_BIO-PAYLOAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b814  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800b9a8  0800b9a8  0000c9a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be10  0800be10  0000d1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be10  0800be10  0000ce10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be18  0800be18  0000d1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be18  0800be18  0000ce18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be1c  0800be1c  0000ce1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800be20  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ramfunc      00000000  200001f4  200001f4  0000d1f4  2**0
                  CONTENTS
 10 .bss          00001728  200001f4  0800c014  0000d1f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000191c  0800c014  0000d91c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b0f3  00000000  00000000  0000d224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003af9  00000000  00000000  00028317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b0  00000000  00000000  0002be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001414  00000000  00000000  0002d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027259  00000000  00000000  0002ebd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f61c  00000000  00000000  00055e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee176  00000000  00000000  00075449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  001635bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e40  00000000  00000000  00163648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0016b488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b98c 	.word	0x0800b98c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800b98c 	.word	0x0800b98c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <initMS5837>:
  * @brief  Initialize the depth sensor
  * @param  Pointer to HAL i2c handle
  * @retval 0 for SUCCESS, 1 for FAILURE
  */
int initMS5837(I2C_HandleTypeDef* i2cHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6078      	str	r0, [r7, #4]
  uint8_t cmd;
  uint8_t data[2];

  sDepth.fluidDensity = 1029;
 8000f40:	4b45      	ldr	r3, [pc, #276]	@ (8001058 <initMS5837+0x120>)
 8000f42:	f240 4205 	movw	r2, #1029	@ 0x405
 8000f46:	601a      	str	r2, [r3, #0]

  // Assign i2c handle to struct
  sDepth.pi2c = i2cHandle;
 8000f48:	4a43      	ldr	r2, [pc, #268]	@ (8001058 <initMS5837+0x120>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6053      	str	r3, [r2, #4]

  cmd = MS5837_RESET;
 8000f4e:	231e      	movs	r3, #30
 8000f50:	74fb      	strb	r3, [r7, #19]

  // Reset the MS5837, per datasheet
  HAL_I2C_Master_Transmit(sDepth.pi2c, MS5837_ADDR << 1, &cmd, 1, HAL_MAX_DELAY);
 8000f52:	4b41      	ldr	r3, [pc, #260]	@ (8001058 <initMS5837+0x120>)
 8000f54:	6858      	ldr	r0, [r3, #4]
 8000f56:	2376      	movs	r3, #118	@ 0x76
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	b299      	uxth	r1, r3
 8000f5c:	f107 0213 	add.w	r2, r7, #19
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	f004 f998 	bl	800529c <HAL_I2C_Master_Transmit>

  // Wait for reset to complete
  HAL_Delay(10);
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f002 fa4d 	bl	800340c <HAL_Delay>

  // Read calibration values and CRC
  for ( uint8_t i = 0 ; i < 7 ; i++ )
 8000f72:	2300      	movs	r3, #0
 8000f74:	75fb      	strb	r3, [r7, #23]
 8000f76:	e02f      	b.n	8000fd8 <initMS5837+0xa0>
  {
      uint8_t cmd = MS5837_PROM_READ + i * 2;
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	22a0      	movs	r2, #160	@ 0xa0
 8000f80:	4413      	add	r3, r2
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	73fb      	strb	r3, [r7, #15]

      // Send the register address to read from
      HAL_I2C_Master_Transmit(sDepth.pi2c, MS5837_ADDR << 1, &cmd, 1, HAL_MAX_DELAY);
 8000f86:	4b34      	ldr	r3, [pc, #208]	@ (8001058 <initMS5837+0x120>)
 8000f88:	6858      	ldr	r0, [r3, #4]
 8000f8a:	2376      	movs	r3, #118	@ 0x76
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	b299      	uxth	r1, r3
 8000f90:	f107 020f 	add.w	r2, r7, #15
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f004 f97e 	bl	800529c <HAL_I2C_Master_Transmit>

      // Read 2 bytes from the sensor
      HAL_I2C_Master_Receive(sDepth.pi2c, MS5837_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8001058 <initMS5837+0x120>)
 8000fa2:	6858      	ldr	r0, [r3, #4]
 8000fa4:	2376      	movs	r3, #118	@ 0x76
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	b299      	uxth	r1, r3
 8000faa:	f107 0210 	add.w	r2, r7, #16
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f004 fa89 	bl	80054cc <HAL_I2C_Master_Receive>

      // Combine the received bytes into a 16-bit value
      C[i] = (data[0] << 8) | data[1];
 8000fba:	7c3b      	ldrb	r3, [r7, #16]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	7c7b      	ldrb	r3, [r7, #17]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	b291      	uxth	r1, r2
 8000fcc:	4a23      	ldr	r2, [pc, #140]	@ (800105c <initMS5837+0x124>)
 8000fce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for ( uint8_t i = 0 ; i < 7 ; i++ )
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	75fb      	strb	r3, [r7, #23]
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d9cc      	bls.n	8000f78 <initMS5837+0x40>
  }

  uint8_t version = (C[0] >> 5) & 0x7F; // Extract the sensor version from PROM Word 0
 8000fde:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <initMS5837+0x124>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fec:	75bb      	strb	r3, [r7, #22]

  // Verify that data is correct with CRC
  uint8_t crcRead = C[0] >> 12;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <initMS5837+0x124>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	0b1b      	lsrs	r3, r3, #12
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	757b      	strb	r3, [r7, #21]
  uint8_t crcCalculated = crc4(C);
 8000ff8:	4818      	ldr	r0, [pc, #96]	@ (800105c <initMS5837+0x124>)
 8000ffa:	f000 fe59 	bl	8001cb0 <crc4>
 8000ffe:	4603      	mov	r3, r0
 8001000:	753b      	strb	r3, [r7, #20]

  if ( crcCalculated != crcRead )
 8001002:	7d3a      	ldrb	r2, [r7, #20]
 8001004:	7d7b      	ldrb	r3, [r7, #21]
 8001006:	429a      	cmp	r2, r3
 8001008:	d001      	beq.n	800100e <initMS5837+0xd6>
  {
    return 1; // CRC fail
 800100a:	2301      	movs	r3, #1
 800100c:	e01f      	b.n	800104e <initMS5837+0x116>
  }

  // Set _model according to the sensor version
  if (version == MS5837_02BA01)
 800100e:	2200      	movs	r2, #0
 8001010:	7dbb      	ldrb	r3, [r7, #22]
 8001012:	4293      	cmp	r3, r2
 8001014:	d104      	bne.n	8001020 <initMS5837+0xe8>
  {
      sDepth.model = MS5837_02BA;
 8001016:	2301      	movs	r3, #1
 8001018:	461a      	mov	r2, r3
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <initMS5837+0x120>)
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	e015      	b.n	800104c <initMS5837+0x114>
  }
  else if (version == MS5837_02BA21)
 8001020:	2215      	movs	r2, #21
 8001022:	7dbb      	ldrb	r3, [r7, #22]
 8001024:	4293      	cmp	r3, r2
 8001026:	d104      	bne.n	8001032 <initMS5837+0xfa>
  {
      sDepth.model = MS5837_02BA;
 8001028:	2301      	movs	r3, #1
 800102a:	461a      	mov	r2, r3
 800102c:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <initMS5837+0x120>)
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	e00c      	b.n	800104c <initMS5837+0x114>
  }
  else if (version == MS5837_30BA26)
 8001032:	221a      	movs	r2, #26
 8001034:	7dbb      	ldrb	r3, [r7, #22]
 8001036:	4293      	cmp	r3, r2
 8001038:	d104      	bne.n	8001044 <initMS5837+0x10c>
  {
      sDepth.model = MS5837_30BA;
 800103a:	2300      	movs	r3, #0
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <initMS5837+0x120>)
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	e003      	b.n	800104c <initMS5837+0x114>
  }
  else
  {
      sDepth.model = MS5837_UNRECOGNISED;
 8001044:	23ff      	movs	r3, #255	@ 0xff
 8001046:	461a      	mov	r2, r3
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <initMS5837+0x120>)
 800104a:	609a      	str	r2, [r3, #8]

  // The sensor has passed the CRC check, so we should return true even if
  // the sensor version is unrecognised.
  // (The MS5637 has the same address as the MS5837 and will also pass the CRC check)
  // (but will hopefully be unrecognised.)
  return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000210 	.word	0x20000210
 800105c:	20000224 	.word	0x20000224

08001060 <getPressure>:
{
  sDepth.fluidDensity = density;
}

float getPressure(float conversion)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	ed87 0a01 	vstr	s0, [r7, #4]
  if ( sDepth.model == MS5837_02BA )
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <getPressure+0x5c>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2201      	movs	r2, #1
 8001070:	4293      	cmp	r3, r2
 8001072:	d10e      	bne.n	8001092 <getPressure+0x32>
  {
    return P*conversion/100.0f;
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <getPressure+0x60>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001080:	edd7 7a01 	vldr	s15, [r7, #4]
 8001084:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001088:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80010c4 <getPressure+0x64>
 800108c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001090:	e00d      	b.n	80010ae <getPressure+0x4e>
  }
  else
  {
    return P*conversion/10.0f;
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <getPressure+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109e:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80010aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
  }
}
 80010ae:	eeb0 0a67 	vmov.f32	s0, s15
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000210 	.word	0x20000210
 80010c0:	20000240 	.word	0x20000240
 80010c4:	42c80000 	.word	0x42c80000

080010c8 <getDepth>:
// The average atmospheric pressure of 101300 pascal is used for the calcuation, but atmospheric pressure varies
// If the atmospheric pressure is not 101300 at the time of reading, the depth reported will be offset
// In order to calculate the correct depth, the actual atmospheric pressure should be measured once in air, and
// that value should subtracted for subsequent depth calculations.
float getDepth(void)
{
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  return (getPressure(Pa) - 101300) / (sDepth.fluidDensity * 9.80665);
 80010cc:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8001130 <getDepth+0x68>
 80010d0:	eeb0 0a67 	vmov.f32	s0, s15
 80010d4:	f7ff ffc4 	bl	8001060 <getPressure>
 80010d8:	eef0 7a40 	vmov.f32	s15, s0
 80010dc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001134 <getDepth+0x6c>
 80010e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010e4:	ee17 0a90 	vmov	r0, s15
 80010e8:	f7ff fa2e 	bl	8000548 <__aeabi_f2d>
 80010ec:	4604      	mov	r4, r0
 80010ee:	460d      	mov	r5, r1
 80010f0:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <getDepth+0x70>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa15 	bl	8000524 <__aeabi_i2d>
 80010fa:	a30b      	add	r3, pc, #44	@ (adr r3, 8001128 <getDepth+0x60>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff fa7a 	bl	80005f8 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4620      	mov	r0, r4
 800110a:	4629      	mov	r1, r5
 800110c:	f7ff fb9e 	bl	800084c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fd46 	bl	8000ba8 <__aeabi_d2f>
 800111c:	4603      	mov	r3, r0
 800111e:	ee07 3a90 	vmov	s15, r3
}
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	bdb0      	pop	{r4, r5, r7, pc}
 8001128:	3a92a305 	.word	0x3a92a305
 800112c:	40239d01 	.word	0x40239d01
 8001130:	42c80000 	.word	0x42c80000
 8001134:	47c5da00 	.word	0x47c5da00
 8001138:	20000210 	.word	0x20000210

0800113c <readMS5837>:
{
  return (1 - pow((getPressure(1.0f)/1013.25), 0.190284)) * 145366.45 * 0.3048;
}

int readMS5837(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
  uint8_t cmd;
  uint8_t data[3];

  // Check that _i2cPort is not NULL (i.e. has the user forgoten to call .init or .begin?)
  if (sDepth.pi2c == NULL)
 8001142:	4b3a      	ldr	r3, [pc, #232]	@ (800122c <readMS5837+0xf0>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <readMS5837+0x12>
  {
    return 1;
 800114a:	2301      	movs	r3, #1
 800114c:	e06a      	b.n	8001224 <readMS5837+0xe8>
  }

  // Request D1 conversion
  cmd = MS5837_CONVERT_D1_8192;
 800114e:	234a      	movs	r3, #74	@ 0x4a
 8001150:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Master_Transmit(sDepth.pi2c, MS5837_ADDR << 1, &cmd, 1, HAL_MAX_DELAY);
 8001152:	4b36      	ldr	r3, [pc, #216]	@ (800122c <readMS5837+0xf0>)
 8001154:	6858      	ldr	r0, [r3, #4]
 8001156:	2376      	movs	r3, #118	@ 0x76
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	b299      	uxth	r1, r3
 800115c:	1dfa      	adds	r2, r7, #7
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	f004 f899 	bl	800529c <HAL_I2C_Master_Transmit>

  // Delay for conversion time (20ms)
  HAL_Delay(20);
 800116a:	2014      	movs	r0, #20
 800116c:	f002 f94e 	bl	800340c <HAL_Delay>

  // Request ADC read command
  cmd = MS5837_ADC_READ;
 8001170:	2300      	movs	r3, #0
 8001172:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Master_Transmit(sDepth.pi2c, MS5837_ADDR << 1, &cmd, 1, HAL_MAX_DELAY);
 8001174:	4b2d      	ldr	r3, [pc, #180]	@ (800122c <readMS5837+0xf0>)
 8001176:	6858      	ldr	r0, [r3, #4]
 8001178:	2376      	movs	r3, #118	@ 0x76
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	b299      	uxth	r1, r3
 800117e:	1dfa      	adds	r2, r7, #7
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	f004 f888 	bl	800529c <HAL_I2C_Master_Transmit>

  // Read 3 bytes from the sensor
  HAL_I2C_Master_Receive(sDepth.pi2c, MS5837_ADDR << 1, data, 3, HAL_MAX_DELAY);
 800118c:	4b27      	ldr	r3, [pc, #156]	@ (800122c <readMS5837+0xf0>)
 800118e:	6858      	ldr	r0, [r3, #4]
 8001190:	2376      	movs	r3, #118	@ 0x76
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	b299      	uxth	r1, r3
 8001196:	1d3a      	adds	r2, r7, #4
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2303      	movs	r3, #3
 80011a0:	f004 f994 	bl	80054cc <HAL_I2C_Master_Receive>

  // Combine the received bytes into a 24-bit value
  D1_pres = ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | data[2];
 80011a4:	793b      	ldrb	r3, [r7, #4]
 80011a6:	041a      	lsls	r2, r3, #16
 80011a8:	797b      	ldrb	r3, [r7, #5]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	4313      	orrs	r3, r2
 80011ae:	79ba      	ldrb	r2, [r7, #6]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001230 <readMS5837+0xf4>)
 80011b4:	6013      	str	r3, [r2, #0]

  // Request D2 conversion
  cmd = MS5837_CONVERT_D2_8192;
 80011b6:	235a      	movs	r3, #90	@ 0x5a
 80011b8:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Master_Transmit(sDepth.pi2c, MS5837_ADDR << 1, &cmd, 1, HAL_MAX_DELAY);
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <readMS5837+0xf0>)
 80011bc:	6858      	ldr	r0, [r3, #4]
 80011be:	2376      	movs	r3, #118	@ 0x76
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	b299      	uxth	r1, r3
 80011c4:	1dfa      	adds	r2, r7, #7
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	f004 f865 	bl	800529c <HAL_I2C_Master_Transmit>

  // Delay for conversion time (20ms)
  HAL_Delay(20);
 80011d2:	2014      	movs	r0, #20
 80011d4:	f002 f91a 	bl	800340c <HAL_Delay>

  // Request ADC read command
  cmd = MS5837_ADC_READ;
 80011d8:	2300      	movs	r3, #0
 80011da:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Master_Transmit(sDepth.pi2c, MS5837_ADDR << 1, &cmd, 1, HAL_MAX_DELAY);
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <readMS5837+0xf0>)
 80011de:	6858      	ldr	r0, [r3, #4]
 80011e0:	2376      	movs	r3, #118	@ 0x76
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	b299      	uxth	r1, r3
 80011e6:	1dfa      	adds	r2, r7, #7
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	f004 f854 	bl	800529c <HAL_I2C_Master_Transmit>

  // Read 3 bytes from the sensor
  HAL_I2C_Master_Receive(sDepth.pi2c, MS5837_ADDR << 1, data, 3, HAL_MAX_DELAY);
 80011f4:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <readMS5837+0xf0>)
 80011f6:	6858      	ldr	r0, [r3, #4]
 80011f8:	2376      	movs	r3, #118	@ 0x76
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	b299      	uxth	r1, r3
 80011fe:	1d3a      	adds	r2, r7, #4
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2303      	movs	r3, #3
 8001208:	f004 f960 	bl	80054cc <HAL_I2C_Master_Receive>

  // Combine the received bytes into a 24-bit value
  D2_temp = ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | data[2];
 800120c:	793b      	ldrb	r3, [r7, #4]
 800120e:	041a      	lsls	r2, r3, #16
 8001210:	797b      	ldrb	r3, [r7, #5]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	4313      	orrs	r3, r2
 8001216:	79ba      	ldrb	r2, [r7, #6]
 8001218:	4313      	orrs	r3, r2
 800121a:	4a06      	ldr	r2, [pc, #24]	@ (8001234 <readMS5837+0xf8>)
 800121c:	6013      	str	r3, [r2, #0]

  calculate();
 800121e:	f000 f80b 	bl	8001238 <calculate>

  return 0;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000210 	.word	0x20000210
 8001230:	20000234 	.word	0x20000234
 8001234:	20000238 	.word	0x20000238

08001238 <calculate>:

void calculate() {
 8001238:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800123c:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 8001240:	af00      	add	r7, sp, #0

  // Given C1-C6 and D1, D2, calculated TEMP and P
  // Do conversion first and then second order temp compensation

  int32_t dT = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
  int64_t SENS = 0;
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
  int64_t OFF = 0;
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220

  int32_t SENSi = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  int32_t OFFi = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  int32_t Ti = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

  int64_t OFF2 = 0;
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
  int64_t SENS2 = 0;
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200

  // Terms called
  dT = D2_temp - (uint32_t) (C[5]) * 256l;
 800128a:	4b95      	ldr	r3, [pc, #596]	@ (80014e0 <calculate+0x2a8>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b95      	ldr	r3, [pc, #596]	@ (80014e4 <calculate+0x2ac>)
 8001290:	895b      	ldrh	r3, [r3, #10]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

  if ( sDepth.model == MS5837_02BA )
 800129a:	4b93      	ldr	r3, [pc, #588]	@ (80014e8 <calculate+0x2b0>)
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	2301      	movs	r3, #1
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 8129 	bne.w	80014f8 <calculate+0x2c0>
  {
    SENS = (int64_t)(C[1])*65536l+((int64_t)(C[3])*dT)/128l;
 80012a6:	4b8f      	ldr	r3, [pc, #572]	@ (80014e4 <calculate+0x2ac>)
 80012a8:	885b      	ldrh	r3, [r3, #2]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	2200      	movs	r2, #0
 80012ae:	4698      	mov	r8, r3
 80012b0:	4691      	mov	r9, r2
 80012b2:	f04f 0400 	mov.w	r4, #0
 80012b6:	f04f 0500 	mov.w	r5, #0
 80012ba:	ea4f 4509 	mov.w	r5, r9, lsl #16
 80012be:	ea45 4518 	orr.w	r5, r5, r8, lsr #16
 80012c2:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80012c6:	4b87      	ldr	r3, [pc, #540]	@ (80014e4 <calculate+0x2ac>)
 80012c8:	88db      	ldrh	r3, [r3, #6]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	2200      	movs	r2, #0
 80012ce:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80012d2:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 80012d6:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80012da:	17da      	asrs	r2, r3, #31
 80012dc:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80012e0:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80012e4:	e9d7 8968 	ldrd	r8, r9, [r7, #416]	@ 0x1a0
 80012e8:	464b      	mov	r3, r9
 80012ea:	e9d7 ab66 	ldrd	sl, fp, [r7, #408]	@ 0x198
 80012ee:	4652      	mov	r2, sl
 80012f0:	fb02 f203 	mul.w	r2, r2, r3
 80012f4:	465b      	mov	r3, fp
 80012f6:	4641      	mov	r1, r8
 80012f8:	fb01 f303 	mul.w	r3, r1, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	4642      	mov	r2, r8
 8001300:	4651      	mov	r1, sl
 8001302:	fba2 1201 	umull	r1, r2, r2, r1
 8001306:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 800130a:	460a      	mov	r2, r1
 800130c:	f8c7 21f8 	str.w	r2, [r7, #504]	@ 0x1f8
 8001310:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8001314:	4413      	add	r3, r2
 8001316:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 800131a:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 800131e:	2b00      	cmp	r3, #0
 8001320:	da09      	bge.n	8001336 <calculate+0xfe>
 8001322:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8001326:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800132a:	f143 0300 	adc.w	r3, r3, #0
 800132e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001332:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001336:	f04f 0000 	mov.w	r0, #0
 800133a:	f04f 0100 	mov.w	r1, #0
 800133e:	09d0      	lsrs	r0, r2, #7
 8001340:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001344:	11d9      	asrs	r1, r3, #7
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	18a1      	adds	r1, r4, r2
 800134c:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8001350:	eb45 0303 	adc.w	r3, r5, r3
 8001354:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001358:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 800135c:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
    OFF = (int64_t)(C[2])*131072l+((int64_t)(C[4])*dT)/64l;
 8001360:	4b60      	ldr	r3, [pc, #384]	@ (80014e4 <calculate+0x2ac>)
 8001362:	889b      	ldrh	r3, [r3, #4]
 8001364:	b29b      	uxth	r3, r3
 8001366:	2200      	movs	r2, #0
 8001368:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800136c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8001370:	f04f 0400 	mov.w	r4, #0
 8001374:	f04f 0500 	mov.w	r5, #0
 8001378:	e9d7 1264 	ldrd	r1, r2, [r7, #400]	@ 0x190
 800137c:	4613      	mov	r3, r2
 800137e:	045d      	lsls	r5, r3, #17
 8001380:	460b      	mov	r3, r1
 8001382:	ea45 35d3 	orr.w	r5, r5, r3, lsr #15
 8001386:	460b      	mov	r3, r1
 8001388:	045c      	lsls	r4, r3, #17
 800138a:	4b56      	ldr	r3, [pc, #344]	@ (80014e4 <calculate+0x2ac>)
 800138c:	891b      	ldrh	r3, [r3, #8]
 800138e:	b29b      	uxth	r3, r3
 8001390:	2200      	movs	r2, #0
 8001392:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001396:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 800139a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800139e:	17da      	asrs	r2, r3, #31
 80013a0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80013a4:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80013a8:	e9d7 8962 	ldrd	r8, r9, [r7, #392]	@ 0x188
 80013ac:	464b      	mov	r3, r9
 80013ae:	e9d7 ab60 	ldrd	sl, fp, [r7, #384]	@ 0x180
 80013b2:	4652      	mov	r2, sl
 80013b4:	fb02 f203 	mul.w	r2, r2, r3
 80013b8:	465b      	mov	r3, fp
 80013ba:	4641      	mov	r1, r8
 80013bc:	fb01 f303 	mul.w	r3, r1, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	4642      	mov	r2, r8
 80013c4:	4651      	mov	r1, sl
 80013c6:	fba2 1201 	umull	r1, r2, r2, r1
 80013ca:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80013ce:	460a      	mov	r2, r1
 80013d0:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 80013d4:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 80013d8:	4413      	add	r3, r2
 80013da:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80013de:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da09      	bge.n	80013fa <calculate+0x1c2>
 80013e6:	f112 013f 	adds.w	r1, r2, #63	@ 0x3f
 80013ea:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80013ee:	f143 0300 	adc.w	r3, r3, #0
 80013f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80013f6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80013fa:	f04f 0000 	mov.w	r0, #0
 80013fe:	f04f 0100 	mov.w	r1, #0
 8001402:	0990      	lsrs	r0, r2, #6
 8001404:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8001408:	1199      	asrs	r1, r3, #6
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	18a1      	adds	r1, r4, r2
 8001410:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8001414:	eb45 0303 	adc.w	r3, r5, r3
 8001418:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800141c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001420:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
    P = (D1_pres*SENS/(2097152l)-OFF)/(32768l);
 8001424:	4b31      	ldr	r3, [pc, #196]	@ (80014ec <calculate+0x2b4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2200      	movs	r2, #0
 800142a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800142e:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001432:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8001436:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	@ 0x178
 800143a:	462a      	mov	r2, r5
 800143c:	fb02 f203 	mul.w	r2, r2, r3
 8001440:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001444:	4621      	mov	r1, r4
 8001446:	fb01 f303 	mul.w	r3, r1, r3
 800144a:	441a      	add	r2, r3
 800144c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8001450:	4621      	mov	r1, r4
 8001452:	fba3 1301 	umull	r1, r3, r3, r1
 8001456:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 800145a:	460b      	mov	r3, r1
 800145c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001460:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001464:	18d3      	adds	r3, r2, r3
 8001466:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 800146a:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 800146e:	2b00      	cmp	r3, #0
 8001470:	da09      	bge.n	8001486 <calculate+0x24e>
 8001472:	491f      	ldr	r1, [pc, #124]	@ (80014f0 <calculate+0x2b8>)
 8001474:	1851      	adds	r1, r2, r1
 8001476:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800147a:	f143 0300 	adc.w	r3, r3, #0
 800147e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001482:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001486:	f04f 0000 	mov.w	r0, #0
 800148a:	f04f 0100 	mov.w	r1, #0
 800148e:	0d50      	lsrs	r0, r2, #21
 8001490:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8001494:	1559      	asrs	r1, r3, #21
 8001496:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 800149a:	1a84      	subs	r4, r0, r2
 800149c:	f8c7 4170 	str.w	r4, [r7, #368]	@ 0x170
 80014a0:	eb61 0303 	sbc.w	r3, r1, r3
 80014a4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80014a8:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da0a      	bge.n	80014c6 <calculate+0x28e>
 80014b0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80014b4:	1851      	adds	r1, r2, r1
 80014b6:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80014ba:	f143 0300 	adc.w	r3, r3, #0
 80014be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80014c2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80014c6:	f04f 0000 	mov.w	r0, #0
 80014ca:	f04f 0100 	mov.w	r1, #0
 80014ce:	0bd0      	lsrs	r0, r2, #15
 80014d0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80014d4:	13d9      	asrs	r1, r3, #15
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <calculate+0x2bc>)
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e118      	b.n	8001712 <calculate+0x4da>
 80014e0:	20000238 	.word	0x20000238
 80014e4:	20000224 	.word	0x20000224
 80014e8:	20000210 	.word	0x20000210
 80014ec:	20000234 	.word	0x20000234
 80014f0:	001fffff 	.word	0x001fffff
 80014f4:	20000240 	.word	0x20000240
  }
  else
  {
    SENS = (int64_t)(C[1])*32768l+((int64_t)(C[3])*dT)/256l;
 80014f8:	4bde      	ldr	r3, [pc, #888]	@ (8001874 <calculate+0x63c>)
 80014fa:	885b      	ldrh	r3, [r3, #2]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	2200      	movs	r2, #0
 8001500:	4618      	mov	r0, r3
 8001502:	4611      	mov	r1, r2
 8001504:	f04f 0400 	mov.w	r4, #0
 8001508:	f04f 0500 	mov.w	r5, #0
 800150c:	03cd      	lsls	r5, r1, #15
 800150e:	ea45 4550 	orr.w	r5, r5, r0, lsr #17
 8001512:	03c4      	lsls	r4, r0, #15
 8001514:	4bd7      	ldr	r3, [pc, #860]	@ (8001874 <calculate+0x63c>)
 8001516:	88db      	ldrh	r3, [r3, #6]
 8001518:	b29b      	uxth	r3, r3
 800151a:	2200      	movs	r2, #0
 800151c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001520:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8001524:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001528:	17da      	asrs	r2, r3, #31
 800152a:	469a      	mov	sl, r3
 800152c:	4693      	mov	fp, r2
 800152e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8001532:	460b      	mov	r3, r1
 8001534:	fb0a f203 	mul.w	r2, sl, r3
 8001538:	4603      	mov	r3, r0
 800153a:	fb03 f30b 	mul.w	r3, r3, fp
 800153e:	4413      	add	r3, r2
 8001540:	4602      	mov	r2, r0
 8001542:	fba2 120a 	umull	r1, r2, r2, sl
 8001546:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 800154a:	460a      	mov	r2, r1
 800154c:	f8c7 21e0 	str.w	r2, [r7, #480]	@ 0x1e0
 8001550:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8001554:	4413      	add	r3, r2
 8001556:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800155a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 800155e:	2b00      	cmp	r3, #0
 8001560:	da09      	bge.n	8001576 <calculate+0x33e>
 8001562:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001566:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800156a:	f143 0300 	adc.w	r3, r3, #0
 800156e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001572:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001576:	f04f 0000 	mov.w	r0, #0
 800157a:	f04f 0100 	mov.w	r1, #0
 800157e:	0a10      	lsrs	r0, r2, #8
 8001580:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001584:	1219      	asrs	r1, r3, #8
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	18a1      	adds	r1, r4, r2
 800158c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001590:	eb45 0303 	adc.w	r3, r5, r3
 8001594:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001598:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800159c:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
    OFF = (int64_t)(C[2])*65536l+((int64_t)(C[4])*dT)/128l;
 80015a0:	4bb4      	ldr	r3, [pc, #720]	@ (8001874 <calculate+0x63c>)
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2200      	movs	r2, #0
 80015a8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80015ac:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80015b0:	f04f 0400 	mov.w	r4, #0
 80015b4:	f04f 0500 	mov.w	r5, #0
 80015b8:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 80015bc:	4613      	mov	r3, r2
 80015be:	041d      	lsls	r5, r3, #16
 80015c0:	460b      	mov	r3, r1
 80015c2:	ea45 4513 	orr.w	r5, r5, r3, lsr #16
 80015c6:	460b      	mov	r3, r1
 80015c8:	041c      	lsls	r4, r3, #16
 80015ca:	4baa      	ldr	r3, [pc, #680]	@ (8001874 <calculate+0x63c>)
 80015cc:	891b      	ldrh	r3, [r3, #8]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	2200      	movs	r2, #0
 80015d2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80015d6:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80015da:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80015de:	17da      	asrs	r2, r3, #31
 80015e0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80015e4:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80015e8:	e9d7 8956 	ldrd	r8, r9, [r7, #344]	@ 0x158
 80015ec:	464b      	mov	r3, r9
 80015ee:	e9d7 ab54 	ldrd	sl, fp, [r7, #336]	@ 0x150
 80015f2:	4652      	mov	r2, sl
 80015f4:	fb02 f203 	mul.w	r2, r2, r3
 80015f8:	465b      	mov	r3, fp
 80015fa:	4641      	mov	r1, r8
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	4642      	mov	r2, r8
 8001604:	4651      	mov	r1, sl
 8001606:	fba2 1201 	umull	r1, r2, r2, r1
 800160a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800160e:	460a      	mov	r2, r1
 8001610:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001614:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001618:	4413      	add	r3, r2
 800161a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800161e:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8001622:	2b00      	cmp	r3, #0
 8001624:	da09      	bge.n	800163a <calculate+0x402>
 8001626:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 800162a:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800162e:	f143 0300 	adc.w	r3, r3, #0
 8001632:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001636:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	09d0      	lsrs	r0, r2, #7
 8001644:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001648:	11d9      	asrs	r1, r3, #7
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	18a1      	adds	r1, r4, r2
 8001650:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001652:	eb45 0303 	adc.w	r3, r5, r3
 8001656:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001658:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800165c:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
    P = (D1_pres*SENS/(2097152l)-OFF)/(8192l);
 8001660:	4b85      	ldr	r3, [pc, #532]	@ (8001878 <calculate+0x640>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800166a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800166e:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8001672:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8001676:	462a      	mov	r2, r5
 8001678:	fb02 f203 	mul.w	r2, r2, r3
 800167c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001680:	4621      	mov	r1, r4
 8001682:	fb01 f303 	mul.w	r3, r1, r3
 8001686:	441a      	add	r2, r3
 8001688:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800168c:	4621      	mov	r1, r4
 800168e:	fba3 1301 	umull	r1, r3, r3, r1
 8001692:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8001696:	460b      	mov	r3, r1
 8001698:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800169c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80016a0:	18d3      	adds	r3, r2, r3
 80016a2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80016a6:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	da07      	bge.n	80016be <calculate+0x486>
 80016ae:	4973      	ldr	r1, [pc, #460]	@ (800187c <calculate+0x644>)
 80016b0:	1851      	adds	r1, r2, r1
 80016b2:	6739      	str	r1, [r7, #112]	@ 0x70
 80016b4:	f143 0300 	adc.w	r3, r3, #0
 80016b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80016ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016be:	f04f 0000 	mov.w	r0, #0
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	0d50      	lsrs	r0, r2, #21
 80016c8:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80016cc:	1559      	asrs	r1, r3, #21
 80016ce:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 80016d2:	1a84      	subs	r4, r0, r2
 80016d4:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 80016d8:	eb61 0303 	sbc.w	r3, r1, r3
 80016dc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80016e0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	da08      	bge.n	80016fa <calculate+0x4c2>
 80016e8:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 80016ec:	1851      	adds	r1, r2, r1
 80016ee:	66b9      	str	r1, [r7, #104]	@ 0x68
 80016f0:	f143 0300 	adc.w	r3, r3, #0
 80016f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80016f6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80016fa:	f04f 0000 	mov.w	r0, #0
 80016fe:	f04f 0100 	mov.w	r1, #0
 8001702:	0b50      	lsrs	r0, r2, #13
 8001704:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001708:	1359      	asrs	r1, r3, #13
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4b5c      	ldr	r3, [pc, #368]	@ (8001880 <calculate+0x648>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  // Temp conversion
  TEMP = 2000l+(int64_t)(dT)*C[6]/8388608LL;
 8001712:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001716:	17da      	asrs	r2, r3, #31
 8001718:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800171c:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8001720:	4b54      	ldr	r3, [pc, #336]	@ (8001874 <calculate+0x63c>)
 8001722:	899b      	ldrh	r3, [r3, #12]
 8001724:	b29b      	uxth	r3, r3
 8001726:	2200      	movs	r2, #0
 8001728:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800172c:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8001730:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8001734:	462b      	mov	r3, r5
 8001736:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 800173a:	4642      	mov	r2, r8
 800173c:	fb02 f203 	mul.w	r2, r2, r3
 8001740:	464b      	mov	r3, r9
 8001742:	4621      	mov	r1, r4
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	4413      	add	r3, r2
 800174a:	4622      	mov	r2, r4
 800174c:	4641      	mov	r1, r8
 800174e:	fba2 1201 	umull	r1, r2, r2, r1
 8001752:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8001756:	460a      	mov	r2, r1
 8001758:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 800175c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8001760:	4413      	add	r3, r2
 8001762:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8001766:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800176a:	2b00      	cmp	r3, #0
 800176c:	da07      	bge.n	800177e <calculate+0x546>
 800176e:	4945      	ldr	r1, [pc, #276]	@ (8001884 <calculate+0x64c>)
 8001770:	1851      	adds	r1, r2, r1
 8001772:	6639      	str	r1, [r7, #96]	@ 0x60
 8001774:	f143 0300 	adc.w	r3, r3, #0
 8001778:	667b      	str	r3, [r7, #100]	@ 0x64
 800177a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800177e:	f04f 0000 	mov.w	r0, #0
 8001782:	f04f 0100 	mov.w	r1, #0
 8001786:	0dd0      	lsrs	r0, r2, #23
 8001788:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 800178c:	15d9      	asrs	r1, r3, #23
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4613      	mov	r3, r2
 8001794:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001798:	461a      	mov	r2, r3
 800179a:	4b3b      	ldr	r3, [pc, #236]	@ (8001888 <calculate+0x650>)
 800179c:	601a      	str	r2, [r3, #0]

  // Second order compensation
  if ( sDepth.model == MS5837_02BA )
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <calculate+0x654>)
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	2301      	movs	r3, #1
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f040 80a5 	bne.w	80018f4 <calculate+0x6bc>
  {
    if((TEMP/100)<20)
 80017aa:	4b37      	ldr	r3, [pc, #220]	@ (8001888 <calculate+0x650>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80017b2:	f280 817c 	bge.w	8001aae <calculate+0x876>
    {
      // Low temp
      Ti = (11*(int64_t)(dT)*(int64_t)(dT))/(34359738368LL);
 80017b6:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80017ba:	17da      	asrs	r2, r3, #31
 80017bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80017c0:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80017c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80017c8:	17da      	asrs	r2, r3, #31
 80017ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80017ce:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80017d2:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 80017d6:	462b      	mov	r3, r5
 80017d8:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 80017dc:	4642      	mov	r2, r8
 80017de:	fb02 f203 	mul.w	r2, r2, r3
 80017e2:	464b      	mov	r3, r9
 80017e4:	4621      	mov	r1, r4
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	4622      	mov	r2, r4
 80017ee:	4641      	mov	r1, r8
 80017f0:	fba2 1201 	umull	r1, r2, r2, r1
 80017f4:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80017f8:	460a      	mov	r2, r1
 80017fa:	f8c7 21c0 	str.w	r2, [r7, #448]	@ 0x1c0
 80017fe:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8001802:	4413      	add	r3, r2
 8001804:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001808:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	@ 0x1c0
 800180c:	4622      	mov	r2, r4
 800180e:	462b      	mov	r3, r5
 8001810:	1891      	adds	r1, r2, r2
 8001812:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001814:	415b      	adcs	r3, r3
 8001816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001818:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800181c:	4621      	mov	r1, r4
 800181e:	1851      	adds	r1, r2, r1
 8001820:	6539      	str	r1, [r7, #80]	@ 0x50
 8001822:	4629      	mov	r1, r5
 8001824:	414b      	adcs	r3, r1
 8001826:	657b      	str	r3, [r7, #84]	@ 0x54
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001834:	4649      	mov	r1, r9
 8001836:	008b      	lsls	r3, r1, #2
 8001838:	4641      	mov	r1, r8
 800183a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800183e:	4641      	mov	r1, r8
 8001840:	008a      	lsls	r2, r1, #2
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	4603      	mov	r3, r0
 8001848:	4622      	mov	r2, r4
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001850:	460b      	mov	r3, r1
 8001852:	462a      	mov	r2, r5
 8001854:	eb63 0302 	sbc.w	r3, r3, r2
 8001858:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800185c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001860:	2b00      	cmp	r3, #0
 8001862:	da15      	bge.n	8001890 <calculate+0x658>
 8001864:	1e51      	subs	r1, r2, #1
 8001866:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001868:	f143 0307 	adc.w	r3, r3, #7
 800186c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800186e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001872:	e00d      	b.n	8001890 <calculate+0x658>
 8001874:	20000224 	.word	0x20000224
 8001878:	20000234 	.word	0x20000234
 800187c:	001fffff 	.word	0x001fffff
 8001880:	20000240 	.word	0x20000240
 8001884:	007fffff 	.word	0x007fffff
 8001888:	2000023c 	.word	0x2000023c
 800188c:	20000210 	.word	0x20000210
 8001890:	f04f 0000 	mov.w	r0, #0
 8001894:	f04f 0100 	mov.w	r1, #0
 8001898:	10d8      	asrs	r0, r3, #3
 800189a:	17d9      	asrs	r1, r3, #31
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4613      	mov	r3, r2
 80018a2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
      OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
 80018a6:	4bcb      	ldr	r3, [pc, #812]	@ (8001bd4 <calculate+0x99c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80018ae:	4bc9      	ldr	r3, [pc, #804]	@ (8001bd4 <calculate+0x99c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80018b6:	fb03 f202 	mul.w	r2, r3, r2
 80018ba:	4613      	mov	r3, r2
 80018bc:	015b      	lsls	r3, r3, #5
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da00      	bge.n	80018c6 <calculate+0x68e>
 80018c4:	3307      	adds	r3, #7
 80018c6:	10db      	asrs	r3, r3, #3
 80018c8:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
      SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
 80018cc:	4bc1      	ldr	r3, [pc, #772]	@ (8001bd4 <calculate+0x99c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80018d4:	4bbf      	ldr	r3, [pc, #764]	@ (8001bd4 <calculate+0x99c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80018dc:	fb03 f202 	mul.w	r2, r3, r2
 80018e0:	4613      	mov	r3, r2
 80018e2:	019b      	lsls	r3, r3, #6
 80018e4:	1a9b      	subs	r3, r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da00      	bge.n	80018ec <calculate+0x6b4>
 80018ea:	331f      	adds	r3, #31
 80018ec:	115b      	asrs	r3, r3, #5
 80018ee:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80018f2:	e0dc      	b.n	8001aae <calculate+0x876>
    }
  }
  else
  {
    if((TEMP/100)<20)
 80018f4:	4bb7      	ldr	r3, [pc, #732]	@ (8001bd4 <calculate+0x99c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80018fc:	f280 809f 	bge.w	8001a3e <calculate+0x806>
    {
      // Low temp
      Ti = (3 * (int64_t) (dT) * (int64_t) (dT)) / (8589934592LL);
 8001900:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001904:	17da      	asrs	r2, r3, #31
 8001906:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800190a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 800190e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001912:	17da      	asrs	r2, r3, #31
 8001914:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001918:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800191c:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8001920:	462b      	mov	r3, r5
 8001922:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001926:	4642      	mov	r2, r8
 8001928:	fb02 f203 	mul.w	r2, r2, r3
 800192c:	464b      	mov	r3, r9
 800192e:	4621      	mov	r1, r4
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	4622      	mov	r2, r4
 8001938:	4641      	mov	r1, r8
 800193a:	fba2 1201 	umull	r1, r2, r2, r1
 800193e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001942:	460a      	mov	r2, r1
 8001944:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001948:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800194c:	4413      	add	r3, r2
 800194e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001952:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 8001956:	4622      	mov	r2, r4
 8001958:	462b      	mov	r3, r5
 800195a:	1891      	adds	r1, r2, r2
 800195c:	6439      	str	r1, [r7, #64]	@ 0x40
 800195e:	415b      	adcs	r3, r3
 8001960:	647b      	str	r3, [r7, #68]	@ 0x44
 8001962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001966:	4621      	mov	r1, r4
 8001968:	1851      	adds	r1, r2, r1
 800196a:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 800196e:	4629      	mov	r1, r5
 8001970:	eb43 0101 	adc.w	r1, r3, r1
 8001974:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8001978:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	da06      	bge.n	800198e <calculate+0x756>
 8001980:	1e51      	subs	r1, r2, #1
 8001982:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001984:	f143 0301 	adc.w	r3, r3, #1
 8001988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800198a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800198e:	f04f 0000 	mov.w	r0, #0
 8001992:	f04f 0100 	mov.w	r1, #0
 8001996:	1058      	asrs	r0, r3, #1
 8001998:	17d9      	asrs	r1, r3, #31
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4613      	mov	r3, r2
 80019a0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
      OFFi = (3 * (TEMP-2000) * (TEMP-2000)) / 2;
 80019a4:	4b8b      	ldr	r3, [pc, #556]	@ (8001bd4 <calculate+0x99c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80019ac:	4b89      	ldr	r3, [pc, #548]	@ (8001bd4 <calculate+0x99c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80019b4:	fb03 f202 	mul.w	r2, r3, r2
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	441a      	add	r2, r3
 80019be:	0fd3      	lsrs	r3, r2, #31
 80019c0:	4413      	add	r3, r2
 80019c2:	105b      	asrs	r3, r3, #1
 80019c4:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
      SENSi = (5 * (TEMP-2000) * (TEMP-2000)) / 8;
 80019c8:	4b82      	ldr	r3, [pc, #520]	@ (8001bd4 <calculate+0x99c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80019d0:	4b80      	ldr	r3, [pc, #512]	@ (8001bd4 <calculate+0x99c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80019d8:	fb03 f202 	mul.w	r2, r3, r2
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da00      	bge.n	80019e8 <calculate+0x7b0>
 80019e6:	3307      	adds	r3, #7
 80019e8:	10db      	asrs	r3, r3, #3
 80019ea:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c

      if ((TEMP/100)<-15)
 80019ee:	4b79      	ldr	r3, [pc, #484]	@ (8001bd4 <calculate+0x99c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f513 6fc8 	cmn.w	r3, #1600	@ 0x640
 80019f6:	dc5a      	bgt.n	8001aae <calculate+0x876>
      {
        // Very low temp
        OFFi = OFFi + 7 * (TEMP+1500l) * (TEMP+1500l);
 80019f8:	4b76      	ldr	r3, [pc, #472]	@ (8001bd4 <calculate+0x99c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 8001a00:	4b74      	ldr	r3, [pc, #464]	@ (8001bd4 <calculate+0x99c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001a08:	fb03 f202 	mul.w	r2, r3, r2
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	1a9a      	subs	r2, r3, r2
 8001a12:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8001a16:	4413      	add	r3, r2
 8001a18:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
        SENSi = SENSi + 4 * (TEMP+1500l) * (TEMP+1500l);
 8001a1c:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd4 <calculate+0x99c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 8001a24:	4b6b      	ldr	r3, [pc, #428]	@ (8001bd4 <calculate+0x99c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001a2c:	fb02 f303 	mul.w	r3, r2, r3
 8001a30:	009a      	lsls	r2, r3, #2
 8001a32:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001a36:	4413      	add	r3, r2
 8001a38:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8001a3c:	e037      	b.n	8001aae <calculate+0x876>
      }
    }
    else if ((TEMP/100)>=20)
 8001a3e:	4b65      	ldr	r3, [pc, #404]	@ (8001bd4 <calculate+0x99c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001a46:	db32      	blt.n	8001aae <calculate+0x876>
    {
      // High temp
      Ti = 2*(dT*dT)/(137438953472LL);
 8001a48:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001a4c:	fb03 f303 	mul.w	r3, r3, r3
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	17da      	asrs	r2, r3, #31
 8001a54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001a58:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001a5c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	da06      	bge.n	8001a72 <calculate+0x83a>
 8001a64:	1e51      	subs	r1, r2, #1
 8001a66:	6339      	str	r1, [r7, #48]	@ 0x30
 8001a68:	f143 031f 	adc.w	r3, r3, #31
 8001a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	1158      	asrs	r0, r3, #5
 8001a7c:	17d9      	asrs	r1, r3, #31
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4613      	mov	r3, r2
 8001a84:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
      OFFi = (1*(TEMP-2000)*(TEMP-2000))/16;
 8001a88:	4b52      	ldr	r3, [pc, #328]	@ (8001bd4 <calculate+0x99c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8001a90:	4b50      	ldr	r3, [pc, #320]	@ (8001bd4 <calculate+0x99c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	da00      	bge.n	8001aa2 <calculate+0x86a>
 8001aa0:	330f      	adds	r3, #15
 8001aa2:	111b      	asrs	r3, r3, #4
 8001aa4:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
      SENSi = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    }
  }

  // Calculate pressure and temp second order
  OFF2 = OFF - OFFi;
 8001aae:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8001ab2:	17da      	asrs	r2, r3, #31
 8001ab4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001ab8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001abc:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 8001ac0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	1a51      	subs	r1, r2, r1
 8001ac8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001aca:	4629      	mov	r1, r5
 8001acc:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ad2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001ad6:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  SENS2 = SENS - SENSi;
 8001ada:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001ade:	17da      	asrs	r2, r3, #31
 8001ae0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001ae4:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001ae8:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 8001aec:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001af0:	4621      	mov	r1, r4
 8001af2:	1a51      	subs	r1, r2, r1
 8001af4:	6239      	str	r1, [r7, #32]
 8001af6:	4629      	mov	r1, r5
 8001af8:	eb63 0301 	sbc.w	r3, r3, r1
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afe:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001b02:	e9c7 3480 	strd	r3, r4, [r7, #512]	@ 0x200
  sDepth.temp = TEMP - Ti;
 8001b06:	4b33      	ldr	r3, [pc, #204]	@ (8001bd4 <calculate+0x99c>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	4b31      	ldr	r3, [pc, #196]	@ (8001bd8 <calculate+0x9a0>)
 8001b12:	611a      	str	r2, [r3, #16]

  if ( sDepth.model == MS5837_02BA )
 8001b14:	4b30      	ldr	r3, [pc, #192]	@ (8001bd8 <calculate+0x9a0>)
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d162      	bne.n	8001be4 <calculate+0x9ac>
  {
    sDepth.pressure = ((D1_pres * SENS2) / 2097152l - OFF2) / 32768l;
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <calculate+0x9a4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001b28:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001b2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b30:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001b34:	462a      	mov	r2, r5
 8001b36:	fb02 f203 	mul.w	r2, r2, r3
 8001b3a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001b3e:	4621      	mov	r1, r4
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	fba2 1201 	umull	r1, r2, r2, r1
 8001b50:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8001b54:	460a      	mov	r2, r1
 8001b56:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 8001b5a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001b5e:	4413      	add	r3, r2
 8001b60:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001b64:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da07      	bge.n	8001b7c <calculate+0x944>
 8001b6c:	491c      	ldr	r1, [pc, #112]	@ (8001be0 <calculate+0x9a8>)
 8001b6e:	1851      	adds	r1, r2, r1
 8001b70:	61b9      	str	r1, [r7, #24]
 8001b72:	f143 0300 	adc.w	r3, r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b7c:	f04f 0000 	mov.w	r0, #0
 8001b80:	f04f 0100 	mov.w	r1, #0
 8001b84:	0d50      	lsrs	r0, r2, #21
 8001b86:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8001b8a:	1559      	asrs	r1, r3, #21
 8001b8c:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001b90:	1a84      	subs	r4, r0, r2
 8001b92:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 8001b96:	eb61 0303 	sbc.w	r3, r1, r3
 8001b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001b9e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	da08      	bge.n	8001bb8 <calculate+0x980>
 8001ba6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001baa:	1851      	adds	r1, r2, r1
 8001bac:	6139      	str	r1, [r7, #16]
 8001bae:	f143 0300 	adc.w	r3, r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bb8:	f04f 0000 	mov.w	r0, #0
 8001bbc:	f04f 0100 	mov.w	r1, #0
 8001bc0:	0bd0      	lsrs	r0, r2, #15
 8001bc2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8001bc6:	13d9      	asrs	r1, r3, #15
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4b02      	ldr	r3, [pc, #8]	@ (8001bd8 <calculate+0x9a0>)
 8001bce:	60da      	str	r2, [r3, #12]
  }
  else
  {
      sDepth.pressure = ((D1_pres * SENS2) / 2097152l - OFF2) / 8192l;
  }
}
 8001bd0:	e061      	b.n	8001c96 <calculate+0xa5e>
 8001bd2:	bf00      	nop
 8001bd4:	2000023c 	.word	0x2000023c
 8001bd8:	20000210 	.word	0x20000210
 8001bdc:	20000234 	.word	0x20000234
 8001be0:	001fffff 	.word	0x001fffff
      sDepth.pressure = ((D1_pres * SENS2) / 2097152l - OFF2) / 8192l;
 8001be4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca4 <calculate+0xa6c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001bee:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001bf2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bf6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001bfa:	462a      	mov	r2, r5
 8001bfc:	fb02 f203 	mul.w	r2, r2, r3
 8001c00:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001c04:	4621      	mov	r1, r4
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8001c10:	4621      	mov	r1, r4
 8001c12:	fba2 1201 	umull	r1, r2, r2, r1
 8001c16:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8001c1a:	460a      	mov	r2, r1
 8001c1c:	f8c7 21a8 	str.w	r2, [r7, #424]	@ 0x1a8
 8001c20:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8001c24:	4413      	add	r3, r2
 8001c26:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001c2a:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	da07      	bge.n	8001c42 <calculate+0xa0a>
 8001c32:	491d      	ldr	r1, [pc, #116]	@ (8001ca8 <calculate+0xa70>)
 8001c34:	1851      	adds	r1, r2, r1
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	f143 0300 	adc.w	r3, r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c42:	f04f 0000 	mov.w	r0, #0
 8001c46:	f04f 0100 	mov.w	r1, #0
 8001c4a:	0d50      	lsrs	r0, r2, #21
 8001c4c:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8001c50:	1559      	asrs	r1, r3, #21
 8001c52:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001c56:	1a84      	subs	r4, r0, r2
 8001c58:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8001c5c:	eb61 0303 	sbc.w	r3, r1, r3
 8001c60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001c64:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	da08      	bge.n	8001c7e <calculate+0xa46>
 8001c6c:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001c70:	1851      	adds	r1, r2, r1
 8001c72:	6039      	str	r1, [r7, #0]
 8001c74:	f143 0300 	adc.w	r3, r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	0b50      	lsrs	r0, r2, #13
 8001c88:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c8c:	1359      	asrs	r1, r3, #13
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <calculate+0xa74>)
 8001c94:	60da      	str	r2, [r3, #12]
}
 8001c96:	bf00      	nop
 8001c98:	f507 770d 	add.w	r7, r7, #564	@ 0x234
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001ca2:	4770      	bx	lr
 8001ca4:	20000234 	.word	0x20000234
 8001ca8:	001fffff 	.word	0x001fffff
 8001cac:	20000210 	.word	0x20000210

08001cb0 <crc4>:

// See MS5837 datasheet C Code Example
uint8_t crc4(uint16_t n_prom[])
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint16_t n_rem = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	81fb      	strh	r3, [r7, #14]

  n_prom[0] = ((n_prom[0]) & 0x0FFF);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	801a      	strh	r2, [r3, #0]
  n_prom[7] = 0;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	330e      	adds	r3, #14
 8001cce:	2200      	movs	r2, #0
 8001cd0:	801a      	strh	r2, [r3, #0]

  for ( uint8_t i = 0 ; i < 16; i++ )
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	737b      	strb	r3, [r7, #13]
 8001cd6:	e03c      	b.n	8001d52 <crc4+0xa2>
  {
    if ( i%2 == 1 )
 8001cd8:	7b7b      	ldrb	r3, [r7, #13]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00f      	beq.n	8001d04 <crc4+0x54>
    {
      n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
 8001ce4:	7b7b      	ldrb	r3, [r7, #13]
 8001ce6:	085b      	lsrs	r3, r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cfc:	4053      	eors	r3, r2
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	81fb      	strh	r3, [r7, #14]
 8001d02:	e00b      	b.n	8001d1c <crc4+0x6c>
    }
    else
    {
      n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
 8001d04:	7b7b      	ldrb	r3, [r7, #13]
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	4053      	eors	r3, r2
 8001d1a:	81fb      	strh	r3, [r7, #14]
    }
    for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- )
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	733b      	strb	r3, [r7, #12]
 8001d20:	e011      	b.n	8001d46 <crc4+0x96>
    {
      if ( n_rem & 0x8000 )
 8001d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	da07      	bge.n	8001d3a <crc4+0x8a>
      {
        n_rem = (n_rem << 1) ^ 0x3000;
 8001d2a:	89fb      	ldrh	r3, [r7, #14]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	81fb      	strh	r3, [r7, #14]
 8001d38:	e002      	b.n	8001d40 <crc4+0x90>
      }
      else
      {
        n_rem = (n_rem << 1);
 8001d3a:	89fb      	ldrh	r3, [r7, #14]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	81fb      	strh	r3, [r7, #14]
    for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- )
 8001d40:	7b3b      	ldrb	r3, [r7, #12]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	733b      	strb	r3, [r7, #12]
 8001d46:	7b3b      	ldrb	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ea      	bne.n	8001d22 <crc4+0x72>
  for ( uint8_t i = 0 ; i < 16; i++ )
 8001d4c:	7b7b      	ldrb	r3, [r7, #13]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	737b      	strb	r3, [r7, #13]
 8001d52:	7b7b      	ldrb	r3, [r7, #13]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d9bf      	bls.n	8001cd8 <crc4+0x28>
      }
    }
  }

  n_rem = ((n_rem >> 12) & 0x000F);
 8001d58:	89fb      	ldrh	r3, [r7, #14]
 8001d5a:	0b1b      	lsrs	r3, r3, #12
 8001d5c:	81fb      	strh	r3, [r7, #14]

  return n_rem ^ 0x00;
 8001d5e:	89fb      	ldrh	r3, [r7, #14]
 8001d60:	b2db      	uxtb	r3, r3
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <process_cmd>:
// Command Processing
UART_QUEUE uQueue;
uint8_t msg[128];

void process_cmd(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  if (uQueue.msgCount > 0)
 8001d74:	4b29      	ldr	r3, [pc, #164]	@ (8001e1c <process_cmd+0xac>)
 8001d76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d04b      	beq.n	8001e18 <process_cmd+0xa8>
  {
    // First calculate which message we need to process from the queue (0 - 16). wIndex - msgCount
    uQueue.rIndex = uQueue.wIndex - uQueue.msgCount;
 8001d80:	4b26      	ldr	r3, [pc, #152]	@ (8001e1c <process_cmd+0xac>)
 8001d82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d86:	789a      	ldrb	r2, [r3, #2]
 8001d88:	4b24      	ldr	r3, [pc, #144]	@ (8001e1c <process_cmd+0xac>)
 8001d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	b25a      	sxtb	r2, r3
 8001d98:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <process_cmd+0xac>)
 8001d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d9e:	70da      	strb	r2, [r3, #3]
    uQueue.rIndex = uQueue.rIndex < 0 ? uQueue.rIndex - UART_QUEUE_SIZE : uQueue.rIndex;
 8001da0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <process_cmd+0xac>)
 8001da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001da6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da09      	bge.n	8001dc2 <process_cmd+0x52>
 8001dae:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <process_cmd+0xac>)
 8001db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	3b20      	subs	r3, #32
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	b25b      	sxtb	r3, r3
 8001dc0:	e004      	b.n	8001dcc <process_cmd+0x5c>
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <process_cmd+0xac>)
 8001dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001dcc:	4a13      	ldr	r2, [pc, #76]	@ (8001e1c <process_cmd+0xac>)
 8001dce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dd2:	70d3      	strb	r3, [r2, #3]

    uQueue.msgCount--;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <process_cmd+0xac>)
 8001dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <process_cmd+0xac>)
 8001de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de6:	801a      	strh	r2, [r3, #0]

    printf("Processing Command! : %s\r\n",uQueue.msgQueue[uQueue.rIndex]);
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <process_cmd+0xac>)
 8001dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dee:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001df2:	01db      	lsls	r3, r3, #7
 8001df4:	4a09      	ldr	r2, [pc, #36]	@ (8001e1c <process_cmd+0xac>)
 8001df6:	4413      	add	r3, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4809      	ldr	r0, [pc, #36]	@ (8001e20 <process_cmd+0xb0>)
 8001dfc:	f007 fde8 	bl	80099d0 <iprintf>

    strcpy(msg,uQueue.msgQueue[uQueue.rIndex]);
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <process_cmd+0xac>)
 8001e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e06:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001e0a:	01db      	lsls	r3, r3, #7
 8001e0c:	4a03      	ldr	r2, [pc, #12]	@ (8001e1c <process_cmd+0xac>)
 8001e0e:	4413      	add	r3, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	4804      	ldr	r0, [pc, #16]	@ (8001e24 <process_cmd+0xb4>)
 8001e14:	f007 ffa3 	bl	8009d5e <strcpy>

  }
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000244 	.word	0x20000244
 8001e20:	0800b9a8 	.word	0x0800b9a8
 8001e24:	20001248 	.word	0x20001248

08001e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e2e:	f001 fa78 	bl	8003322 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e32:	f000 f883 	bl	8001f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e36:	f000 fbc3 	bl	80025c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e3a:	f000 fba3 	bl	8002584 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e3e:	f000 f8e5 	bl	800200c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001e42:	f000 f949 	bl	80020d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001e46:	f000 f987 	bl	8002158 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001e4a:	f000 f9c5 	bl	80021d8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001e4e:	f000 fb39 	bl	80024c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e52:	f000 fb67 	bl	8002524 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001e56:	f000 f9ff 	bl	8002258 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001e5a:	f000 fa3b 	bl	80022d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e5e:	f000 fa93 	bl	8002388 <MX_TIM2_Init>
  MX_TIM16_Init();
 8001e62:	f000 fae5 	bl	8002430 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // Turn on Atlas Sensors
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2120      	movs	r1, #32
 8001e6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e6e:	f003 f925 	bl	80050bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001e72:	2201      	movs	r2, #1
 8001e74:	2104      	movs	r1, #4
 8001e76:	4827      	ldr	r0, [pc, #156]	@ (8001f14 <main+0xec>)
 8001e78:	f003 f920 	bl	80050bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e82:	4824      	ldr	r0, [pc, #144]	@ (8001f14 <main+0xec>)
 8001e84:	f003 f91a 	bl	80050bc <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8001e88:	2064      	movs	r0, #100	@ 0x64
 8001e8a:	f001 fabf 	bl	800340c <HAL_Delay>

  // Set up UART RX interrupt
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t*)uartrxbuff, sizeof(uartrxbuff));
 8001e8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e92:	4921      	ldr	r1, [pc, #132]	@ (8001f18 <main+0xf0>)
 8001e94:	4821      	ldr	r0, [pc, #132]	@ (8001f1c <main+0xf4>)
 8001e96:	f007 f82d 	bl	8008ef4 <HAL_UARTEx_ReceiveToIdle_DMA>
  //__HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_HT);

  printf("JAIA BIO SENSOR PAYLOAD VER: %s\n",verStr);
 8001e9a:	4921      	ldr	r1, [pc, #132]	@ (8001f20 <main+0xf8>)
 8001e9c:	4821      	ldr	r0, [pc, #132]	@ (8001f24 <main+0xfc>)
 8001e9e:	f007 fd97 	bl	80099d0 <iprintf>

  // Initialize the depth sensor
  int res = initMS5837(&hi2c3);
 8001ea2:	4821      	ldr	r0, [pc, #132]	@ (8001f28 <main+0x100>)
 8001ea4:	f7ff f848 	bl	8000f38 <initMS5837>
 8001ea8:	60b8      	str	r0, [r7, #8]

  if (res == 0)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d103      	bne.n	8001eb8 <main+0x90>
  {
    printf("Depth Sensor Successfully Configured!\n");
 8001eb0:	481e      	ldr	r0, [pc, #120]	@ (8001f2c <main+0x104>)
 8001eb2:	f007 fdf5 	bl	8009aa0 <puts>
 8001eb6:	e002      	b.n	8001ebe <main+0x96>
  }
  else
  {
    printf("Failed to configure depth sensor!\n");
 8001eb8:	481d      	ldr	r0, [pc, #116]	@ (8001f30 <main+0x108>)
 8001eba:	f007 fdf1 	bl	8009aa0 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int i = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  float fdepth = 0.0;
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	607b      	str	r3, [r7, #4]

  while (1)
  {

    HAL_Delay(1);
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f001 fa9f 	bl	800340c <HAL_Delay>

    if (i % 1000 == 0)
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <main+0x10c>)
 8001ed2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ed6:	1199      	asrs	r1, r3, #6
 8001ed8:	17d3      	asrs	r3, r2, #31
 8001eda:	1acb      	subs	r3, r1, r3
 8001edc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ee0:	fb01 f303 	mul.w	r3, r1, r3
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <main+0xde>
    {
      HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 8001eea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001eee:	4812      	ldr	r0, [pc, #72]	@ (8001f38 <main+0x110>)
 8001ef0:	f003 f8fc 	bl	80050ec <HAL_GPIO_TogglePin>
      //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_11);
      //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);

      // Measure depth sensor
      if (readMS5837() == 0)
 8001ef4:	f7ff f922 	bl	800113c <readMS5837>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <main+0xde>
      {
        fdepth = getDepth();
 8001efe:	f7ff f8e3 	bl	80010c8 <getDepth>
 8001f02:	ed87 0a01 	vstr	s0, [r7, #4]
      }

    }

    // Process any incoming commands on UART
    process_cmd();
 8001f06:	f7ff ff33 	bl	8001d70 <process_cmd>

    i++;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(1);
 8001f10:	e7da      	b.n	8001ec8 <main+0xa0>
 8001f12:	bf00      	nop
 8001f14:	48000400 	.word	0x48000400
 8001f18:	200016c8 	.word	0x200016c8
 8001f1c:	200015f8 	.word	0x200015f8
 8001f20:	0800ba50 	.word	0x0800ba50
 8001f24:	0800b9c4 	.word	0x0800b9c4
 8001f28:	200013d4 	.word	0x200013d4
 8001f2c:	0800b9e8 	.word	0x0800b9e8
 8001f30:	0800ba10 	.word	0x0800ba10
 8001f34:	10624dd3 	.word	0x10624dd3
 8001f38:	48000800 	.word	0x48000800

08001f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b096      	sub	sp, #88	@ 0x58
 8001f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	2244      	movs	r2, #68	@ 0x44
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f007 fe88 	bl	8009c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f50:	463b      	mov	r3, r7
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f5e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001f62:	f003 ff05 	bl	8005d70 <HAL_PWREx_ControlVoltageScaling>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f6c:	f000 fd14 	bl	8002998 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f70:	f003 fee0 	bl	8005d34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f74:	4b24      	ldr	r3, [pc, #144]	@ (8002008 <SystemClock_Config+0xcc>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7a:	4a23      	ldr	r2, [pc, #140]	@ (8002008 <SystemClock_Config+0xcc>)
 8001f7c:	f023 0318 	bic.w	r3, r3, #24
 8001f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001f84:	231d      	movs	r3, #29
 8001f86:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f92:	2301      	movs	r3, #1
 8001f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f96:	2301      	movs	r3, #1
 8001f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001f9e:	2360      	movs	r3, #96	@ 0x60
 8001fa0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001faa:	2305      	movs	r3, #5
 8001fac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fb2:	2307      	movs	r3, #7
 8001fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 ffc2 	bl	8005f4c <HAL_RCC_OscConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001fce:	f000 fce3 	bl	8002998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	2104      	movs	r1, #4
 8001fea:	4618      	mov	r0, r3
 8001fec:	f004 fbc2 	bl	8006774 <HAL_RCC_ClockConfig>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001ff6:	f000 fccf 	bl	8002998 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001ffa:	f005 f829 	bl	8007050 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001ffe:	bf00      	nop
 8002000:	3758      	adds	r7, #88	@ 0x58
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000

0800200c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002012:	463b      	mov	r3, r7
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
 8002020:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002022:	4b29      	ldr	r3, [pc, #164]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 8002024:	4a29      	ldr	r2, [pc, #164]	@ (80020cc <MX_ADC1_Init+0xc0>)
 8002026:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002028:	4b27      	ldr	r3, [pc, #156]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800202e:	4b26      	ldr	r3, [pc, #152]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002034:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800203a:	4b23      	ldr	r3, [pc, #140]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002040:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 8002042:	2204      	movs	r2, #4
 8002044:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002046:	4b20      	ldr	r3, [pc, #128]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 8002048:	2200      	movs	r2, #0
 800204a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800204c:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 800204e:	2200      	movs	r2, #0
 8002050:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002052:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 8002054:	2201      	movs	r2, #1
 8002056:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002058:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002060:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 8002062:	2200      	movs	r2, #0
 8002064:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002066:	4b18      	ldr	r3, [pc, #96]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 8002068:	2200      	movs	r2, #0
 800206a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800206c:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002074:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 8002076:	2200      	movs	r2, #0
 8002078:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800207a:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002082:	4811      	ldr	r0, [pc, #68]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 8002084:	f001 fb72 	bl	800376c <HAL_ADC_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800208e:	f000 fc83 	bl	8002998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002092:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <MX_ADC1_Init+0xc4>)
 8002094:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002096:	2306      	movs	r3, #6
 8002098:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800209e:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <MX_ADC1_Init+0xc8>)
 80020a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020a2:	2304      	movs	r3, #4
 80020a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020aa:	463b      	mov	r3, r7
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	@ (80020c8 <MX_ADC1_Init+0xbc>)
 80020b0:	f001 fc9e 	bl	80039f0 <HAL_ADC_ConfigChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80020ba:	f000 fc6d 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200012c8 	.word	0x200012c8
 80020cc:	50040000 	.word	0x50040000
 80020d0:	08600004 	.word	0x08600004
 80020d4:	407f0000 	.word	0x407f0000

080020d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <MX_I2C1_Init+0x74>)
 80020de:	4a1c      	ldr	r2, [pc, #112]	@ (8002150 <MX_I2C1_Init+0x78>)
 80020e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <MX_I2C1_Init+0x74>)
 80020e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002154 <MX_I2C1_Init+0x7c>)
 80020e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020e8:	4b18      	ldr	r3, [pc, #96]	@ (800214c <MX_I2C1_Init+0x74>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ee:	4b17      	ldr	r3, [pc, #92]	@ (800214c <MX_I2C1_Init+0x74>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020f4:	4b15      	ldr	r3, [pc, #84]	@ (800214c <MX_I2C1_Init+0x74>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020fa:	4b14      	ldr	r3, [pc, #80]	@ (800214c <MX_I2C1_Init+0x74>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <MX_I2C1_Init+0x74>)
 8002102:	2200      	movs	r2, #0
 8002104:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <MX_I2C1_Init+0x74>)
 8002108:	2200      	movs	r2, #0
 800210a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800210c:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <MX_I2C1_Init+0x74>)
 800210e:	2200      	movs	r2, #0
 8002110:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002112:	480e      	ldr	r0, [pc, #56]	@ (800214c <MX_I2C1_Init+0x74>)
 8002114:	f003 f827 	bl	8005166 <HAL_I2C_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800211e:	f000 fc3b 	bl	8002998 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002122:	2100      	movs	r1, #0
 8002124:	4809      	ldr	r0, [pc, #36]	@ (800214c <MX_I2C1_Init+0x74>)
 8002126:	f003 fd6d 	bl	8005c04 <HAL_I2CEx_ConfigAnalogFilter>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002130:	f000 fc32 	bl	8002998 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002134:	2100      	movs	r1, #0
 8002136:	4805      	ldr	r0, [pc, #20]	@ (800214c <MX_I2C1_Init+0x74>)
 8002138:	f003 fdaf 	bl	8005c9a <HAL_I2CEx_ConfigDigitalFilter>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002142:	f000 fc29 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000132c 	.word	0x2000132c
 8002150:	40005400 	.word	0x40005400
 8002154:	10d19ce4 	.word	0x10d19ce4

08002158 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800215c:	4b1b      	ldr	r3, [pc, #108]	@ (80021cc <MX_I2C2_Init+0x74>)
 800215e:	4a1c      	ldr	r2, [pc, #112]	@ (80021d0 <MX_I2C2_Init+0x78>)
 8002160:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8002162:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <MX_I2C2_Init+0x74>)
 8002164:	4a1b      	ldr	r2, [pc, #108]	@ (80021d4 <MX_I2C2_Init+0x7c>)
 8002166:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002168:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <MX_I2C2_Init+0x74>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800216e:	4b17      	ldr	r3, [pc, #92]	@ (80021cc <MX_I2C2_Init+0x74>)
 8002170:	2201      	movs	r2, #1
 8002172:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002174:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <MX_I2C2_Init+0x74>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800217a:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <MX_I2C2_Init+0x74>)
 800217c:	2200      	movs	r2, #0
 800217e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <MX_I2C2_Init+0x74>)
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <MX_I2C2_Init+0x74>)
 8002188:	2200      	movs	r2, #0
 800218a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800218c:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <MX_I2C2_Init+0x74>)
 800218e:	2200      	movs	r2, #0
 8002190:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002192:	480e      	ldr	r0, [pc, #56]	@ (80021cc <MX_I2C2_Init+0x74>)
 8002194:	f002 ffe7 	bl	8005166 <HAL_I2C_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800219e:	f000 fbfb 	bl	8002998 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021a2:	2100      	movs	r1, #0
 80021a4:	4809      	ldr	r0, [pc, #36]	@ (80021cc <MX_I2C2_Init+0x74>)
 80021a6:	f003 fd2d 	bl	8005c04 <HAL_I2CEx_ConfigAnalogFilter>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80021b0:	f000 fbf2 	bl	8002998 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80021b4:	2100      	movs	r1, #0
 80021b6:	4805      	ldr	r0, [pc, #20]	@ (80021cc <MX_I2C2_Init+0x74>)
 80021b8:	f003 fd6f 	bl	8005c9a <HAL_I2CEx_ConfigDigitalFilter>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80021c2:	f000 fbe9 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20001380 	.word	0x20001380
 80021d0:	40005800 	.word	0x40005800
 80021d4:	10d19ce4 	.word	0x10d19ce4

080021d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80021dc:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <MX_I2C3_Init+0x74>)
 80021de:	4a1c      	ldr	r2, [pc, #112]	@ (8002250 <MX_I2C3_Init+0x78>)
 80021e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 80021e2:	4b1a      	ldr	r3, [pc, #104]	@ (800224c <MX_I2C3_Init+0x74>)
 80021e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002254 <MX_I2C3_Init+0x7c>)
 80021e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80021e8:	4b18      	ldr	r3, [pc, #96]	@ (800224c <MX_I2C3_Init+0x74>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021ee:	4b17      	ldr	r3, [pc, #92]	@ (800224c <MX_I2C3_Init+0x74>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f4:	4b15      	ldr	r3, [pc, #84]	@ (800224c <MX_I2C3_Init+0x74>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80021fa:	4b14      	ldr	r3, [pc, #80]	@ (800224c <MX_I2C3_Init+0x74>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002200:	4b12      	ldr	r3, [pc, #72]	@ (800224c <MX_I2C3_Init+0x74>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002206:	4b11      	ldr	r3, [pc, #68]	@ (800224c <MX_I2C3_Init+0x74>)
 8002208:	2200      	movs	r2, #0
 800220a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800220c:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <MX_I2C3_Init+0x74>)
 800220e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002212:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002214:	480d      	ldr	r0, [pc, #52]	@ (800224c <MX_I2C3_Init+0x74>)
 8002216:	f002 ffa6 	bl	8005166 <HAL_I2C_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002220:	f000 fbba 	bl	8002998 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002224:	2100      	movs	r1, #0
 8002226:	4809      	ldr	r0, [pc, #36]	@ (800224c <MX_I2C3_Init+0x74>)
 8002228:	f003 fcec 	bl	8005c04 <HAL_I2CEx_ConfigAnalogFilter>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002232:	f000 fbb1 	bl	8002998 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002236:	2100      	movs	r1, #0
 8002238:	4804      	ldr	r0, [pc, #16]	@ (800224c <MX_I2C3_Init+0x74>)
 800223a:	f003 fd2e 	bl	8005c9a <HAL_I2CEx_ConfigDigitalFilter>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002244:	f000 fba8 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200013d4 	.word	0x200013d4
 8002250:	40005c00 	.word	0x40005c00
 8002254:	10d19ce4 	.word	0x10d19ce4

08002258 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800225c:	4b1b      	ldr	r3, [pc, #108]	@ (80022cc <MX_SPI1_Init+0x74>)
 800225e:	4a1c      	ldr	r2, [pc, #112]	@ (80022d0 <MX_SPI1_Init+0x78>)
 8002260:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002262:	4b1a      	ldr	r3, [pc, #104]	@ (80022cc <MX_SPI1_Init+0x74>)
 8002264:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002268:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800226a:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <MX_SPI1_Init+0x74>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002270:	4b16      	ldr	r3, [pc, #88]	@ (80022cc <MX_SPI1_Init+0x74>)
 8002272:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002276:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002278:	4b14      	ldr	r3, [pc, #80]	@ (80022cc <MX_SPI1_Init+0x74>)
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800227e:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <MX_SPI1_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002284:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <MX_SPI1_Init+0x74>)
 8002286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800228a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800228c:	4b0f      	ldr	r3, [pc, #60]	@ (80022cc <MX_SPI1_Init+0x74>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002292:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <MX_SPI1_Init+0x74>)
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002298:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <MX_SPI1_Init+0x74>)
 800229a:	2200      	movs	r2, #0
 800229c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800229e:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <MX_SPI1_Init+0x74>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022a4:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <MX_SPI1_Init+0x74>)
 80022a6:	2207      	movs	r2, #7
 80022a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022aa:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <MX_SPI1_Init+0x74>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022b0:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <MX_SPI1_Init+0x74>)
 80022b2:	2208      	movs	r2, #8
 80022b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022b6:	4805      	ldr	r0, [pc, #20]	@ (80022cc <MX_SPI1_Init+0x74>)
 80022b8:	f004 ffcc 	bl	8007254 <HAL_SPI_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022c2:	f000 fb69 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20001428 	.word	0x20001428
 80022d0:	40013000 	.word	0x40013000

080022d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022f2:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <MX_TIM1_Init+0xac>)
 80022f4:	4a23      	ldr	r2, [pc, #140]	@ (8002384 <MX_TIM1_Init+0xb0>)
 80022f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022f8:	4b21      	ldr	r3, [pc, #132]	@ (8002380 <MX_TIM1_Init+0xac>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <MX_TIM1_Init+0xac>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002304:	4b1e      	ldr	r3, [pc, #120]	@ (8002380 <MX_TIM1_Init+0xac>)
 8002306:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800230a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230c:	4b1c      	ldr	r3, [pc, #112]	@ (8002380 <MX_TIM1_Init+0xac>)
 800230e:	2200      	movs	r2, #0
 8002310:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <MX_TIM1_Init+0xac>)
 8002314:	2200      	movs	r2, #0
 8002316:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002318:	4b19      	ldr	r3, [pc, #100]	@ (8002380 <MX_TIM1_Init+0xac>)
 800231a:	2200      	movs	r2, #0
 800231c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800231e:	4818      	ldr	r0, [pc, #96]	@ (8002380 <MX_TIM1_Init+0xac>)
 8002320:	f005 f892 	bl	8007448 <HAL_TIM_IC_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800232a:	f000 fb35 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4619      	mov	r1, r3
 8002340:	480f      	ldr	r0, [pc, #60]	@ (8002380 <MX_TIM1_Init+0xac>)
 8002342:	f005 faf1 	bl	8007928 <HAL_TIMEx_MasterConfigSynchronization>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800234c:	f000 fb24 	bl	8002998 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002350:	2300      	movs	r3, #0
 8002352:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002354:	2301      	movs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2200      	movs	r2, #0
 8002364:	4619      	mov	r1, r3
 8002366:	4806      	ldr	r0, [pc, #24]	@ (8002380 <MX_TIM1_Init+0xac>)
 8002368:	f005 f8c5 	bl	80074f6 <HAL_TIM_IC_ConfigChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002372:	f000 fb11 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002376:	bf00      	nop
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000148c 	.word	0x2000148c
 8002384:	40012c00 	.word	0x40012c00

08002388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023a6:	4b21      	ldr	r3, [pc, #132]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023ae:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b4:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023ba:	4b1c      	ldr	r3, [pc, #112]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c8:	4b18      	ldr	r3, [pc, #96]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80023ce:	4817      	ldr	r0, [pc, #92]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023d0:	f005 f83a 	bl	8007448 <HAL_TIM_IC_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023da:	f000 fadd 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4619      	mov	r1, r3
 80023ec:	480f      	ldr	r0, [pc, #60]	@ (800242c <MX_TIM2_Init+0xa4>)
 80023ee:	f005 fa9b 	bl	8007928 <HAL_TIMEx_MasterConfigSynchronization>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80023f8:	f000 face 	bl	8002998 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002400:	2301      	movs	r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	2200      	movs	r2, #0
 8002410:	4619      	mov	r1, r3
 8002412:	4806      	ldr	r0, [pc, #24]	@ (800242c <MX_TIM2_Init+0xa4>)
 8002414:	f005 f86f 	bl	80074f6 <HAL_TIM_IC_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800241e:	f000 fabb 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002422:	bf00      	nop
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200014d8 	.word	0x200014d8

08002430 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002436:	463b      	mov	r3, r7
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002442:	4b1e      	ldr	r3, [pc, #120]	@ (80024bc <MX_TIM16_Init+0x8c>)
 8002444:	4a1e      	ldr	r2, [pc, #120]	@ (80024c0 <MX_TIM16_Init+0x90>)
 8002446:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002448:	4b1c      	ldr	r3, [pc, #112]	@ (80024bc <MX_TIM16_Init+0x8c>)
 800244a:	2200      	movs	r2, #0
 800244c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244e:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <MX_TIM16_Init+0x8c>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002454:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <MX_TIM16_Init+0x8c>)
 8002456:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800245a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245c:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <MX_TIM16_Init+0x8c>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002462:	4b16      	ldr	r3, [pc, #88]	@ (80024bc <MX_TIM16_Init+0x8c>)
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002468:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <MX_TIM16_Init+0x8c>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800246e:	4813      	ldr	r0, [pc, #76]	@ (80024bc <MX_TIM16_Init+0x8c>)
 8002470:	f004 ff93 	bl	800739a <HAL_TIM_Base_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 800247a:	f000 fa8d 	bl	8002998 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 800247e:	480f      	ldr	r0, [pc, #60]	@ (80024bc <MX_TIM16_Init+0x8c>)
 8002480:	f004 ffe2 	bl	8007448 <HAL_TIM_IC_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800248a:	f000 fa85 	bl	8002998 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002492:	2301      	movs	r3, #1
 8002494:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800249e:	463b      	mov	r3, r7
 80024a0:	2200      	movs	r2, #0
 80024a2:	4619      	mov	r1, r3
 80024a4:	4805      	ldr	r0, [pc, #20]	@ (80024bc <MX_TIM16_Init+0x8c>)
 80024a6:	f005 f826 	bl	80074f6 <HAL_TIM_IC_ConfigChannel>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80024b0:	f000 fa72 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20001524 	.word	0x20001524
 80024c0:	40014400 	.word	0x40014400

080024c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024c8:	4b14      	ldr	r3, [pc, #80]	@ (800251c <MX_USART1_UART_Init+0x58>)
 80024ca:	4a15      	ldr	r2, [pc, #84]	@ (8002520 <MX_USART1_UART_Init+0x5c>)
 80024cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ce:	4b13      	ldr	r3, [pc, #76]	@ (800251c <MX_USART1_UART_Init+0x58>)
 80024d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024d6:	4b11      	ldr	r3, [pc, #68]	@ (800251c <MX_USART1_UART_Init+0x58>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <MX_USART1_UART_Init+0x58>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <MX_USART1_UART_Init+0x58>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <MX_USART1_UART_Init+0x58>)
 80024ea:	220c      	movs	r2, #12
 80024ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <MX_USART1_UART_Init+0x58>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <MX_USART1_UART_Init+0x58>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <MX_USART1_UART_Init+0x58>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <MX_USART1_UART_Init+0x58>)
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002506:	4805      	ldr	r0, [pc, #20]	@ (800251c <MX_USART1_UART_Init+0x58>)
 8002508:	f005 fa74 	bl	80079f4 <HAL_UART_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002512:	f000 fa41 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20001570 	.word	0x20001570
 8002520:	40013800 	.word	0x40013800

08002524 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <MX_USART2_UART_Init+0x58>)
 800252a:	4a15      	ldr	r2, [pc, #84]	@ (8002580 <MX_USART2_UART_Init+0x5c>)
 800252c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800252e:	4b13      	ldr	r3, [pc, #76]	@ (800257c <MX_USART2_UART_Init+0x58>)
 8002530:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b11      	ldr	r3, [pc, #68]	@ (800257c <MX_USART2_UART_Init+0x58>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <MX_USART2_UART_Init+0x58>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002542:	4b0e      	ldr	r3, [pc, #56]	@ (800257c <MX_USART2_UART_Init+0x58>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002548:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <MX_USART2_UART_Init+0x58>)
 800254a:	220c      	movs	r2, #12
 800254c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <MX_USART2_UART_Init+0x58>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b09      	ldr	r3, [pc, #36]	@ (800257c <MX_USART2_UART_Init+0x58>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800255a:	4b08      	ldr	r3, [pc, #32]	@ (800257c <MX_USART2_UART_Init+0x58>)
 800255c:	2200      	movs	r2, #0
 800255e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <MX_USART2_UART_Init+0x58>)
 8002562:	2200      	movs	r2, #0
 8002564:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	@ (800257c <MX_USART2_UART_Init+0x58>)
 8002568:	f005 fa44 	bl	80079f4 <HAL_UART_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002572:	f000 fa11 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200015f8 	.word	0x200015f8
 8002580:	40004400 	.word	0x40004400

08002584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800258a:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <MX_DMA_Init+0x38>)
 800258c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258e:	4a0b      	ldr	r2, [pc, #44]	@ (80025bc <MX_DMA_Init+0x38>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6493      	str	r3, [r2, #72]	@ 0x48
 8002596:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <MX_DMA_Init+0x38>)
 8002598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	2010      	movs	r0, #16
 80025a8:	f001 fedf 	bl	800436a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80025ac:	2010      	movs	r0, #16
 80025ae:	f001 fef8 	bl	80043a2 <HAL_NVIC_EnableIRQ>

}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000

080025c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	@ 0x28
 80025c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	60da      	str	r2, [r3, #12]
 80025d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 80025d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025da:	4a69      	ldr	r2, [pc, #420]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025e2:	4b67      	ldr	r3, [pc, #412]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 80025e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ee:	4b64      	ldr	r3, [pc, #400]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 80025f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f2:	4a63      	ldr	r2, [pc, #396]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 80025f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025fa:	4b61      	ldr	r3, [pc, #388]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	4b5e      	ldr	r3, [pc, #376]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	4a5d      	ldr	r2, [pc, #372]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002612:	4b5b      	ldr	r3, [pc, #364]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	4b58      	ldr	r3, [pc, #352]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	4a57      	ldr	r2, [pc, #348]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800262a:	4b55      	ldr	r3, [pc, #340]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002636:	4b52      	ldr	r3, [pc, #328]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263a:	4a51      	ldr	r2, [pc, #324]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 800263c:	f043 0308 	orr.w	r3, r3, #8
 8002640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002642:	4b4f      	ldr	r3, [pc, #316]	@ (8002780 <MX_GPIO_Init+0x1c0>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PDIS_PH_EN_GPIO_Port, PDIS_PH_EN_Pin, GPIO_PIN_RESET);
 800264e:	2200      	movs	r2, #0
 8002650:	2120      	movs	r1, #32
 8002652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002656:	f002 fd31 	bl	80050bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PDIS_DO_EN_Pin|PDIS_EC_EN_Pin, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	f241 0104 	movw	r1, #4100	@ 0x1004
 8002660:	4848      	ldr	r0, [pc, #288]	@ (8002784 <MX_GPIO_Init+0x1c4>)
 8002662:	f002 fd2b 	bl	80050bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002666:	2200      	movs	r2, #0
 8002668:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800266c:	4846      	ldr	r0, [pc, #280]	@ (8002788 <MX_GPIO_Init+0x1c8>)
 800266e:	f002 fd25 	bl	80050bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : THERMISTOR_Pin */
  GPIO_InitStruct.Pin = THERMISTOR_Pin;
 8002672:	2308      	movs	r3, #8
 8002674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002676:	2303      	movs	r3, #3
 8002678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(THERMISTOR_GPIO_Port, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	4840      	ldr	r0, [pc, #256]	@ (8002788 <MX_GPIO_Init+0x1c8>)
 8002686:	f002 fb9f 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDIS_PH_EN_Pin */
  GPIO_InitStruct.Pin = PDIS_PH_EN_Pin;
 800268a:	2320      	movs	r3, #32
 800268c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268e:	2301      	movs	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002692:	2302      	movs	r3, #2
 8002694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PDIS_PH_EN_GPIO_Port, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026a4:	f002 fb90 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OC2_Pin */
  GPIO_InitStruct.Pin = OC2_Pin;
 80026a8:	2320      	movs	r3, #32
 80026aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026b2:	2302      	movs	r3, #2
 80026b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OC2_GPIO_Port, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4832      	ldr	r0, [pc, #200]	@ (8002788 <MX_GPIO_Init+0x1c8>)
 80026be:	f002 fb83 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SC1_Pin OC1_Pin WC_EN_Pin */
  GPIO_InitStruct.Pin = SC1_Pin|OC1_Pin|WC_EN_Pin;
 80026c2:	f242 0303 	movw	r3, #8195	@ 0x2003
 80026c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026ce:	2302      	movs	r3, #2
 80026d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	482a      	ldr	r0, [pc, #168]	@ (8002784 <MX_GPIO_Init+0x1c4>)
 80026da:	f002 fb75 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDIS_DO_EN_Pin PDIS_EC_EN_Pin */
  GPIO_InitStruct.Pin = PDIS_DO_EN_Pin|PDIS_EC_EN_Pin;
 80026de:	f241 0304 	movw	r3, #4100	@ 0x1004
 80026e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e4:	2301      	movs	r3, #1
 80026e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026e8:	2302      	movs	r3, #2
 80026ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4619      	mov	r1, r3
 80026f6:	4823      	ldr	r0, [pc, #140]	@ (8002784 <MX_GPIO_Init+0x1c4>)
 80026f8:	f002 fb66 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS232_INV_Pin */
  GPIO_InitStruct.Pin = RS232_INV_Pin;
 80026fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002706:	2302      	movs	r3, #2
 8002708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS232_INV_GPIO_Port, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	481d      	ldr	r0, [pc, #116]	@ (8002788 <MX_GPIO_Init+0x1c8>)
 8002712:	f002 fb59 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8002716:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800271a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271c:	2301      	movs	r3, #1
 800271e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4619      	mov	r1, r3
 800272e:	4816      	ldr	r0, [pc, #88]	@ (8002788 <MX_GPIO_Init+0x1c8>)
 8002730:	f002 fb4a 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SC2_Pin */
  GPIO_InitStruct.Pin = SC2_Pin;
 8002734:	2304      	movs	r3, #4
 8002736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SC2_GPIO_Port, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	4811      	ldr	r0, [pc, #68]	@ (800278c <MX_GPIO_Init+0x1cc>)
 8002748:	f002 fb3e 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PPS_Pin */
  GPIO_InitStruct.Pin = PPS_Pin;
 800274c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002752:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	4808      	ldr	r0, [pc, #32]	@ (8002784 <MX_GPIO_Init+0x1c4>)
 8002764:	f002 fb30 	bl	8004dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002768:	2200      	movs	r2, #0
 800276a:	2100      	movs	r1, #0
 800276c:	2017      	movs	r0, #23
 800276e:	f001 fdfc 	bl	800436a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002772:	2017      	movs	r0, #23
 8002774:	f001 fe15 	bl	80043a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002778:	bf00      	nop
 800277a:	3728      	adds	r7, #40	@ 0x28
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	48000400 	.word	0x48000400
 8002788:	48000800 	.word	0x48000800
 800278c:	48000c00 	.word	0x48000c00

08002790 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *data, int len) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	4808      	ldr	r0, [pc, #32]	@ (80027c8 <_write+0x38>)
 80027a8:	f005 f972 	bl	8007a90 <HAL_UART_Transmit>
 80027ac:	4603      	mov	r3, r0
 80027ae:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK) ? len : -1;
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <_write+0x2a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	e001      	b.n	80027be <_write+0x2e>
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200015f8 	.word	0x200015f8

080027cc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 80027d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027dc:	482d      	ldr	r0, [pc, #180]	@ (8002894 <HAL_UARTEx_RxEventCallback+0xc8>)
 80027de:	f002 fc85 	bl	80050ec <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_11);
 80027e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027e6:	482b      	ldr	r0, [pc, #172]	@ (8002894 <HAL_UARTEx_RxEventCallback+0xc8>)
 80027e8:	f002 fc80 	bl	80050ec <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 80027ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027f0:	4828      	ldr	r0, [pc, #160]	@ (8002894 <HAL_UARTEx_RxEventCallback+0xc8>)
 80027f2:	f002 fc7b 	bl	80050ec <HAL_GPIO_TogglePin>
  // NOTE: This gets called on HT and FT by default
  JumpToBootloader();
 80027f6:	f000 f859 	bl	80028ac <JumpToBootloader>
  if (Size > 1)
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d93f      	bls.n	8002880 <HAL_UARTEx_RxEventCallback+0xb4>
  {
    uartrxbuff[Size] = '\0';
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	4a25      	ldr	r2, [pc, #148]	@ (8002898 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002804:	2100      	movs	r1, #0
 8002806:	54d1      	strb	r1, [r2, r3]

    printf("--> %s\n",uartrxbuff);
 8002808:	4923      	ldr	r1, [pc, #140]	@ (8002898 <HAL_UARTEx_RxEventCallback+0xcc>)
 800280a:	4824      	ldr	r0, [pc, #144]	@ (800289c <HAL_UARTEx_RxEventCallback+0xd0>)
 800280c:	f007 f8e0 	bl	80099d0 <iprintf>

    if (uartrxbuff[0] == '$')
 8002810:	4b21      	ldr	r3, [pc, #132]	@ (8002898 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b24      	cmp	r3, #36	@ 0x24
 8002816:	d133      	bne.n	8002880 <HAL_UARTEx_RxEventCallback+0xb4>
    {
      // All '$' messages are added to queue to be processed
      // Add message to the queue if there's enough room
      if (uQueue.msgCount < UART_QUEUE_SIZE)
 8002818:	4b21      	ldr	r3, [pc, #132]	@ (80028a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 800281a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	2b1f      	cmp	r3, #31
 8002822:	d82a      	bhi.n	800287a <HAL_UARTEx_RxEventCallback+0xae>
      {
        uQueue.msgCount++;
 8002824:	4b1e      	ldr	r3, [pc, #120]	@ (80028a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002836:	801a      	strh	r2, [r3, #0]

        if (uQueue.wIndex > UART_QUEUE_SIZE - 1)
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 800283a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800283e:	789b      	ldrb	r3, [r3, #2]
 8002840:	2b1f      	cmp	r3, #31
 8002842:	d904      	bls.n	800284e <HAL_UARTEx_RxEventCallback+0x82>
        {
          uQueue.wIndex = 0;
 8002844:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800284a:	2200      	movs	r2, #0
 800284c:	709a      	strb	r2, [r3, #2]
        }

        // Copy Message into message queue!
        strcpy(uQueue.msgQueue[uQueue.wIndex],uartrxbuff);
 800284e:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002854:	789b      	ldrb	r3, [r3, #2]
 8002856:	01db      	lsls	r3, r3, #7
 8002858:	4a11      	ldr	r2, [pc, #68]	@ (80028a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 800285a:	4413      	add	r3, r2
 800285c:	490e      	ldr	r1, [pc, #56]	@ (8002898 <HAL_UARTEx_RxEventCallback+0xcc>)
 800285e:	4618      	mov	r0, r3
 8002860:	f007 fa7d 	bl	8009d5e <strcpy>

        //printf("Command RX. msgCount: %d, wIndex: %d, rIndex: %d \n", msgCount, wIndex, rIndex);
        //printf("UART CMD Added to Queue at Index %d : %s", wIndex, msgQueue[wIndex]);

        uQueue.wIndex++;
 8002864:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800286a:	789b      	ldrb	r3, [r3, #2]
 800286c:	3301      	adds	r3, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002876:	709a      	strb	r2, [r3, #2]
 8002878:	e002      	b.n	8002880 <HAL_UARTEx_RxEventCallback+0xb4>

      }
      else
      {
        // Erorr UART queue full!
        printf("UART Queue full!\n");
 800287a:	480a      	ldr	r0, [pc, #40]	@ (80028a4 <HAL_UARTEx_RxEventCallback+0xd8>)
 800287c:	f007 f910 	bl	8009aa0 <puts>

    }
  }

  // Set up next DMA Reception!
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t*)uartrxbuff, sizeof(uartrxbuff));
 8002880:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002884:	4904      	ldr	r1, [pc, #16]	@ (8002898 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002886:	4808      	ldr	r0, [pc, #32]	@ (80028a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002888:	f006 fb34 	bl	8008ef4 <HAL_UARTEx_ReceiveToIdle_DMA>
  //__HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_HT);

}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	48000800 	.word	0x48000800
 8002898:	200016c8 	.word	0x200016c8
 800289c:	0800ba34 	.word	0x0800ba34
 80028a0:	20000244 	.word	0x20000244
 80028a4:	0800ba3c 	.word	0x0800ba3c
 80028a8:	200015f8 	.word	0x200015f8

080028ac <JumpToBootloader>:

void JumpToBootloader(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	@ 0x30
 80028b0:	af00      	add	r7, sp, #0

  HAL_FLASH_Unlock();
 80028b2:	f002 f873 	bl	800499c <HAL_FLASH_Unlock>

  // Flash Erase Configuration
  FLASH_EraseInitTypeDef eraseInitStruct = {0};
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
  uint32_t pageError = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	603b      	str	r3, [r7, #0]

  eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // Page erase
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
  eraseInitStruct.Banks = FLASH_BANK_1;             // Specify Bank 1
 80028ca:	2301      	movs	r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]
  eraseInitStruct.Page = 0;                         // Page number to erase (0 = first page)
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  eraseInitStruct.NbPages = 1;                      // Number of pages to erase
 80028d2:	2301      	movs	r3, #1
 80028d4:	613b      	str	r3, [r7, #16]

  // Perform the erase operation
  if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK)
 80028d6:	463a      	mov	r2, r7
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f002 f94d 	bl	8004b7c <HAL_FLASHEx_Erase>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d004      	beq.n	80028f2 <JumpToBootloader+0x46>
  {
      // Handle error
      uint32_t errorCode = HAL_FLASH_GetError();
 80028e8:	f002 f88a 	bl	8004a00 <HAL_FLASH_GetError>
 80028ec:	61b8      	str	r0, [r7, #24]
      while (1);
 80028ee:	bf00      	nop
 80028f0:	e7fd      	b.n	80028ee <JumpToBootloader+0x42>
  }

  uint32_t address = 0x08000000;
 80028f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80028f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint64_t data_to_write = 0xFFFFFFFFFFFFFFFF;
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002900:	e9c7 2308 	strd	r2, r3, [r7, #32]

  // Program the flash (64-bit aligned)
  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data_to_write) != HAL_OK)
 8002904:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002908:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800290a:	2000      	movs	r0, #0
 800290c:	f001 ffda 	bl	80048c4 <HAL_FLASH_Program>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d004      	beq.n	8002920 <JumpToBootloader+0x74>
  {
      uint32_t errorCode = HAL_FLASH_GetError();
 8002916:	f002 f873 	bl	8004a00 <HAL_FLASH_GetError>
 800291a:	61f8      	str	r0, [r7, #28]
      while (1);
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <JumpToBootloader+0x70>
  }

  HAL_FLASH_Lock(); // Lock the flash to prevent accidental writes
 8002920:	f002 f85e 	bl	80049e0 <HAL_FLASH_Lock>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002924:	b672      	cpsid	i
}
 8002926:	bf00      	nop

  /* Disable all interrupts */
  __disable_irq();

  /* Disable Systick timer */
  SysTick->CTRL = 0;
 8002928:	4b18      	ldr	r3, [pc, #96]	@ (800298c <JumpToBootloader+0xe0>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]

  /* Set the clock to the default state */
  HAL_RCC_DeInit();
 800292e:	f003 fa75 	bl	8005e1c <HAL_RCC_DeInit>

  /* Clear Interrupt Enable Register & Interrupt Pending Register */
  for (uint8_t i = 0; i < (MCU_IRQS + 31u) / 32; i++)
 8002932:	2300      	movs	r3, #0
 8002934:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002938:	e014      	b.n	8002964 <JumpToBootloader+0xb8>
  {
    NVIC->ICER[i]=0xFFFFFFFF;
 800293a:	4a15      	ldr	r2, [pc, #84]	@ (8002990 <JumpToBootloader+0xe4>)
 800293c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002940:	3320      	adds	r3, #32
 8002942:	f04f 31ff 	mov.w	r1, #4294967295
 8002946:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NVIC->ICPR[i]=0xFFFFFFFF;
 800294a:	4a11      	ldr	r2, [pc, #68]	@ (8002990 <JumpToBootloader+0xe4>)
 800294c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002950:	3360      	adds	r3, #96	@ 0x60
 8002952:	f04f 31ff 	mov.w	r1, #4294967295
 8002956:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint8_t i = 0; i < (MCU_IRQS + 31u) / 32; i++)
 800295a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800295e:	3301      	adds	r3, #1
 8002960:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002964:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002968:	2b02      	cmp	r3, #2
 800296a:	d9e6      	bls.n	800293a <JumpToBootloader+0x8e>
  __ASM volatile ("cpsie i" : : : "memory");
 800296c:	b662      	cpsie	i
}
 800296e:	bf00      	nop

  /* Re-enable all interrupts */
  __enable_irq();

  // Set the MSP
  __set_MSP(BOOTVTAB->Initial_SP);
 8002970:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <JumpToBootloader+0xe8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f383 8808 	msr	MSP, r3
}
 800297c:	bf00      	nop

  // Jump to app firmware
  BOOTVTAB->Reset_Handler();
 800297e:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <JumpToBootloader+0xe8>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4798      	blx	r3
}
 8002984:	bf00      	nop
 8002986:	3730      	adds	r7, #48	@ 0x30
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	e000e010 	.word	0xe000e010
 8002990:	e000e100 	.word	0xe000e100
 8002994:	1fff0000 	.word	0x1fff0000

08002998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800299c:	b672      	cpsid	i
}
 800299e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <Error_Handler+0x8>

080029a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029aa:	4b0f      	ldr	r3, [pc, #60]	@ (80029e8 <HAL_MspInit+0x44>)
 80029ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ae:	4a0e      	ldr	r2, [pc, #56]	@ (80029e8 <HAL_MspInit+0x44>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80029b6:	4b0c      	ldr	r3, [pc, #48]	@ (80029e8 <HAL_MspInit+0x44>)
 80029b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <HAL_MspInit+0x44>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c6:	4a08      	ldr	r2, [pc, #32]	@ (80029e8 <HAL_MspInit+0x44>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_MspInit+0x44>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000

080029ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b0a2      	sub	sp, #136	@ 0x88
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2260      	movs	r2, #96	@ 0x60
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f007 f927 	bl	8009c60 <memset>
  if(hadc->Instance==ADC1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a31      	ldr	r2, [pc, #196]	@ (8002adc <HAL_ADC_MspInit+0xf0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d15b      	bne.n	8002ad4 <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a20:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002a22:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002a26:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8002a2c:	2305      	movs	r3, #5
 8002a2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002a30:	2310      	movs	r3, #16
 8002a32:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002a34:	2307      	movs	r3, #7
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002a40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a44:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 f8b6 	bl	8006bbc <HAL_RCCEx_PeriphCLKConfig>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002a56:	f7ff ff9f 	bl	8002998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ae0 <HAL_ADC_MspInit+0xf4>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5e:	4a20      	ldr	r2, [pc, #128]	@ (8002ae0 <HAL_ADC_MspInit+0xf4>)
 8002a60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae0 <HAL_ADC_MspInit+0xf4>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae0 <HAL_ADC_MspInit+0xf4>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a76:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae0 <HAL_ADC_MspInit+0xf4>)
 8002a78:	f043 0304 	orr.w	r3, r3, #4
 8002a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ae0 <HAL_ADC_MspInit+0xf4>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <HAL_ADC_MspInit+0xf4>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8e:	4a14      	ldr	r2, [pc, #80]	@ (8002ae0 <HAL_ADC_MspInit+0xf4>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a96:	4b12      	ldr	r3, [pc, #72]	@ (8002ae0 <HAL_ADC_MspInit+0xf4>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_P_IN_Pin|ADC1_N_IN_Pin|GPIO_PIN_4;
 8002aa2:	2316      	movs	r3, #22
 8002aa4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002aa6:	230b      	movs	r3, #11
 8002aa8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	480b      	ldr	r0, [pc, #44]	@ (8002ae4 <HAL_ADC_MspInit+0xf8>)
 8002ab6:	f002 f987 	bl	8004dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002aba:	2310      	movs	r3, #16
 8002abc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002abe:	230b      	movs	r3, #11
 8002ac0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002aca:	4619      	mov	r1, r3
 8002acc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ad0:	f002 f97a 	bl	8004dc8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002ad4:	bf00      	nop
 8002ad6:	3788      	adds	r7, #136	@ 0x88
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	50040000 	.word	0x50040000
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	48000800 	.word	0x48000800

08002ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b0a6      	sub	sp, #152	@ 0x98
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b04:	2260      	movs	r2, #96	@ 0x60
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f007 f8a9 	bl	8009c60 <memset>
  if(hi2c->Instance==I2C1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a73      	ldr	r2, [pc, #460]	@ (8002ce0 <HAL_I2C_MspInit+0x1f8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d13b      	bne.n	8002b90 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b18:	2340      	movs	r3, #64	@ 0x40
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b24:	4618      	mov	r0, r3
 8002b26:	f004 f849 	bl	8006bbc <HAL_RCCEx_PeriphCLKConfig>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002b30:	f7ff ff32 	bl	8002998 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b34:	4b6b      	ldr	r3, [pc, #428]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b38:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b40:	4b68      	ldr	r3, [pc, #416]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	623b      	str	r3, [r7, #32]
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b4c:	23c0      	movs	r3, #192	@ 0xc0
 8002b4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b52:	2312      	movs	r3, #18
 8002b54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b64:	2304      	movs	r3, #4
 8002b66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002b6e:	4619      	mov	r1, r3
 8002b70:	485d      	ldr	r0, [pc, #372]	@ (8002ce8 <HAL_I2C_MspInit+0x200>)
 8002b72:	f002 f929 	bl	8004dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b76:	4b5b      	ldr	r3, [pc, #364]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002b7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b82:	4b58      	ldr	r3, [pc, #352]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b8e:	e0a3      	b.n	8002cd8 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a55      	ldr	r2, [pc, #340]	@ (8002cec <HAL_I2C_MspInit+0x204>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d13c      	bne.n	8002c14 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 f808 	bl	8006bbc <HAL_RCCEx_PeriphCLKConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8002bb2:	f7ff fef1 	bl	8002998 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bba:	4a4a      	ldr	r2, [pc, #296]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bc2:	4b48      	ldr	r3, [pc, #288]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 8002bce:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8002bd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bd6:	2312      	movs	r3, #18
 8002bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be2:	2303      	movs	r3, #3
 8002be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002be8:	2304      	movs	r3, #4
 8002bea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bee:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	483c      	ldr	r0, [pc, #240]	@ (8002ce8 <HAL_I2C_MspInit+0x200>)
 8002bf6:	f002 f8e7 	bl	8004dc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	4a39      	ldr	r2, [pc, #228]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002c00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c06:	4b37      	ldr	r3, [pc, #220]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697b      	ldr	r3, [r7, #20]
}
 8002c12:	e061      	b.n	8002cd8 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C3)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a35      	ldr	r2, [pc, #212]	@ (8002cf0 <HAL_I2C_MspInit+0x208>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d15c      	bne.n	8002cd8 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002c24:	2300      	movs	r3, #0
 8002c26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 ffc5 	bl	8006bbc <HAL_RCCEx_PeriphCLKConfig>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8002c38:	f7ff feae 	bl	8002998 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3c:	4b29      	ldr	r3, [pc, #164]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c40:	4a28      	ldr	r2, [pc, #160]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c48:	4b26      	ldr	r3, [pc, #152]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c54:	4b23      	ldr	r3, [pc, #140]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c58:	4a22      	ldr	r2, [pc, #136]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002c5a:	f043 0302 	orr.w	r3, r3, #2
 8002c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c60:	4b20      	ldr	r3, [pc, #128]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c72:	2312      	movs	r3, #18
 8002c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c84:	2304      	movs	r3, #4
 8002c86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4818      	ldr	r0, [pc, #96]	@ (8002cf4 <HAL_I2C_MspInit+0x20c>)
 8002c92:	f002 f899 	bl	8004dc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c96:	2310      	movs	r3, #16
 8002c98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c9c:	2312      	movs	r3, #18
 8002c9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cae:	2304      	movs	r3, #4
 8002cb0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002cb8:	4619      	mov	r1, r3
 8002cba:	480b      	ldr	r0, [pc, #44]	@ (8002ce8 <HAL_I2C_MspInit+0x200>)
 8002cbc:	f002 f884 	bl	8004dc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002cc0:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc4:	4a07      	ldr	r2, [pc, #28]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002cc6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ccc:	4b05      	ldr	r3, [pc, #20]	@ (8002ce4 <HAL_I2C_MspInit+0x1fc>)
 8002cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
}
 8002cd8:	bf00      	nop
 8002cda:	3798      	adds	r7, #152	@ 0x98
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40005400 	.word	0x40005400
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	48000400 	.word	0x48000400
 8002cec:	40005800 	.word	0x40005800
 8002cf0:	40005c00 	.word	0x40005c00
 8002cf4:	48000800 	.word	0x48000800

08002cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	@ 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a17      	ldr	r2, [pc, #92]	@ (8002d74 <HAL_SPI_MspInit+0x7c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d128      	bne.n	8002d6c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d1a:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <HAL_SPI_MspInit+0x80>)
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1e:	4a16      	ldr	r2, [pc, #88]	@ (8002d78 <HAL_SPI_MspInit+0x80>)
 8002d20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d24:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d26:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <HAL_SPI_MspInit+0x80>)
 8002d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d32:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_SPI_MspInit+0x80>)
 8002d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d36:	4a10      	ldr	r2, [pc, #64]	@ (8002d78 <HAL_SPI_MspInit+0x80>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <HAL_SPI_MspInit+0x80>)
 8002d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002d4a:	23c2      	movs	r3, #194	@ 0xc2
 8002d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d56:	2303      	movs	r3, #3
 8002d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d5a:	2305      	movs	r3, #5
 8002d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	4619      	mov	r1, r3
 8002d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d68:	f002 f82e 	bl	8004dc8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002d6c:	bf00      	nop
 8002d6e:	3728      	adds	r7, #40	@ 0x28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40013000 	.word	0x40013000
 8002d78:	40021000 	.word	0x40021000

08002d7c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08c      	sub	sp, #48	@ 0x30
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2f      	ldr	r2, [pc, #188]	@ (8002e58 <HAL_TIM_IC_MspInit+0xdc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d12a      	bne.n	8002df4 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002e5c <HAL_TIM_IC_MspInit+0xe0>)
 8002da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da2:	4a2e      	ldr	r2, [pc, #184]	@ (8002e5c <HAL_TIM_IC_MspInit+0xe0>)
 8002da4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002da8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002daa:	4b2c      	ldr	r3, [pc, #176]	@ (8002e5c <HAL_TIM_IC_MspInit+0xe0>)
 8002dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	4b29      	ldr	r3, [pc, #164]	@ (8002e5c <HAL_TIM_IC_MspInit+0xe0>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dba:	4a28      	ldr	r2, [pc, #160]	@ (8002e5c <HAL_TIM_IC_MspInit+0xe0>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dc2:	4b26      	ldr	r3, [pc, #152]	@ (8002e5c <HAL_TIM_IC_MspInit+0xe0>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002de0:	2301      	movs	r3, #1
 8002de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de4:	f107 031c 	add.w	r3, r7, #28
 8002de8:	4619      	mov	r1, r3
 8002dea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dee:	f001 ffeb 	bl	8004dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002df2:	e02d      	b.n	8002e50 <HAL_TIM_IC_MspInit+0xd4>
  else if(htim_ic->Instance==TIM2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfc:	d128      	bne.n	8002e50 <HAL_TIM_IC_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dfe:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <HAL_TIM_IC_MspInit+0xe0>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	4a16      	ldr	r2, [pc, #88]	@ (8002e5c <HAL_TIM_IC_MspInit+0xe0>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e0a:	4b14      	ldr	r3, [pc, #80]	@ (8002e5c <HAL_TIM_IC_MspInit+0xe0>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	4b11      	ldr	r3, [pc, #68]	@ (8002e5c <HAL_TIM_IC_MspInit+0xe0>)
 8002e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1a:	4a10      	ldr	r2, [pc, #64]	@ (8002e5c <HAL_TIM_IC_MspInit+0xe0>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e22:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <HAL_TIM_IC_MspInit+0xe0>)
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 031c 	add.w	r3, r7, #28
 8002e46:	4619      	mov	r1, r3
 8002e48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e4c:	f001 ffbc 	bl	8004dc8 <HAL_GPIO_Init>
}
 8002e50:	bf00      	nop
 8002e52:	3730      	adds	r7, #48	@ 0x30
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40021000 	.word	0x40021000

08002e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	@ 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM16)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a17      	ldr	r2, [pc, #92]	@ (8002edc <HAL_TIM_Base_MspInit+0x7c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d128      	bne.n	8002ed4 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002e82:	4b17      	ldr	r3, [pc, #92]	@ (8002ee0 <HAL_TIM_Base_MspInit+0x80>)
 8002e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e86:	4a16      	ldr	r2, [pc, #88]	@ (8002ee0 <HAL_TIM_Base_MspInit+0x80>)
 8002e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e8e:	4b14      	ldr	r3, [pc, #80]	@ (8002ee0 <HAL_TIM_Base_MspInit+0x80>)
 8002e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <HAL_TIM_Base_MspInit+0x80>)
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9e:	4a10      	ldr	r2, [pc, #64]	@ (8002ee0 <HAL_TIM_Base_MspInit+0x80>)
 8002ea0:	f043 0302 	orr.w	r3, r3, #2
 8002ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee0 <HAL_TIM_Base_MspInit+0x80>)
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002eb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002ec4:	230e      	movs	r3, #14
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4805      	ldr	r0, [pc, #20]	@ (8002ee4 <HAL_TIM_Base_MspInit+0x84>)
 8002ed0:	f001 ff7a 	bl	8004dc8 <HAL_GPIO_Init>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8002ed4:	bf00      	nop
 8002ed6:	3728      	adds	r7, #40	@ 0x28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	48000400 	.word	0x48000400

08002ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b0a4      	sub	sp, #144	@ 0x90
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	2260      	movs	r2, #96	@ 0x60
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f006 fea9 	bl	8009c60 <memset>
  if(huart->Instance==USART1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a5f      	ldr	r2, [pc, #380]	@ (8003090 <HAL_UART_MspInit+0x1a8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d144      	bne.n	8002fa2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 fe49 	bl	8006bbc <HAL_RCCEx_PeriphCLKConfig>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f30:	f7ff fd32 	bl	8002998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f34:	4b57      	ldr	r3, [pc, #348]	@ (8003094 <HAL_UART_MspInit+0x1ac>)
 8002f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f38:	4a56      	ldr	r2, [pc, #344]	@ (8003094 <HAL_UART_MspInit+0x1ac>)
 8002f3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f40:	4b54      	ldr	r3, [pc, #336]	@ (8003094 <HAL_UART_MspInit+0x1ac>)
 8002f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4c:	4b51      	ldr	r3, [pc, #324]	@ (8003094 <HAL_UART_MspInit+0x1ac>)
 8002f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f50:	4a50      	ldr	r2, [pc, #320]	@ (8003094 <HAL_UART_MspInit+0x1ac>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f58:	4b4e      	ldr	r3, [pc, #312]	@ (8003094 <HAL_UART_MspInit+0x1ac>)
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f64:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f68:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f76:	2303      	movs	r3, #3
 8002f78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f7c:	2307      	movs	r3, #7
 8002f7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f82:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002f86:	4619      	mov	r1, r3
 8002f88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f8c:	f001 ff1c 	bl	8004dc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2100      	movs	r1, #0
 8002f94:	2025      	movs	r0, #37	@ 0x25
 8002f96:	f001 f9e8 	bl	800436a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f9a:	2025      	movs	r0, #37	@ 0x25
 8002f9c:	f001 fa01 	bl	80043a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002fa0:	e071      	b.n	8003086 <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a3c      	ldr	r2, [pc, #240]	@ (8003098 <HAL_UART_MspInit+0x1b0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d16c      	bne.n	8003086 <HAL_UART_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002fac:	2302      	movs	r3, #2
 8002fae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 fdff 	bl	8006bbc <HAL_RCCEx_PeriphCLKConfig>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002fc4:	f7ff fce8 	bl	8002998 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fc8:	4b32      	ldr	r3, [pc, #200]	@ (8003094 <HAL_UART_MspInit+0x1ac>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	4a31      	ldr	r2, [pc, #196]	@ (8003094 <HAL_UART_MspInit+0x1ac>)
 8002fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <HAL_UART_MspInit+0x1ac>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8003094 <HAL_UART_MspInit+0x1ac>)
 8002fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8003094 <HAL_UART_MspInit+0x1ac>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fec:	4b29      	ldr	r3, [pc, #164]	@ (8003094 <HAL_UART_MspInit+0x1ac>)
 8002fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ff8:	230c      	movs	r3, #12
 8002ffa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003008:	2303      	movs	r3, #3
 800300a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800300e:	2307      	movs	r3, #7
 8003010:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003014:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003018:	4619      	mov	r1, r3
 800301a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800301e:	f001 fed3 	bl	8004dc8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003022:	4b1e      	ldr	r3, [pc, #120]	@ (800309c <HAL_UART_MspInit+0x1b4>)
 8003024:	4a1e      	ldr	r2, [pc, #120]	@ (80030a0 <HAL_UART_MspInit+0x1b8>)
 8003026:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003028:	4b1c      	ldr	r3, [pc, #112]	@ (800309c <HAL_UART_MspInit+0x1b4>)
 800302a:	2202      	movs	r2, #2
 800302c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800302e:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <HAL_UART_MspInit+0x1b4>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003034:	4b19      	ldr	r3, [pc, #100]	@ (800309c <HAL_UART_MspInit+0x1b4>)
 8003036:	2200      	movs	r2, #0
 8003038:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800303a:	4b18      	ldr	r3, [pc, #96]	@ (800309c <HAL_UART_MspInit+0x1b4>)
 800303c:	2280      	movs	r2, #128	@ 0x80
 800303e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003040:	4b16      	ldr	r3, [pc, #88]	@ (800309c <HAL_UART_MspInit+0x1b4>)
 8003042:	2200      	movs	r2, #0
 8003044:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003046:	4b15      	ldr	r3, [pc, #84]	@ (800309c <HAL_UART_MspInit+0x1b4>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800304c:	4b13      	ldr	r3, [pc, #76]	@ (800309c <HAL_UART_MspInit+0x1b4>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003052:	4b12      	ldr	r3, [pc, #72]	@ (800309c <HAL_UART_MspInit+0x1b4>)
 8003054:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003058:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800305a:	4810      	ldr	r0, [pc, #64]	@ (800309c <HAL_UART_MspInit+0x1b4>)
 800305c:	f001 f9bc 	bl	80043d8 <HAL_DMA_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8003066:	f7ff fc97 	bl	8002998 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a0b      	ldr	r2, [pc, #44]	@ (800309c <HAL_UART_MspInit+0x1b4>)
 800306e:	675a      	str	r2, [r3, #116]	@ 0x74
 8003070:	4a0a      	ldr	r2, [pc, #40]	@ (800309c <HAL_UART_MspInit+0x1b4>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	2026      	movs	r0, #38	@ 0x26
 800307c:	f001 f975 	bl	800436a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003080:	2026      	movs	r0, #38	@ 0x26
 8003082:	f001 f98e 	bl	80043a2 <HAL_NVIC_EnableIRQ>
}
 8003086:	bf00      	nop
 8003088:	3790      	adds	r7, #144	@ 0x90
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40013800 	.word	0x40013800
 8003094:	40021000 	.word	0x40021000
 8003098:	40004400 	.word	0x40004400
 800309c:	20001680 	.word	0x20001680
 80030a0:	4002006c 	.word	0x4002006c

080030a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <NMI_Handler+0x4>

080030ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b0:	bf00      	nop
 80030b2:	e7fd      	b.n	80030b0 <HardFault_Handler+0x4>

080030b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <MemManage_Handler+0x4>

080030bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <BusFault_Handler+0x4>

080030c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <UsageFault_Handler+0x4>

080030cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030fa:	f000 f967 	bl	80033cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003108:	4802      	ldr	r0, [pc, #8]	@ (8003114 <DMA1_Channel6_IRQHandler+0x10>)
 800310a:	f001 fafc 	bl	8004706 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20001680 	.word	0x20001680

08003118 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OC2_Pin);
 800311c:	2020      	movs	r0, #32
 800311e:	f001 ffff 	bl	8005120 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PPS_Pin);
 8003122:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003126:	f001 fffb 	bl	8005120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003134:	4802      	ldr	r0, [pc, #8]	@ (8003140 <USART1_IRQHandler+0x10>)
 8003136:	f004 fd35 	bl	8007ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20001570 	.word	0x20001570

08003144 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003148:	4802      	ldr	r0, [pc, #8]	@ (8003154 <USART2_IRQHandler+0x10>)
 800314a:	f004 fd2b 	bl	8007ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200015f8 	.word	0x200015f8

08003158 <_getpid>:
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
 800315c:	2301      	movs	r3, #1
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <_kill>:
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
 8003172:	f006 fdc7 	bl	8009d04 <__errno>
 8003176:	4603      	mov	r3, r0
 8003178:	2216      	movs	r2, #22
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <_exit>:
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	f04f 31ff 	mov.w	r1, #4294967295
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ffe7 	bl	8003168 <_kill>
 800319a:	bf00      	nop
 800319c:	e7fd      	b.n	800319a <_exit+0x12>

0800319e <_read>:
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	e00a      	b.n	80031c6 <_read+0x28>
 80031b0:	f3af 8000 	nop.w
 80031b4:	4601      	mov	r1, r0
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	60ba      	str	r2, [r7, #8]
 80031bc:	b2ca      	uxtb	r2, r1
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	3301      	adds	r3, #1
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	dbf0      	blt.n	80031b0 <_read+0x12>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <_close>:
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <_fstat>:
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	2300      	movs	r3, #0
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <_isatty>:
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	2301      	movs	r3, #1
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <_lseek>:
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	2300      	movs	r3, #0
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <_sbrk>:
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	4a14      	ldr	r2, [pc, #80]	@ (800329c <_sbrk+0x5c>)
 800324a:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <_sbrk+0x60>)
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	4b13      	ldr	r3, [pc, #76]	@ (80032a4 <_sbrk+0x64>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <_sbrk+0x22>
 800325c:	4b11      	ldr	r3, [pc, #68]	@ (80032a4 <_sbrk+0x64>)
 800325e:	4a12      	ldr	r2, [pc, #72]	@ (80032a8 <_sbrk+0x68>)
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	4b10      	ldr	r3, [pc, #64]	@ (80032a4 <_sbrk+0x64>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	429a      	cmp	r2, r3
 800326e:	d207      	bcs.n	8003280 <_sbrk+0x40>
 8003270:	f006 fd48 	bl	8009d04 <__errno>
 8003274:	4603      	mov	r3, r0
 8003276:	220c      	movs	r2, #12
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f04f 33ff 	mov.w	r3, #4294967295
 800327e:	e009      	b.n	8003294 <_sbrk+0x54>
 8003280:	4b08      	ldr	r3, [pc, #32]	@ (80032a4 <_sbrk+0x64>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b07      	ldr	r3, [pc, #28]	@ (80032a4 <_sbrk+0x64>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	4a05      	ldr	r2, [pc, #20]	@ (80032a4 <_sbrk+0x64>)
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20010000 	.word	0x20010000
 80032a0:	00000400 	.word	0x00000400
 80032a4:	200017c8 	.word	0x200017c8
 80032a8:	20001920 	.word	0x20001920

080032ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032b0:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <SystemInit+0x20>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b6:	4a05      	ldr	r2, [pc, #20]	@ (80032cc <SystemInit+0x20>)
 80032b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <Reset_Handler>:
 80032d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003308 <LoopForever+0x2>
 80032d4:	f7ff ffea 	bl	80032ac <SystemInit>
 80032d8:	480c      	ldr	r0, [pc, #48]	@ (800330c <LoopForever+0x6>)
 80032da:	490d      	ldr	r1, [pc, #52]	@ (8003310 <LoopForever+0xa>)
 80032dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003314 <LoopForever+0xe>)
 80032de:	2300      	movs	r3, #0
 80032e0:	e002      	b.n	80032e8 <LoopCopyDataInit>

080032e2 <CopyDataInit>:
 80032e2:	58d4      	ldr	r4, [r2, r3]
 80032e4:	50c4      	str	r4, [r0, r3]
 80032e6:	3304      	adds	r3, #4

080032e8 <LoopCopyDataInit>:
 80032e8:	18c4      	adds	r4, r0, r3
 80032ea:	428c      	cmp	r4, r1
 80032ec:	d3f9      	bcc.n	80032e2 <CopyDataInit>
 80032ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003318 <LoopForever+0x12>)
 80032f0:	4c0a      	ldr	r4, [pc, #40]	@ (800331c <LoopForever+0x16>)
 80032f2:	2300      	movs	r3, #0
 80032f4:	e001      	b.n	80032fa <LoopFillZerobss>

080032f6 <FillZerobss>:
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	3204      	adds	r2, #4

080032fa <LoopFillZerobss>:
 80032fa:	42a2      	cmp	r2, r4
 80032fc:	d3fb      	bcc.n	80032f6 <FillZerobss>
 80032fe:	f006 fd07 	bl	8009d10 <__libc_init_array>
 8003302:	f7fe fd91 	bl	8001e28 <main>

08003306 <LoopForever>:
 8003306:	e7fe      	b.n	8003306 <LoopForever>
 8003308:	20010000 	.word	0x20010000
 800330c:	20000000 	.word	0x20000000
 8003310:	200001f4 	.word	0x200001f4
 8003314:	0800be20 	.word	0x0800be20
 8003318:	200001f4 	.word	0x200001f4
 800331c:	2000191c 	.word	0x2000191c

08003320 <ADC1_IRQHandler>:
 8003320:	e7fe      	b.n	8003320 <ADC1_IRQHandler>

08003322 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800332c:	2003      	movs	r0, #3
 800332e:	f001 f811 	bl	8004354 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003332:	200f      	movs	r0, #15
 8003334:	f000 f80e 	bl	8003354 <HAL_InitTick>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	71fb      	strb	r3, [r7, #7]
 8003342:	e001      	b.n	8003348 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003344:	f7ff fb2e 	bl	80029a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003348:	79fb      	ldrb	r3, [r7, #7]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003360:	4b17      	ldr	r3, [pc, #92]	@ (80033c0 <HAL_InitTick+0x6c>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d023      	beq.n	80033b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003368:	4b16      	ldr	r3, [pc, #88]	@ (80033c4 <HAL_InitTick+0x70>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b14      	ldr	r3, [pc, #80]	@ (80033c0 <HAL_InitTick+0x6c>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	4619      	mov	r1, r3
 8003372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003376:	fbb3 f3f1 	udiv	r3, r3, r1
 800337a:	fbb2 f3f3 	udiv	r3, r2, r3
 800337e:	4618      	mov	r0, r3
 8003380:	f001 f81d 	bl	80043be <HAL_SYSTICK_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b0f      	cmp	r3, #15
 800338e:	d809      	bhi.n	80033a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003390:	2200      	movs	r2, #0
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	f000 ffe7 	bl	800436a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800339c:	4a0a      	ldr	r2, [pc, #40]	@ (80033c8 <HAL_InitTick+0x74>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e007      	b.n	80033b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	e004      	b.n	80033b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
 80033ae:	e001      	b.n	80033b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000008 	.word	0x20000008
 80033c4:	20000000 	.word	0x20000000
 80033c8:	20000004 	.word	0x20000004

080033cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033d0:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <HAL_IncTick+0x20>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <HAL_IncTick+0x24>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4413      	add	r3, r2
 80033dc:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <HAL_IncTick+0x24>)
 80033de:	6013      	str	r3, [r2, #0]
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000008 	.word	0x20000008
 80033f0:	200017cc 	.word	0x200017cc

080033f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return uwTick;
 80033f8:	4b03      	ldr	r3, [pc, #12]	@ (8003408 <HAL_GetTick+0x14>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	200017cc 	.word	0x200017cc

0800340c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003414:	f7ff ffee 	bl	80033f4 <HAL_GetTick>
 8003418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d005      	beq.n	8003432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003426:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <HAL_Delay+0x44>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003432:	bf00      	nop
 8003434:	f7ff ffde 	bl	80033f4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	d8f7      	bhi.n	8003434 <HAL_Delay+0x28>
  {
  }
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000008 	.word	0x20000008

08003454 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	609a      	str	r2, [r3, #8]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	609a      	str	r2, [r3, #8]
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3360      	adds	r3, #96	@ 0x60
 80034ce:	461a      	mov	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <LL_ADC_SetOffset+0x44>)
 80034de:	4013      	ands	r3, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	03fff000 	.word	0x03fff000

08003504 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3360      	adds	r3, #96	@ 0x60
 8003512:	461a      	mov	r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3360      	adds	r3, #96	@ 0x60
 8003540:	461a      	mov	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	431a      	orrs	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003566:	b480      	push	{r7}
 8003568:	b087      	sub	sp, #28
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3330      	adds	r3, #48	@ 0x30
 8003576:	461a      	mov	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	4413      	add	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	211f      	movs	r1, #31
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	401a      	ands	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	f003 011f 	and.w	r1, r3, #31
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	431a      	orrs	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035be:	b480      	push	{r7}
 80035c0:	b087      	sub	sp, #28
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3314      	adds	r3, #20
 80035ce:	461a      	mov	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	0e5b      	lsrs	r3, r3, #25
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	4413      	add	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	0d1b      	lsrs	r3, r3, #20
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2107      	movs	r1, #7
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	401a      	ands	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	0d1b      	lsrs	r3, r3, #20
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	431a      	orrs	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f003 0318 	and.w	r3, r3, #24
 8003636:	4908      	ldr	r1, [pc, #32]	@ (8003658 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003638:	40d9      	lsrs	r1, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	400b      	ands	r3, r1
 800363e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003642:	431a      	orrs	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	0007ffff 	.word	0x0007ffff

0800365c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800366c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6093      	str	r3, [r2, #8]
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003694:	d101      	bne.n	800369a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80036b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036e4:	d101      	bne.n	80036ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <LL_ADC_IsEnabled+0x18>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <LL_ADC_IsEnabled+0x1a>
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b04      	cmp	r3, #4
 8003730:	d101      	bne.n	8003736 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b08      	cmp	r3, #8
 8003756:	d101      	bne.n	800375c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e126      	b.n	80039d4 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff f929 	bl	80029ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff67 	bl	8003680 <LL_ADC_IsDeepPowerDownEnabled>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff4d 	bl	800365c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff ff82 	bl	80036d0 <LL_ADC_IsInternalRegulatorEnabled>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d115      	bne.n	80037fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ff66 	bl	80036a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037dc:	4b7f      	ldr	r3, [pc, #508]	@ (80039dc <HAL_ADC_Init+0x270>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	4a7f      	ldr	r2, [pc, #508]	@ (80039e0 <HAL_ADC_Init+0x274>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	3301      	adds	r3, #1
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037f0:	e002      	b.n	80037f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f9      	bne.n	80037f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ff64 	bl	80036d0 <LL_ADC_IsInternalRegulatorEnabled>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003812:	f043 0210 	orr.w	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381e:	f043 0201 	orr.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff ff75 	bl	800371e <LL_ADC_REG_IsConversionOngoing>
 8003834:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b00      	cmp	r3, #0
 8003840:	f040 80bf 	bne.w	80039c2 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f040 80bb 	bne.w	80039c2 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003850:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003854:	f043 0202 	orr.w	r2, r3, #2
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff49 	bl	80036f8 <LL_ADC_IsEnabled>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800386c:	485d      	ldr	r0, [pc, #372]	@ (80039e4 <HAL_ADC_Init+0x278>)
 800386e:	f7ff ff43 	bl	80036f8 <LL_ADC_IsEnabled>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4619      	mov	r1, r3
 800387e:	485a      	ldr	r0, [pc, #360]	@ (80039e8 <HAL_ADC_Init+0x27c>)
 8003880:	f7ff fde8 	bl	8003454 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	7e5b      	ldrb	r3, [r3, #25]
 8003888:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800388e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003894:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800389a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d106      	bne.n	80038c0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	3b01      	subs	r3, #1
 80038b8:	045b      	lsls	r3, r3, #17
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d009      	beq.n	80038dc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038cc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	4b42      	ldr	r3, [pc, #264]	@ (80039ec <HAL_ADC_Init+0x280>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	69b9      	ldr	r1, [r7, #24]
 80038ec:	430b      	orrs	r3, r1
 80038ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff25 	bl	8003744 <LL_ADC_INJ_IsConversionOngoing>
 80038fa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d13d      	bne.n	800397e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d13a      	bne.n	800397e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800390c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003914:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003924:	f023 0302 	bic.w	r3, r3, #2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	69b9      	ldr	r1, [r7, #24]
 800392e:	430b      	orrs	r3, r1
 8003930:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003938:	2b01      	cmp	r3, #1
 800393a:	d118      	bne.n	800396e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003946:	f023 0304 	bic.w	r3, r3, #4
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003952:	4311      	orrs	r1, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003958:	4311      	orrs	r1, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800395e:	430a      	orrs	r2, r1
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	611a      	str	r2, [r3, #16]
 800396c:	e007      	b.n	800397e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d10c      	bne.n	80039a0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	f023 010f 	bic.w	r1, r3, #15
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	1e5a      	subs	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	631a      	str	r2, [r3, #48]	@ 0x30
 800399e:	e007      	b.n	80039b0 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 020f 	bic.w	r2, r2, #15
 80039ae:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b4:	f023 0303 	bic.w	r3, r3, #3
 80039b8:	f043 0201 	orr.w	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	@ 0x54
 80039c0:	e007      	b.n	80039d2 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c6:	f043 0210 	orr.w	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80039d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000000 	.word	0x20000000
 80039e0:	053e2d63 	.word	0x053e2d63
 80039e4:	50040000 	.word	0x50040000
 80039e8:	50040300 	.word	0x50040300
 80039ec:	fff0c007 	.word	0xfff0c007

080039f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b0b6      	sub	sp, #216	@ 0xd8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x22>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e3bb      	b.n	800418a <HAL_ADC_ConfigChannel+0x79a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fe7d 	bl	800371e <LL_ADC_REG_IsConversionOngoing>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f040 83a0 	bne.w	800416c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d824      	bhi.n	8003a86 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	3b02      	subs	r3, #2
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d81b      	bhi.n	8003a7e <HAL_ADC_ConfigChannel+0x8e>
 8003a46:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <HAL_ADC_ConfigChannel+0x5c>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a65 	.word	0x08003a65
 8003a54:	08003a6d 	.word	0x08003a6d
 8003a58:	08003a75 	.word	0x08003a75
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003a62:	e010      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003a64:	2312      	movs	r3, #18
 8003a66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003a6a:	e00c      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003a6c:	2318      	movs	r3, #24
 8003a6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003a72:	e008      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003a7c:	e003      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003a7e:	2306      	movs	r3, #6
 8003a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003a84:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003a94:	f7ff fd67 	bl	8003566 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fe3e 	bl	800371e <LL_ADC_REG_IsConversionOngoing>
 8003aa2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fe4a 	bl	8003744 <LL_ADC_INJ_IsConversionOngoing>
 8003ab0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ab4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f040 81a4 	bne.w	8003e06 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f040 819f 	bne.w	8003e06 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f7ff fd72 	bl	80035be <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	08db      	lsrs	r3, r3, #3
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d00a      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6919      	ldr	r1, [r3, #16]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b0c:	f7ff fcd6 	bl	80034bc <LL_ADC_SetOffset>
 8003b10:	e179      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fcf3 	bl	8003504 <LL_ADC_GetOffsetChannel>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x14e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fce8 	bl	8003504 <LL_ADC_GetOffsetChannel>
 8003b34:	4603      	mov	r3, r0
 8003b36:	0e9b      	lsrs	r3, r3, #26
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	e01e      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x18c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fcdd 	bl	8003504 <LL_ADC_GetOffsetChannel>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b54:	fa93 f3a3 	rbit	r3, r3
 8003b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003b6c:	2320      	movs	r3, #32
 8003b6e:	e004      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003b70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x1a4>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0e9b      	lsrs	r3, r3, #26
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	e018      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x1d6>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	e004      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003bbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d106      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fcac 	bl	8003530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fc90 	bl	8003504 <LL_ADC_GetOffsetChannel>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x214>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fc85 	bl	8003504 <LL_ADC_GetOffsetChannel>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	0e9b      	lsrs	r3, r3, #26
 8003bfe:	f003 021f 	and.w	r2, r3, #31
 8003c02:	e01e      	b.n	8003c42 <HAL_ADC_ConfigChannel+0x252>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fc7a 	bl	8003504 <LL_ADC_GetOffsetChannel>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003c22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003c2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003c32:	2320      	movs	r3, #32
 8003c34:	e004      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003c36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d105      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x26a>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	0e9b      	lsrs	r3, r3, #26
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	e018      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x29c>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c66:	fa93 f3a3 	rbit	r3, r3
 8003c6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003c6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003c76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003c7e:	2320      	movs	r3, #32
 8003c80:	e004      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003c82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d106      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2200      	movs	r2, #0
 8003c96:	2101      	movs	r1, #1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fc49 	bl	8003530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fc2d 	bl	8003504 <LL_ADC_GetOffsetChannel>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x2da>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2102      	movs	r1, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fc22 	bl	8003504 <LL_ADC_GetOffsetChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	0e9b      	lsrs	r3, r3, #26
 8003cc4:	f003 021f 	and.w	r2, r3, #31
 8003cc8:	e01e      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x318>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2102      	movs	r1, #2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fc17 	bl	8003504 <LL_ADC_GetOffsetChannel>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003cf8:	2320      	movs	r3, #32
 8003cfa:	e004      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x330>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	0e9b      	lsrs	r3, r3, #26
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	e014      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x35a>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003d2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003d3c:	2320      	movs	r3, #32
 8003d3e:	e004      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003d40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d106      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2200      	movs	r2, #0
 8003d54:	2102      	movs	r1, #2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fbea 	bl	8003530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2103      	movs	r1, #3
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff fbce 	bl	8003504 <LL_ADC_GetOffsetChannel>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x398>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2103      	movs	r1, #3
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fbc3 	bl	8003504 <LL_ADC_GetOffsetChannel>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	0e9b      	lsrs	r3, r3, #26
 8003d82:	f003 021f 	and.w	r2, r3, #31
 8003d86:	e017      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x3c8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2103      	movs	r1, #3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fbb8 	bl	8003504 <LL_ADC_GetOffsetChannel>
 8003d94:	4603      	mov	r3, r0
 8003d96:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003da0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003da2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003da4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003daa:	2320      	movs	r3, #32
 8003dac:	e003      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003dae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003db0:	fab3 f383 	clz	r3, r3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x3e0>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	0e9b      	lsrs	r3, r3, #26
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	e011      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x404>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003de0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003de2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003de8:	2320      	movs	r3, #32
 8003dea:	e003      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003dec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dee:	fab3 f383 	clz	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d106      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2103      	movs	r1, #3
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fb95 	bl	8003530 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fc74 	bl	80036f8 <LL_ADC_IsEnabled>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 8140 	bne.w	8004098 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	461a      	mov	r2, r3
 8003e26:	f7ff fbf5 	bl	8003614 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	4a8f      	ldr	r2, [pc, #572]	@ (800406c <HAL_ADC_ConfigChannel+0x67c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	f040 8131 	bne.w	8004098 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10b      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x46e>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	0e9b      	lsrs	r3, r3, #26
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2b09      	cmp	r3, #9
 8003e54:	bf94      	ite	ls
 8003e56:	2301      	movls	r3, #1
 8003e58:	2300      	movhi	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	e019      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x4a2>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003e70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003e76:	2320      	movs	r3, #32
 8003e78:	e003      	b.n	8003e82 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003e7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e7c:	fab3 f383 	clz	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	3301      	adds	r3, #1
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	2b09      	cmp	r3, #9
 8003e8a:	bf94      	ite	ls
 8003e8c:	2301      	movls	r3, #1
 8003e8e:	2300      	movhi	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d079      	beq.n	8003f8a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d107      	bne.n	8003eb2 <HAL_ADC_ConfigChannel+0x4c2>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	0e9b      	lsrs	r3, r3, #26
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	069b      	lsls	r3, r3, #26
 8003eac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003eb0:	e015      	b.n	8003ede <HAL_ADC_ConfigChannel+0x4ee>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eba:	fa93 f3a3 	rbit	r3, r3
 8003ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003ec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ec2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003eca:	2320      	movs	r3, #32
 8003ecc:	e003      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	069b      	lsls	r3, r3, #26
 8003eda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x50e>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	0e9b      	lsrs	r3, r3, #26
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	e017      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x53e>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f0e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003f16:	2320      	movs	r3, #32
 8003f18:	e003      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f1c:	fab3 f383 	clz	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	2101      	movs	r1, #1
 8003f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2e:	ea42 0103 	orr.w	r1, r2, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x564>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	0e9b      	lsrs	r3, r3, #26
 8003f44:	3301      	adds	r3, #1
 8003f46:	f003 021f 	and.w	r2, r3, #31
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	051b      	lsls	r3, r3, #20
 8003f52:	e018      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x596>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f5c:	fa93 f3a3 	rbit	r3, r3
 8003f60:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003f6c:	2320      	movs	r3, #32
 8003f6e:	e003      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f72:	fab3 f383 	clz	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f003 021f 	and.w	r2, r3, #31
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f86:	430b      	orrs	r3, r1
 8003f88:	e081      	b.n	800408e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d107      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x5b6>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	0e9b      	lsrs	r3, r3, #26
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	069b      	lsls	r3, r3, #26
 8003fa0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fa4:	e015      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0x5e2>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	fa93 f3a3 	rbit	r3, r3
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003fbe:	2320      	movs	r3, #32
 8003fc0:	e003      	b.n	8003fca <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc4:	fab3 f383 	clz	r3, r3
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	069b      	lsls	r3, r3, #26
 8003fce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x602>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	0e9b      	lsrs	r3, r3, #26
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f003 031f 	and.w	r3, r3, #31
 8003fea:	2101      	movs	r1, #1
 8003fec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff0:	e017      	b.n	8004022 <HAL_ADC_ConfigChannel+0x632>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	61bb      	str	r3, [r7, #24]
  return result;
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800400a:	2320      	movs	r3, #32
 800400c:	e003      	b.n	8004016 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	fab3 f383 	clz	r3, r3
 8004014:	b2db      	uxtb	r3, r3
 8004016:	3301      	adds	r3, #1
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	2101      	movs	r1, #1
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	ea42 0103 	orr.w	r1, r2, r3
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <HAL_ADC_ConfigChannel+0x65e>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	0e9b      	lsrs	r3, r3, #26
 8004038:	3301      	adds	r3, #1
 800403a:	f003 021f 	and.w	r2, r3, #31
 800403e:	4613      	mov	r3, r2
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4413      	add	r3, r2
 8004044:	3b1e      	subs	r3, #30
 8004046:	051b      	lsls	r3, r3, #20
 8004048:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800404c:	e01e      	b.n	800408c <HAL_ADC_ConfigChannel+0x69c>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	fa93 f3a3 	rbit	r3, r3
 800405a:	60fb      	str	r3, [r7, #12]
  return result;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d104      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004066:	2320      	movs	r3, #32
 8004068:	e006      	b.n	8004078 <HAL_ADC_ConfigChannel+0x688>
 800406a:	bf00      	nop
 800406c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	3301      	adds	r3, #1
 800407a:	f003 021f 	and.w	r2, r3, #31
 800407e:	4613      	mov	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4413      	add	r3, r2
 8004084:	3b1e      	subs	r3, #30
 8004086:	051b      	lsls	r3, r3, #20
 8004088:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800408c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004092:	4619      	mov	r1, r3
 8004094:	f7ff fa93 	bl	80035be <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b3d      	ldr	r3, [pc, #244]	@ (8004194 <HAL_ADC_ConfigChannel+0x7a4>)
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d06c      	beq.n	800417e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040a4:	483c      	ldr	r0, [pc, #240]	@ (8004198 <HAL_ADC_ConfigChannel+0x7a8>)
 80040a6:	f7ff f9fb 	bl	80034a0 <LL_ADC_GetCommonPathInternalCh>
 80040aa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a3a      	ldr	r2, [pc, #232]	@ (800419c <HAL_ADC_ConfigChannel+0x7ac>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d127      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d121      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a35      	ldr	r2, [pc, #212]	@ (80041a0 <HAL_ADC_ConfigChannel+0x7b0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d157      	bne.n	800417e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040d6:	4619      	mov	r1, r3
 80040d8:	482f      	ldr	r0, [pc, #188]	@ (8004198 <HAL_ADC_ConfigChannel+0x7a8>)
 80040da:	f7ff f9ce 	bl	800347a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040de:	4b31      	ldr	r3, [pc, #196]	@ (80041a4 <HAL_ADC_ConfigChannel+0x7b4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	4a30      	ldr	r2, [pc, #192]	@ (80041a8 <HAL_ADC_ConfigChannel+0x7b8>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	099b      	lsrs	r3, r3, #6
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	4613      	mov	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80040f8:	e002      	b.n	8004100 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f9      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004106:	e03a      	b.n	800417e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a27      	ldr	r2, [pc, #156]	@ (80041ac <HAL_ADC_ConfigChannel+0x7bc>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d113      	bne.n	800413a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004112:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004116:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10d      	bne.n	800413a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1f      	ldr	r2, [pc, #124]	@ (80041a0 <HAL_ADC_ConfigChannel+0x7b0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d12a      	bne.n	800417e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004128:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800412c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004130:	4619      	mov	r1, r3
 8004132:	4819      	ldr	r0, [pc, #100]	@ (8004198 <HAL_ADC_ConfigChannel+0x7a8>)
 8004134:	f7ff f9a1 	bl	800347a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004138:	e021      	b.n	800417e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d11c      	bne.n	800417e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004144:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004148:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d116      	bne.n	800417e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a12      	ldr	r2, [pc, #72]	@ (80041a0 <HAL_ADC_ConfigChannel+0x7b0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d111      	bne.n	800417e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800415a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800415e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004162:	4619      	mov	r1, r3
 8004164:	480c      	ldr	r0, [pc, #48]	@ (8004198 <HAL_ADC_ConfigChannel+0x7a8>)
 8004166:	f7ff f988 	bl	800347a <LL_ADC_SetCommonPathInternalCh>
 800416a:	e008      	b.n	800417e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004170:	f043 0220 	orr.w	r2, r3, #32
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004186:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800418a:	4618      	mov	r0, r3
 800418c:	37d8      	adds	r7, #216	@ 0xd8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	80080000 	.word	0x80080000
 8004198:	50040300 	.word	0x50040300
 800419c:	c7520000 	.word	0xc7520000
 80041a0:	50040000 	.word	0x50040000
 80041a4:	20000000 	.word	0x20000000
 80041a8:	053e2d63 	.word	0x053e2d63
 80041ac:	cb840000 	.word	0xcb840000
 80041b0:	80000001 	.word	0x80000001

080041b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c4:	4b0c      	ldr	r3, [pc, #48]	@ (80041f8 <__NVIC_SetPriorityGrouping+0x44>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041d0:	4013      	ands	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041e6:	4a04      	ldr	r2, [pc, #16]	@ (80041f8 <__NVIC_SetPriorityGrouping+0x44>)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	60d3      	str	r3, [r2, #12]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	e000ed00 	.word	0xe000ed00

080041fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004200:	4b04      	ldr	r3, [pc, #16]	@ (8004214 <__NVIC_GetPriorityGrouping+0x18>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	f003 0307 	and.w	r3, r3, #7
}
 800420a:	4618      	mov	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004226:	2b00      	cmp	r3, #0
 8004228:	db0b      	blt.n	8004242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	f003 021f 	and.w	r2, r3, #31
 8004230:	4907      	ldr	r1, [pc, #28]	@ (8004250 <__NVIC_EnableIRQ+0x38>)
 8004232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2001      	movs	r0, #1
 800423a:	fa00 f202 	lsl.w	r2, r0, r2
 800423e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000e100 	.word	0xe000e100

08004254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	6039      	str	r1, [r7, #0]
 800425e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004264:	2b00      	cmp	r3, #0
 8004266:	db0a      	blt.n	800427e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	b2da      	uxtb	r2, r3
 800426c:	490c      	ldr	r1, [pc, #48]	@ (80042a0 <__NVIC_SetPriority+0x4c>)
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	0112      	lsls	r2, r2, #4
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	440b      	add	r3, r1
 8004278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800427c:	e00a      	b.n	8004294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	4908      	ldr	r1, [pc, #32]	@ (80042a4 <__NVIC_SetPriority+0x50>)
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	3b04      	subs	r3, #4
 800428c:	0112      	lsls	r2, r2, #4
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	440b      	add	r3, r1
 8004292:	761a      	strb	r2, [r3, #24]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000e100 	.word	0xe000e100
 80042a4:	e000ed00 	.word	0xe000ed00

080042a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b089      	sub	sp, #36	@ 0x24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f1c3 0307 	rsb	r3, r3, #7
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	bf28      	it	cs
 80042c6:	2304      	movcs	r3, #4
 80042c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d902      	bls.n	80042d8 <NVIC_EncodePriority+0x30>
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	3b03      	subs	r3, #3
 80042d6:	e000      	b.n	80042da <NVIC_EncodePriority+0x32>
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042dc:	f04f 32ff 	mov.w	r2, #4294967295
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43da      	mvns	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	401a      	ands	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042f0:	f04f 31ff 	mov.w	r1, #4294967295
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	43d9      	mvns	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004300:	4313      	orrs	r3, r2
         );
}
 8004302:	4618      	mov	r0, r3
 8004304:	3724      	adds	r7, #36	@ 0x24
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004320:	d301      	bcc.n	8004326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004322:	2301      	movs	r3, #1
 8004324:	e00f      	b.n	8004346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004326:	4a0a      	ldr	r2, [pc, #40]	@ (8004350 <SysTick_Config+0x40>)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3b01      	subs	r3, #1
 800432c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800432e:	210f      	movs	r1, #15
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	f7ff ff8e 	bl	8004254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <SysTick_Config+0x40>)
 800433a:	2200      	movs	r2, #0
 800433c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800433e:	4b04      	ldr	r3, [pc, #16]	@ (8004350 <SysTick_Config+0x40>)
 8004340:	2207      	movs	r2, #7
 8004342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	e000e010 	.word	0xe000e010

08004354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff29 	bl	80041b4 <__NVIC_SetPriorityGrouping>
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af00      	add	r7, sp, #0
 8004370:	4603      	mov	r3, r0
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800437c:	f7ff ff3e 	bl	80041fc <__NVIC_GetPriorityGrouping>
 8004380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	6978      	ldr	r0, [r7, #20]
 8004388:	f7ff ff8e 	bl	80042a8 <NVIC_EncodePriority>
 800438c:	4602      	mov	r2, r0
 800438e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff5d 	bl	8004254 <__NVIC_SetPriority>
}
 800439a:	bf00      	nop
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	4603      	mov	r3, r0
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff ff31 	bl	8004218 <__NVIC_EnableIRQ>
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ffa2 	bl	8004310 <SysTick_Config>
 80043cc:	4603      	mov	r3, r0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e098      	b.n	800451c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004528 <HAL_DMA_Init+0x150>)
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d80f      	bhi.n	8004416 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	4b4b      	ldr	r3, [pc, #300]	@ (800452c <HAL_DMA_Init+0x154>)
 80043fe:	4413      	add	r3, r2
 8004400:	4a4b      	ldr	r2, [pc, #300]	@ (8004530 <HAL_DMA_Init+0x158>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	009a      	lsls	r2, r3, #2
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a48      	ldr	r2, [pc, #288]	@ (8004534 <HAL_DMA_Init+0x15c>)
 8004412:	641a      	str	r2, [r3, #64]	@ 0x40
 8004414:	e00e      	b.n	8004434 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	4b46      	ldr	r3, [pc, #280]	@ (8004538 <HAL_DMA_Init+0x160>)
 800441e:	4413      	add	r3, r2
 8004420:	4a43      	ldr	r2, [pc, #268]	@ (8004530 <HAL_DMA_Init+0x158>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	009a      	lsls	r2, r3, #2
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a42      	ldr	r2, [pc, #264]	@ (800453c <HAL_DMA_Init+0x164>)
 8004432:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800444a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800444e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800448e:	d039      	beq.n	8004504 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	4a27      	ldr	r2, [pc, #156]	@ (8004534 <HAL_DMA_Init+0x15c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d11a      	bne.n	80044d0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800449a:	4b29      	ldr	r3, [pc, #164]	@ (8004540 <HAL_DMA_Init+0x168>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a2:	f003 031c 	and.w	r3, r3, #28
 80044a6:	210f      	movs	r1, #15
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	4924      	ldr	r1, [pc, #144]	@ (8004540 <HAL_DMA_Init+0x168>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044b4:	4b22      	ldr	r3, [pc, #136]	@ (8004540 <HAL_DMA_Init+0x168>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c0:	f003 031c 	and.w	r3, r3, #28
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	491d      	ldr	r1, [pc, #116]	@ (8004540 <HAL_DMA_Init+0x168>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
 80044ce:	e019      	b.n	8004504 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004544 <HAL_DMA_Init+0x16c>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d8:	f003 031c 	and.w	r3, r3, #28
 80044dc:	210f      	movs	r1, #15
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	4917      	ldr	r1, [pc, #92]	@ (8004544 <HAL_DMA_Init+0x16c>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044ea:	4b16      	ldr	r3, [pc, #88]	@ (8004544 <HAL_DMA_Init+0x16c>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f6:	f003 031c 	and.w	r3, r3, #28
 80044fa:	fa01 f303 	lsl.w	r3, r1, r3
 80044fe:	4911      	ldr	r1, [pc, #68]	@ (8004544 <HAL_DMA_Init+0x16c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40020407 	.word	0x40020407
 800452c:	bffdfff8 	.word	0xbffdfff8
 8004530:	cccccccd 	.word	0xcccccccd
 8004534:	40020000 	.word	0x40020000
 8004538:	bffdfbf8 	.word	0xbffdfbf8
 800453c:	40020400 	.word	0x40020400
 8004540:	400200a8 	.word	0x400200a8
 8004544:	400204a8 	.word	0x400204a8

08004548 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_DMA_Start_IT+0x20>
 8004564:	2302      	movs	r3, #2
 8004566:	e04b      	b.n	8004600 <HAL_DMA_Start_IT+0xb8>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d13a      	bne.n	80045f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f95f 	bl	8004864 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d008      	beq.n	80045c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 020e 	orr.w	r2, r2, #14
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e00f      	b.n	80045e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0204 	bic.w	r2, r2, #4
 80045ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 020a 	orr.w	r2, r2, #10
 80045de:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e005      	b.n	80045fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
 80045fc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d008      	beq.n	8004632 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2204      	movs	r2, #4
 8004624:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e022      	b.n	8004678 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 020e 	bic.w	r2, r2, #14
 8004640:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0201 	bic.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	f003 021c 	and.w	r2, r3, #28
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	2101      	movs	r1, #1
 8004660:	fa01 f202 	lsl.w	r2, r1, r2
 8004664:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d005      	beq.n	80046a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2204      	movs	r2, #4
 80046a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
 80046a6:	e029      	b.n	80046fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 020e 	bic.w	r2, r2, #14
 80046b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046cc:	f003 021c 	and.w	r2, r3, #28
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	2101      	movs	r1, #1
 80046d6:	fa01 f202 	lsl.w	r2, r1, r2
 80046da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
    }
  }
  return status;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004722:	f003 031c 	and.w	r3, r3, #28
 8004726:	2204      	movs	r2, #4
 8004728:	409a      	lsls	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4013      	ands	r3, r2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d026      	beq.n	8004780 <HAL_DMA_IRQHandler+0x7a>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d021      	beq.n	8004780 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d107      	bne.n	800475a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0204 	bic.w	r2, r2, #4
 8004758:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	f003 021c 	and.w	r2, r3, #28
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	2104      	movs	r1, #4
 8004768:	fa01 f202 	lsl.w	r2, r1, r2
 800476c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004772:	2b00      	cmp	r3, #0
 8004774:	d071      	beq.n	800485a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800477e:	e06c      	b.n	800485a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	f003 031c 	and.w	r3, r3, #28
 8004788:	2202      	movs	r2, #2
 800478a:	409a      	lsls	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d02e      	beq.n	80047f2 <HAL_DMA_IRQHandler+0xec>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d029      	beq.n	80047f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 020a 	bic.w	r2, r2, #10
 80047ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c8:	f003 021c 	and.w	r2, r3, #28
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d0:	2102      	movs	r1, #2
 80047d2:	fa01 f202 	lsl.w	r2, r1, r2
 80047d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d038      	beq.n	800485a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80047f0:	e033      	b.n	800485a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f6:	f003 031c 	and.w	r3, r3, #28
 80047fa:	2208      	movs	r2, #8
 80047fc:	409a      	lsls	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4013      	ands	r3, r2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d02a      	beq.n	800485c <HAL_DMA_IRQHandler+0x156>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d025      	beq.n	800485c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 020e 	bic.w	r2, r2, #14
 800481e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004824:	f003 021c 	and.w	r2, r3, #28
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f202 	lsl.w	r2, r1, r2
 8004832:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484e:	2b00      	cmp	r3, #0
 8004850:	d004      	beq.n	800485c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800485a:	bf00      	nop
 800485c:	bf00      	nop
}
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	f003 021c 	and.w	r2, r3, #28
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	2101      	movs	r1, #1
 8004880:	fa01 f202 	lsl.w	r2, r1, r2
 8004884:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b10      	cmp	r3, #16
 8004894:	d108      	bne.n	80048a8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048a6:	e007      	b.n	80048b8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80048d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004994 <HAL_FLASH_Program+0xd0>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_FLASH_Program+0x1e>
 80048de:	2302      	movs	r3, #2
 80048e0:	e053      	b.n	800498a <HAL_FLASH_Program+0xc6>
 80048e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004994 <HAL_FLASH_Program+0xd0>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80048ec:	f000 f894 	bl	8004a18 <FLASH_WaitForLastOperation>
 80048f0:	4603      	mov	r3, r0
 80048f2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d143      	bne.n	8004982 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048fa:	4b26      	ldr	r3, [pc, #152]	@ (8004994 <HAL_FLASH_Program+0xd0>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004900:	4b25      	ldr	r3, [pc, #148]	@ (8004998 <HAL_FLASH_Program+0xd4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004908:	2b00      	cmp	r3, #0
 800490a:	d009      	beq.n	8004920 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800490c:	4b22      	ldr	r3, [pc, #136]	@ (8004998 <HAL_FLASH_Program+0xd4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a21      	ldr	r2, [pc, #132]	@ (8004998 <HAL_FLASH_Program+0xd4>)
 8004912:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004916:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004918:	4b1e      	ldr	r3, [pc, #120]	@ (8004994 <HAL_FLASH_Program+0xd0>)
 800491a:	2202      	movs	r2, #2
 800491c:	771a      	strb	r2, [r3, #28]
 800491e:	e002      	b.n	8004926 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004920:	4b1c      	ldr	r3, [pc, #112]	@ (8004994 <HAL_FLASH_Program+0xd0>)
 8004922:	2200      	movs	r2, #0
 8004924:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d107      	bne.n	800493c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800492c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004930:	68b8      	ldr	r0, [r7, #8]
 8004932:	f000 f8c7 	bl	8004ac4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8004936:	2301      	movs	r3, #1
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	e010      	b.n	800495e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d002      	beq.n	8004948 <HAL_FLASH_Program+0x84>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d10a      	bne.n	800495e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	4619      	mov	r1, r3
 800494c:	68b8      	ldr	r0, [r7, #8]
 800494e:	f000 f8df 	bl	8004b10 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b02      	cmp	r3, #2
 8004956:	d102      	bne.n	800495e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8004958:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800495c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800495e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004962:	f000 f859 	bl	8004a18 <FLASH_WaitForLastOperation>
 8004966:	4603      	mov	r3, r0
 8004968:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d006      	beq.n	800497e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004970:	4b09      	ldr	r3, [pc, #36]	@ (8004998 <HAL_FLASH_Program+0xd4>)
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	43db      	mvns	r3, r3
 8004978:	4907      	ldr	r1, [pc, #28]	@ (8004998 <HAL_FLASH_Program+0xd4>)
 800497a:	4013      	ands	r3, r2
 800497c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800497e:	f000 f9d9 	bl	8004d34 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004982:	4b04      	ldr	r3, [pc, #16]	@ (8004994 <HAL_FLASH_Program+0xd0>)
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]

  return status;
 8004988:	7dfb      	ldrb	r3, [r7, #23]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	2000000c 	.word	0x2000000c
 8004998:	40022000 	.word	0x40022000

0800499c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80049a6:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <HAL_FLASH_Unlock+0x38>)
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	da0b      	bge.n	80049c6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80049ae:	4b09      	ldr	r3, [pc, #36]	@ (80049d4 <HAL_FLASH_Unlock+0x38>)
 80049b0:	4a09      	ldr	r2, [pc, #36]	@ (80049d8 <HAL_FLASH_Unlock+0x3c>)
 80049b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80049b4:	4b07      	ldr	r3, [pc, #28]	@ (80049d4 <HAL_FLASH_Unlock+0x38>)
 80049b6:	4a09      	ldr	r2, [pc, #36]	@ (80049dc <HAL_FLASH_Unlock+0x40>)
 80049b8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80049ba:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <HAL_FLASH_Unlock+0x38>)
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	da01      	bge.n	80049c6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80049c6:	79fb      	ldrb	r3, [r7, #7]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	40022000 	.word	0x40022000
 80049d8:	45670123 	.word	0x45670123
 80049dc:	cdef89ab 	.word	0xcdef89ab

080049e0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80049e4:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <HAL_FLASH_Lock+0x1c>)
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	4a04      	ldr	r2, [pc, #16]	@ (80049fc <HAL_FLASH_Lock+0x1c>)
 80049ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049ee:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	40022000 	.word	0x40022000

08004a00 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004a04:	4b03      	ldr	r3, [pc, #12]	@ (8004a14 <HAL_FLASH_GetError+0x14>)
 8004a06:	685b      	ldr	r3, [r3, #4]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	2000000c 	.word	0x2000000c

08004a18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8004a20:	f7fe fce8 	bl	80033f4 <HAL_GetTick>
 8004a24:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004a26:	e00d      	b.n	8004a44 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d009      	beq.n	8004a44 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8004a30:	f7fe fce0 	bl	80033f4 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d801      	bhi.n	8004a44 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e035      	b.n	8004ab0 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004a44:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab8 <FLASH_WaitForLastOperation+0xa0>)
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1eb      	bne.n	8004a28 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004a50:	4b19      	ldr	r3, [pc, #100]	@ (8004ab8 <FLASH_WaitForLastOperation+0xa0>)
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	4b19      	ldr	r3, [pc, #100]	@ (8004abc <FLASH_WaitForLastOperation+0xa4>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01d      	beq.n	8004a9c <FLASH_WaitForLastOperation+0x84>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004a60:	4b17      	ldr	r3, [pc, #92]	@ (8004ac0 <FLASH_WaitForLastOperation+0xa8>)
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	4a15      	ldr	r2, [pc, #84]	@ (8004ac0 <FLASH_WaitForLastOperation+0xa8>)
 8004a6a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a72:	d307      	bcc.n	8004a84 <FLASH_WaitForLastOperation+0x6c>
 8004a74:	4b10      	ldr	r3, [pc, #64]	@ (8004ab8 <FLASH_WaitForLastOperation+0xa0>)
 8004a76:	699a      	ldr	r2, [r3, #24]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004a7e:	490e      	ldr	r1, [pc, #56]	@ (8004ab8 <FLASH_WaitForLastOperation+0xa0>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	618b      	str	r3, [r1, #24]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d004      	beq.n	8004a98 <FLASH_WaitForLastOperation+0x80>
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab8 <FLASH_WaitForLastOperation+0xa0>)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004a96:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e009      	b.n	8004ab0 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004a9c:	4b06      	ldr	r3, [pc, #24]	@ (8004ab8 <FLASH_WaitForLastOperation+0xa0>)
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <FLASH_WaitForLastOperation+0x96>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004aa8:	4b03      	ldr	r3, [pc, #12]	@ (8004ab8 <FLASH_WaitForLastOperation+0xa0>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40022000 	.word	0x40022000
 8004abc:	0002c3fa 	.word	0x0002c3fa
 8004ac0:	2000000c 	.word	0x2000000c

08004ac4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8004b0c <FLASH_Program_DoubleWord+0x48>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8004b0c <FLASH_Program_DoubleWord+0x48>)
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004ae2:	f3bf 8f6f 	isb	sy
}
 8004ae6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8004ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	000a      	movs	r2, r1
 8004af6:	2300      	movs	r3, #0
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	3104      	adds	r1, #4
 8004afc:	4613      	mov	r3, r2
 8004afe:	600b      	str	r3, [r1, #0]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40022000 	.word	0x40022000

08004b10 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b089      	sub	sp, #36	@ 0x24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004b1a:	2340      	movs	r3, #64	@ 0x40
 8004b1c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004b26:	4b14      	ldr	r3, [pc, #80]	@ (8004b78 <FLASH_Program_Fast+0x68>)
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	4a13      	ldr	r2, [pc, #76]	@ (8004b78 <FLASH_Program_Fast+0x68>)
 8004b2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b30:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b32:	f3ef 8310 	mrs	r3, PRIMASK
 8004b36:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b38:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8004b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b3c:	b672      	cpsid	i
}
 8004b3e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	3304      	adds	r3, #4
 8004b52:	617b      	str	r3, [r7, #20]
    row_index--;
 8004b54:	7ffb      	ldrb	r3, [r7, #31]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8004b5a:	7ffb      	ldrb	r3, [r7, #31]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1ef      	bne.n	8004b40 <FLASH_Program_Fast+0x30>
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f383 8810 	msr	PRIMASK, r3
}
 8004b6a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8004b6c:	bf00      	nop
 8004b6e:	3724      	adds	r7, #36	@ 0x24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40022000 	.word	0x40022000

08004b7c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004b86:	4b48      	ldr	r3, [pc, #288]	@ (8004ca8 <HAL_FLASHEx_Erase+0x12c>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_FLASHEx_Erase+0x16>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e085      	b.n	8004c9e <HAL_FLASHEx_Erase+0x122>
 8004b92:	4b45      	ldr	r3, [pc, #276]	@ (8004ca8 <HAL_FLASHEx_Erase+0x12c>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b98:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b9c:	f7ff ff3c 	bl	8004a18 <FLASH_WaitForLastOperation>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d175      	bne.n	8004c96 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004baa:	4b3f      	ldr	r3, [pc, #252]	@ (8004ca8 <HAL_FLASHEx_Erase+0x12c>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8004cac <HAL_FLASHEx_Erase+0x130>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d013      	beq.n	8004be4 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004cac <HAL_FLASHEx_Erase+0x130>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d009      	beq.n	8004bdc <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004bc8:	4b38      	ldr	r3, [pc, #224]	@ (8004cac <HAL_FLASHEx_Erase+0x130>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a37      	ldr	r2, [pc, #220]	@ (8004cac <HAL_FLASHEx_Erase+0x130>)
 8004bce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bd2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004bd4:	4b34      	ldr	r3, [pc, #208]	@ (8004ca8 <HAL_FLASHEx_Erase+0x12c>)
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	771a      	strb	r2, [r3, #28]
 8004bda:	e016      	b.n	8004c0a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004bdc:	4b32      	ldr	r3, [pc, #200]	@ (8004ca8 <HAL_FLASHEx_Erase+0x12c>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	771a      	strb	r2, [r3, #28]
 8004be2:	e012      	b.n	8004c0a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004be4:	4b31      	ldr	r3, [pc, #196]	@ (8004cac <HAL_FLASHEx_Erase+0x130>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d009      	beq.n	8004c04 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8004cac <HAL_FLASHEx_Erase+0x130>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8004cac <HAL_FLASHEx_Erase+0x130>)
 8004bf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bfa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca8 <HAL_FLASHEx_Erase+0x12c>)
 8004bfe:	2202      	movs	r2, #2
 8004c00:	771a      	strb	r2, [r3, #28]
 8004c02:	e002      	b.n	8004c0a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004c04:	4b28      	ldr	r3, [pc, #160]	@ (8004ca8 <HAL_FLASHEx_Erase+0x12c>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d111      	bne.n	8004c36 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f84a 	bl	8004cb0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c20:	f7ff fefa 	bl	8004a18 <FLASH_WaitForLastOperation>
 8004c24:	4603      	mov	r3, r0
 8004c26:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8004c28:	4b20      	ldr	r3, [pc, #128]	@ (8004cac <HAL_FLASHEx_Erase+0x130>)
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8004cac <HAL_FLASHEx_Erase+0x130>)
 8004c2e:	f023 0304 	bic.w	r3, r3, #4
 8004c32:	6153      	str	r3, [r2, #20]
 8004c34:	e02d      	b.n	8004c92 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	e01d      	b.n	8004c82 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	68b8      	ldr	r0, [r7, #8]
 8004c4e:	f000 f84d 	bl	8004cec <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c52:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c56:	f7ff fedf 	bl	8004a18 <FLASH_WaitForLastOperation>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004c5e:	4b13      	ldr	r3, [pc, #76]	@ (8004cac <HAL_FLASHEx_Erase+0x130>)
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	4a12      	ldr	r2, [pc, #72]	@ (8004cac <HAL_FLASHEx_Erase+0x130>)
 8004c64:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004c68:	f023 0302 	bic.w	r3, r3, #2
 8004c6c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	601a      	str	r2, [r3, #0]
          break;
 8004c7a:	e00a      	b.n	8004c92 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d3d9      	bcc.n	8004c46 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004c92:	f000 f84f 	bl	8004d34 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c96:	4b04      	ldr	r3, [pc, #16]	@ (8004ca8 <HAL_FLASHEx_Erase+0x12c>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]

  return status;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	2000000c 	.word	0x2000000c
 8004cac:	40022000 	.word	0x40022000

08004cb0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d005      	beq.n	8004cce <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8004cc2:	4b09      	ldr	r3, [pc, #36]	@ (8004ce8 <FLASH_MassErase+0x38>)
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	4a08      	ldr	r2, [pc, #32]	@ (8004ce8 <FLASH_MassErase+0x38>)
 8004cc8:	f043 0304 	orr.w	r3, r3, #4
 8004ccc:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004cce:	4b06      	ldr	r3, [pc, #24]	@ (8004ce8 <FLASH_MassErase+0x38>)
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	4a05      	ldr	r2, [pc, #20]	@ (8004ce8 <FLASH_MassErase+0x38>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd8:	6153      	str	r3, [r2, #20]
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40022000 	.word	0x40022000

08004cec <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8004d30 <FLASH_PageErase+0x44>)
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8004d06:	490a      	ldr	r1, [pc, #40]	@ (8004d30 <FLASH_PageErase+0x44>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004d0c:	4b08      	ldr	r3, [pc, #32]	@ (8004d30 <FLASH_PageErase+0x44>)
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	4a07      	ldr	r2, [pc, #28]	@ (8004d30 <FLASH_PageErase+0x44>)
 8004d12:	f043 0302 	orr.w	r3, r3, #2
 8004d16:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004d18:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <FLASH_PageErase+0x44>)
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	4a04      	ldr	r2, [pc, #16]	@ (8004d30 <FLASH_PageErase+0x44>)
 8004d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d22:	6153      	str	r3, [r2, #20]
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	40022000 	.word	0x40022000

08004d34 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004d3a:	4b21      	ldr	r3, [pc, #132]	@ (8004dc0 <FLASH_FlushCaches+0x8c>)
 8004d3c:	7f1b      	ldrb	r3, [r3, #28]
 8004d3e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d002      	beq.n	8004d4c <FLASH_FlushCaches+0x18>
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d117      	bne.n	8004d7c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004d52:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d56:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004d58:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a19      	ldr	r2, [pc, #100]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004d5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	4b17      	ldr	r3, [pc, #92]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a16      	ldr	r2, [pc, #88]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004d6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d6e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d70:	4b14      	ldr	r3, [pc, #80]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a13      	ldr	r2, [pc, #76]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d7a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004d7c:	79fb      	ldrb	r3, [r7, #7]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d002      	beq.n	8004d88 <FLASH_FlushCaches+0x54>
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d111      	bne.n	8004dac <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004d88:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004d8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004d9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d9e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004da0:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a07      	ldr	r2, [pc, #28]	@ (8004dc4 <FLASH_FlushCaches+0x90>)
 8004da6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004daa:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004dac:	4b04      	ldr	r3, [pc, #16]	@ (8004dc0 <FLASH_FlushCaches+0x8c>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	771a      	strb	r2, [r3, #28]
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	2000000c 	.word	0x2000000c
 8004dc4:	40022000 	.word	0x40022000

08004dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dd6:	e154      	b.n	8005082 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	2101      	movs	r1, #1
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	fa01 f303 	lsl.w	r3, r1, r3
 8004de4:	4013      	ands	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 8146 	beq.w	800507c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d005      	beq.n	8004e08 <HAL_GPIO_Init+0x40>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d130      	bne.n	8004e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	2203      	movs	r2, #3
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e3e:	2201      	movs	r2, #1
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	091b      	lsrs	r3, r3, #4
 8004e54:	f003 0201 	and.w	r2, r3, #1
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d017      	beq.n	8004ea6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	2203      	movs	r2, #3
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d123      	bne.n	8004efa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	08da      	lsrs	r2, r3, #3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3208      	adds	r2, #8
 8004eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	220f      	movs	r2, #15
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	08da      	lsrs	r2, r3, #3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3208      	adds	r2, #8
 8004ef4:	6939      	ldr	r1, [r7, #16]
 8004ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	2203      	movs	r2, #3
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f003 0203 	and.w	r2, r3, #3
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 80a0 	beq.w	800507c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f3c:	4b58      	ldr	r3, [pc, #352]	@ (80050a0 <HAL_GPIO_Init+0x2d8>)
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f40:	4a57      	ldr	r2, [pc, #348]	@ (80050a0 <HAL_GPIO_Init+0x2d8>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f48:	4b55      	ldr	r3, [pc, #340]	@ (80050a0 <HAL_GPIO_Init+0x2d8>)
 8004f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f54:	4a53      	ldr	r2, [pc, #332]	@ (80050a4 <HAL_GPIO_Init+0x2dc>)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	089b      	lsrs	r3, r3, #2
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	220f      	movs	r2, #15
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4013      	ands	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004f7e:	d019      	beq.n	8004fb4 <HAL_GPIO_Init+0x1ec>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a49      	ldr	r2, [pc, #292]	@ (80050a8 <HAL_GPIO_Init+0x2e0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d013      	beq.n	8004fb0 <HAL_GPIO_Init+0x1e8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a48      	ldr	r2, [pc, #288]	@ (80050ac <HAL_GPIO_Init+0x2e4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00d      	beq.n	8004fac <HAL_GPIO_Init+0x1e4>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a47      	ldr	r2, [pc, #284]	@ (80050b0 <HAL_GPIO_Init+0x2e8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <HAL_GPIO_Init+0x1e0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a46      	ldr	r2, [pc, #280]	@ (80050b4 <HAL_GPIO_Init+0x2ec>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d101      	bne.n	8004fa4 <HAL_GPIO_Init+0x1dc>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	e008      	b.n	8004fb6 <HAL_GPIO_Init+0x1ee>
 8004fa4:	2307      	movs	r3, #7
 8004fa6:	e006      	b.n	8004fb6 <HAL_GPIO_Init+0x1ee>
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e004      	b.n	8004fb6 <HAL_GPIO_Init+0x1ee>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e002      	b.n	8004fb6 <HAL_GPIO_Init+0x1ee>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_GPIO_Init+0x1ee>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	f002 0203 	and.w	r2, r2, #3
 8004fbc:	0092      	lsls	r2, r2, #2
 8004fbe:	4093      	lsls	r3, r2
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fc6:	4937      	ldr	r1, [pc, #220]	@ (80050a4 <HAL_GPIO_Init+0x2dc>)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	089b      	lsrs	r3, r3, #2
 8004fcc:	3302      	adds	r3, #2
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fd4:	4b38      	ldr	r3, [pc, #224]	@ (80050b8 <HAL_GPIO_Init+0x2f0>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ff8:	4a2f      	ldr	r2, [pc, #188]	@ (80050b8 <HAL_GPIO_Init+0x2f0>)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80050b8 <HAL_GPIO_Init+0x2f0>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	43db      	mvns	r3, r3
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4013      	ands	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005022:	4a25      	ldr	r2, [pc, #148]	@ (80050b8 <HAL_GPIO_Init+0x2f0>)
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005028:	4b23      	ldr	r3, [pc, #140]	@ (80050b8 <HAL_GPIO_Init+0x2f0>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	43db      	mvns	r3, r3
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4013      	ands	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800504c:	4a1a      	ldr	r2, [pc, #104]	@ (80050b8 <HAL_GPIO_Init+0x2f0>)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005052:	4b19      	ldr	r3, [pc, #100]	@ (80050b8 <HAL_GPIO_Init+0x2f0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	43db      	mvns	r3, r3
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005076:	4a10      	ldr	r2, [pc, #64]	@ (80050b8 <HAL_GPIO_Init+0x2f0>)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3301      	adds	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f aea3 	bne.w	8004dd8 <HAL_GPIO_Init+0x10>
  }
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40010000 	.word	0x40010000
 80050a8:	48000400 	.word	0x48000400
 80050ac:	48000800 	.word	0x48000800
 80050b0:	48000c00 	.word	0x48000c00
 80050b4:	48001000 	.word	0x48001000
 80050b8:	40010400 	.word	0x40010400

080050bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	807b      	strh	r3, [r7, #2]
 80050c8:	4613      	mov	r3, r2
 80050ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050cc:	787b      	ldrb	r3, [r7, #1]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050d2:	887a      	ldrh	r2, [r7, #2]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050d8:	e002      	b.n	80050e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050da:	887a      	ldrh	r2, [r7, #2]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050fe:	887a      	ldrh	r2, [r7, #2]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4013      	ands	r3, r2
 8005104:	041a      	lsls	r2, r3, #16
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	43d9      	mvns	r1, r3
 800510a:	887b      	ldrh	r3, [r7, #2]
 800510c:	400b      	ands	r3, r1
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	619a      	str	r2, [r3, #24]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800512a:	4b08      	ldr	r3, [pc, #32]	@ (800514c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800512c:	695a      	ldr	r2, [r3, #20]
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	4013      	ands	r3, r2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d006      	beq.n	8005144 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005136:	4a05      	ldr	r2, [pc, #20]	@ (800514c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800513c:	88fb      	ldrh	r3, [r7, #6]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f806 	bl	8005150 <HAL_GPIO_EXTI_Callback>
  }
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40010400 	.word	0x40010400

08005150 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e08d      	b.n	8005294 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d106      	bne.n	8005192 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7fd fcab 	bl	8002ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2224      	movs	r2, #36	@ 0x24
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0201 	bic.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051dc:	609a      	str	r2, [r3, #8]
 80051de:	e006      	b.n	80051ee <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80051ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d108      	bne.n	8005208 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	e007      	b.n	8005218 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005216:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800522a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800523a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69d9      	ldr	r1, [r3, #28]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1a      	ldr	r2, [r3, #32]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	461a      	mov	r2, r3
 80052a8:	460b      	mov	r3, r1
 80052aa:	817b      	strh	r3, [r7, #10]
 80052ac:	4613      	mov	r3, r2
 80052ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	f040 80fd 	bne.w	80054b8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_I2C_Master_Transmit+0x30>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e0f6      	b.n	80054ba <HAL_I2C_Master_Transmit+0x21e>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052d4:	f7fe f88e 	bl	80033f4 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2319      	movs	r3, #25
 80052e0:	2201      	movs	r2, #1
 80052e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fa0a 	bl	8005700 <I2C_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e0e1      	b.n	80054ba <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2221      	movs	r2, #33	@ 0x21
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2210      	movs	r2, #16
 8005302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	893a      	ldrh	r2, [r7, #8]
 8005316:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005322:	b29b      	uxth	r3, r3
 8005324:	2bff      	cmp	r3, #255	@ 0xff
 8005326:	d906      	bls.n	8005336 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	22ff      	movs	r2, #255	@ 0xff
 800532c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800532e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e007      	b.n	8005346 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005340:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005344:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800534a:	2b00      	cmp	r3, #0
 800534c:	d024      	beq.n	8005398 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005352:	781a      	ldrb	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005382:	b2db      	uxtb	r3, r3
 8005384:	3301      	adds	r3, #1
 8005386:	b2da      	uxtb	r2, r3
 8005388:	8979      	ldrh	r1, [r7, #10]
 800538a:	4b4e      	ldr	r3, [pc, #312]	@ (80054c4 <HAL_I2C_Master_Transmit+0x228>)
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 fc05 	bl	8005ba0 <I2C_TransferConfig>
 8005396:	e066      	b.n	8005466 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539c:	b2da      	uxtb	r2, r3
 800539e:	8979      	ldrh	r1, [r7, #10]
 80053a0:	4b48      	ldr	r3, [pc, #288]	@ (80054c4 <HAL_I2C_Master_Transmit+0x228>)
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fbfa 	bl	8005ba0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80053ac:	e05b      	b.n	8005466 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	6a39      	ldr	r1, [r7, #32]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f9fd 	bl	80057b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e07b      	b.n	80054ba <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	781a      	ldrb	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d034      	beq.n	8005466 <HAL_I2C_Master_Transmit+0x1ca>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005400:	2b00      	cmp	r3, #0
 8005402:	d130      	bne.n	8005466 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2200      	movs	r2, #0
 800540c:	2180      	movs	r1, #128	@ 0x80
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f976 	bl	8005700 <I2C_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e04d      	b.n	80054ba <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005422:	b29b      	uxth	r3, r3
 8005424:	2bff      	cmp	r3, #255	@ 0xff
 8005426:	d90e      	bls.n	8005446 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	22ff      	movs	r2, #255	@ 0xff
 800542c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005432:	b2da      	uxtb	r2, r3
 8005434:	8979      	ldrh	r1, [r7, #10]
 8005436:	2300      	movs	r3, #0
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fbae 	bl	8005ba0 <I2C_TransferConfig>
 8005444:	e00f      	b.n	8005466 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005454:	b2da      	uxtb	r2, r3
 8005456:	8979      	ldrh	r1, [r7, #10]
 8005458:	2300      	movs	r3, #0
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fb9d 	bl	8005ba0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d19e      	bne.n	80053ae <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	6a39      	ldr	r1, [r7, #32]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f9e3 	bl	8005840 <I2C_WaitOnSTOPFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e01a      	b.n	80054ba <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2220      	movs	r2, #32
 800548a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b0c      	ldr	r3, [pc, #48]	@ (80054c8 <HAL_I2C_Master_Transmit+0x22c>)
 8005498:	400b      	ands	r3, r1
 800549a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e000      	b.n	80054ba <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
  }
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	80002000 	.word	0x80002000
 80054c8:	fe00e800 	.word	0xfe00e800

080054cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	461a      	mov	r2, r3
 80054d8:	460b      	mov	r3, r1
 80054da:	817b      	strh	r3, [r7, #10]
 80054dc:	4613      	mov	r3, r2
 80054de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	f040 80db 	bne.w	80056a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_I2C_Master_Receive+0x30>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e0d4      	b.n	80056a6 <HAL_I2C_Master_Receive+0x1da>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005504:	f7fd ff76 	bl	80033f4 <HAL_GetTick>
 8005508:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2319      	movs	r3, #25
 8005510:	2201      	movs	r2, #1
 8005512:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f8f2 	bl	8005700 <I2C_WaitOnFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e0bf      	b.n	80056a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2222      	movs	r2, #34	@ 0x22
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2210      	movs	r2, #16
 8005532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	893a      	ldrh	r2, [r7, #8]
 8005546:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	2bff      	cmp	r3, #255	@ 0xff
 8005556:	d90e      	bls.n	8005576 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005562:	b2da      	uxtb	r2, r3
 8005564:	8979      	ldrh	r1, [r7, #10]
 8005566:	4b52      	ldr	r3, [pc, #328]	@ (80056b0 <HAL_I2C_Master_Receive+0x1e4>)
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 fb16 	bl	8005ba0 <I2C_TransferConfig>
 8005574:	e06d      	b.n	8005652 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005584:	b2da      	uxtb	r2, r3
 8005586:	8979      	ldrh	r1, [r7, #10]
 8005588:	4b49      	ldr	r3, [pc, #292]	@ (80056b0 <HAL_I2C_Master_Receive+0x1e4>)
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 fb05 	bl	8005ba0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005596:	e05c      	b.n	8005652 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	6a39      	ldr	r1, [r7, #32]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f993 	bl	80058c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e07c      	b.n	80056a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d034      	beq.n	8005652 <HAL_I2C_Master_Receive+0x186>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d130      	bne.n	8005652 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	2200      	movs	r2, #0
 80055f8:	2180      	movs	r1, #128	@ 0x80
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f880 	bl	8005700 <I2C_WaitOnFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e04d      	b.n	80056a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560e:	b29b      	uxth	r3, r3
 8005610:	2bff      	cmp	r3, #255	@ 0xff
 8005612:	d90e      	bls.n	8005632 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	22ff      	movs	r2, #255	@ 0xff
 8005618:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800561e:	b2da      	uxtb	r2, r3
 8005620:	8979      	ldrh	r1, [r7, #10]
 8005622:	2300      	movs	r3, #0
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fab8 	bl	8005ba0 <I2C_TransferConfig>
 8005630:	e00f      	b.n	8005652 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005640:	b2da      	uxtb	r2, r3
 8005642:	8979      	ldrh	r1, [r7, #10]
 8005644:	2300      	movs	r3, #0
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 faa7 	bl	8005ba0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d19d      	bne.n	8005598 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	6a39      	ldr	r1, [r7, #32]
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f8ed 	bl	8005840 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e01a      	b.n	80056a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2220      	movs	r2, #32
 8005676:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6859      	ldr	r1, [r3, #4]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <HAL_I2C_Master_Receive+0x1e8>)
 8005684:	400b      	ands	r3, r1
 8005686:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e000      	b.n	80056a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
  }
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	80002400 	.word	0x80002400
 80056b4:	fe00e800 	.word	0xfe00e800

080056b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d103      	bne.n	80056d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2200      	movs	r2, #0
 80056d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d007      	beq.n	80056f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	619a      	str	r2, [r3, #24]
  }
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005710:	e03b      	b.n	800578a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f962 	bl	80059e0 <I2C_IsErrorOccurred>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e041      	b.n	80057aa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572c:	d02d      	beq.n	800578a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572e:	f7fd fe61 	bl	80033f4 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d302      	bcc.n	8005744 <I2C_WaitOnFlagUntilTimeout+0x44>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d122      	bne.n	800578a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	429a      	cmp	r2, r3
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	429a      	cmp	r2, r3
 8005760:	d113      	bne.n	800578a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005766:	f043 0220 	orr.w	r2, r3, #32
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e00f      	b.n	80057aa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4013      	ands	r3, r2
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	bf0c      	ite	eq
 800579a:	2301      	moveq	r3, #1
 800579c:	2300      	movne	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d0b4      	beq.n	8005712 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057be:	e033      	b.n	8005828 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f90b 	bl	80059e0 <I2C_IsErrorOccurred>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e031      	b.n	8005838 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d025      	beq.n	8005828 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057dc:	f7fd fe0a 	bl	80033f4 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d302      	bcc.n	80057f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11a      	bne.n	8005828 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d013      	beq.n	8005828 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005804:	f043 0220 	orr.w	r2, r3, #32
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e007      	b.n	8005838 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b02      	cmp	r3, #2
 8005834:	d1c4      	bne.n	80057c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800584c:	e02f      	b.n	80058ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f8c4 	bl	80059e0 <I2C_IsErrorOccurred>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e02d      	b.n	80058be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005862:	f7fd fdc7 	bl	80033f4 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	429a      	cmp	r2, r3
 8005870:	d302      	bcc.n	8005878 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d11a      	bne.n	80058ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b20      	cmp	r3, #32
 8005884:	d013      	beq.n	80058ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e007      	b.n	80058be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d1c8      	bne.n	800584e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80058d8:	e071      	b.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f87e 	bl	80059e0 <I2C_IsErrorOccurred>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d13b      	bne.n	8005974 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d138      	bne.n	8005974 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b04      	cmp	r3, #4
 800590e:	d105      	bne.n	800591c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	2b10      	cmp	r3, #16
 8005928:	d121      	bne.n	800596e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2210      	movs	r2, #16
 8005930:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2204      	movs	r2, #4
 8005936:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2220      	movs	r2, #32
 800593e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	4b24      	ldr	r3, [pc, #144]	@ (80059dc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800594c:	400b      	ands	r3, r1
 800594e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
 800596c:	e002      	b.n	8005974 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005974:	f7fd fd3e 	bl	80033f4 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	d302      	bcc.n	800598a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d119      	bne.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800598a:	7dfb      	ldrb	r3, [r7, #23]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d116      	bne.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b04      	cmp	r3, #4
 800599c:	d00f      	beq.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a2:	f043 0220 	orr.w	r2, r3, #32
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d002      	beq.n	80059d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d083      	beq.n	80058da <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	fe00e800 	.word	0xfe00e800

080059e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	@ 0x28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d068      	beq.n	8005ade <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2210      	movs	r2, #16
 8005a12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a14:	e049      	b.n	8005aaa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d045      	beq.n	8005aaa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a1e:	f7fd fce9 	bl	80033f4 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d302      	bcc.n	8005a34 <I2C_IsErrorOccurred+0x54>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d13a      	bne.n	8005aaa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a56:	d121      	bne.n	8005a9c <I2C_IsErrorOccurred+0xbc>
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a5e:	d01d      	beq.n	8005a9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d01a      	beq.n	8005a9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a76:	f7fd fcbd 	bl	80033f4 <HAL_GetTick>
 8005a7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a7c:	e00e      	b.n	8005a9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a7e:	f7fd fcb9 	bl	80033f4 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b19      	cmp	r3, #25
 8005a8a:	d907      	bls.n	8005a9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	f043 0320 	orr.w	r3, r3, #32
 8005a92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005a9a:	e006      	b.n	8005aaa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d1e9      	bne.n	8005a7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d003      	beq.n	8005ac0 <I2C_IsErrorOccurred+0xe0>
 8005ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0aa      	beq.n	8005a16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d103      	bne.n	8005ad0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2220      	movs	r2, #32
 8005ace:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	f043 0304 	orr.w	r3, r3, #4
 8005ad6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00b      	beq.n	8005b08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00b      	beq.n	8005b2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	f043 0308 	orr.w	r3, r3, #8
 8005b18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	f043 0302 	orr.w	r3, r3, #2
 8005b3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01c      	beq.n	8005b8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7ff fdaf 	bl	80056b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6859      	ldr	r1, [r3, #4]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	4b0d      	ldr	r3, [pc, #52]	@ (8005b9c <I2C_IsErrorOccurred+0x1bc>)
 8005b66:	400b      	ands	r3, r1
 8005b68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3728      	adds	r7, #40	@ 0x28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	fe00e800 	.word	0xfe00e800

08005ba0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	817b      	strh	r3, [r7, #10]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bb2:	897b      	ldrh	r3, [r7, #10]
 8005bb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005bb8:	7a7b      	ldrb	r3, [r7, #9]
 8005bba:	041b      	lsls	r3, r3, #16
 8005bbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	0d5b      	lsrs	r3, r3, #21
 8005bda:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005bde:	4b08      	ldr	r3, [pc, #32]	@ (8005c00 <I2C_TransferConfig+0x60>)
 8005be0:	430b      	orrs	r3, r1
 8005be2:	43db      	mvns	r3, r3
 8005be4:	ea02 0103 	and.w	r1, r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	03ff63ff 	.word	0x03ff63ff

08005c04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d138      	bne.n	8005c8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e032      	b.n	8005c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2224      	movs	r2, #36	@ 0x24
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6819      	ldr	r1, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e000      	b.n	8005c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c8c:	2302      	movs	r3, #2
  }
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d139      	bne.n	8005d24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e033      	b.n	8005d26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2224      	movs	r2, #36	@ 0x24
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0201 	bic.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005cec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e000      	b.n	8005d26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d24:	2302      	movs	r3, #2
  }
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d38:	4b05      	ldr	r3, [pc, #20]	@ (8005d50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a04      	ldr	r2, [pc, #16]	@ (8005d50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d42:	6013      	str	r3, [r2, #0]
}
 8005d44:	bf00      	nop
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40007000 	.word	0x40007000

08005d54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d58:	4b04      	ldr	r3, [pc, #16]	@ (8005d6c <HAL_PWREx_GetVoltageRange+0x18>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40007000 	.word	0x40007000

08005d70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d7e:	d130      	bne.n	8005de2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d80:	4b23      	ldr	r3, [pc, #140]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d8c:	d038      	beq.n	8005e00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d8e:	4b20      	ldr	r3, [pc, #128]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d96:	4a1e      	ldr	r2, [pc, #120]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005e14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2232      	movs	r2, #50	@ 0x32
 8005da4:	fb02 f303 	mul.w	r3, r2, r3
 8005da8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005daa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dae:	0c9b      	lsrs	r3, r3, #18
 8005db0:	3301      	adds	r3, #1
 8005db2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005db4:	e002      	b.n	8005dbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dbc:	4b14      	ldr	r3, [pc, #80]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dc8:	d102      	bne.n	8005dd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f2      	bne.n	8005db6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ddc:	d110      	bne.n	8005e00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e00f      	b.n	8005e02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005de2:	4b0b      	ldr	r3, [pc, #44]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dee:	d007      	beq.n	8005e00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005df0:	4b07      	ldr	r3, [pc, #28]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005df8:	4a05      	ldr	r2, [pc, #20]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005dfe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40007000 	.word	0x40007000
 8005e14:	20000000 	.word	0x20000000
 8005e18:	431bde83 	.word	0x431bde83

08005e1c <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005e22:	4b45      	ldr	r3, [pc, #276]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a44      	ldr	r2, [pc, #272]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8005e2e:	f7fd fae1 	bl	80033f4 <HAL_GetTick>
 8005e32:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e36:	f7fd fadd 	bl	80033f4 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e073      	b.n	8005f30 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e48:	4b3b      	ldr	r3, [pc, #236]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8005e54:	4b38      	ldr	r3, [pc, #224]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e5c:	4a36      	ldr	r2, [pc, #216]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005e5e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005e62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8005e64:	4b34      	ldr	r3, [pc, #208]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8005e6a:	4b34      	ldr	r3, [pc, #208]	@ (8005f3c <HAL_RCC_DeInit+0x120>)
 8005e6c:	4a34      	ldr	r2, [pc, #208]	@ (8005f40 <HAL_RCC_DeInit+0x124>)
 8005e6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e70:	4b34      	ldr	r3, [pc, #208]	@ (8005f44 <HAL_RCC_DeInit+0x128>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fd fa6d 	bl	8003354 <HAL_InitTick>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e055      	b.n	8005f30 <HAL_RCC_DeInit+0x114>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8005e84:	f7fd fab6 	bl	80033f4 <HAL_GetTick>
 8005e88:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8005e8a:	e00a      	b.n	8005ea2 <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e8c:	f7fd fab2 	bl	80033f4 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e046      	b.n	8005f30 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8005ea2:	4b25      	ldr	r3, [pc, #148]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 030c 	and.w	r3, r3, #12
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1ee      	bne.n	8005e8c <HAL_RCC_DeInit+0x70>

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);

#elif defined(RCC_PLLSAI1_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);
 8005eae:	4b22      	ldr	r3, [pc, #136]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4921      	ldr	r1, [pc, #132]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005eb4:	4b24      	ldr	r3, [pc, #144]	@ (8005f48 <HAL_RCC_DeInit+0x12c>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8005eba:	f7fd fa9b 	bl	80033f4 <HAL_GetTick>
 8005ebe:	6078      	str	r0, [r7, #4]

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)

#elif defined(RCC_PLLSAI1_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec2:	f7fd fa97 	bl	80033f4 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e02d      	b.n	8005f30 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8005ed4:	4b18      	ldr	r3, [pc, #96]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 6320 	and.w	r3, r3, #167772160	@ 0xa000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f0      	bne.n	8005ec2 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8005ee0:	4b15      	ldr	r3, [pc, #84]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8005ee6:	4b14      	ldr	r3, [pc, #80]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	4a13      	ldr	r2, [pc, #76]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005eec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ef0:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8005ef2:	4b11      	ldr	r3, [pc, #68]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	4a0e      	ldr	r2, [pc, #56]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005efe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f02:	6113      	str	r3, [r2, #16]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005f04:	4b0c      	ldr	r3, [pc, #48]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a0b      	ldr	r2, [pc, #44]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8005f10:	4b09      	ldr	r3, [pc, #36]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8005f16:	4b08      	ldr	r3, [pc, #32]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005f18:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1c:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8005f1e:	4b06      	ldr	r3, [pc, #24]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f24:	4a04      	ldr	r2, [pc, #16]	@ (8005f38 <HAL_RCC_DeInit+0x11c>)
 8005f26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	20000000 	.word	0x20000000
 8005f40:	003d0900 	.word	0x003d0900
 8005f44:	20000004 	.word	0x20000004
 8005f48:	fafef4ff 	.word	0xfafef4ff

08005f4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f000 bc02 	b.w	8006764 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f60:	4b96      	ldr	r3, [pc, #600]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f003 030c 	and.w	r3, r3, #12
 8005f68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f6a:	4b94      	ldr	r3, [pc, #592]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80e4 	beq.w	800614a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d007      	beq.n	8005f98 <HAL_RCC_OscConfig+0x4c>
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	2b0c      	cmp	r3, #12
 8005f8c:	f040 808b 	bne.w	80060a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	f040 8087 	bne.w	80060a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f98:	4b88      	ldr	r3, [pc, #544]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x64>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e3d9      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	4b81      	ldr	r3, [pc, #516]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d004      	beq.n	8005fca <HAL_RCC_OscConfig+0x7e>
 8005fc0:	4b7e      	ldr	r3, [pc, #504]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fc8:	e005      	b.n	8005fd6 <HAL_RCC_OscConfig+0x8a>
 8005fca:	4b7c      	ldr	r3, [pc, #496]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8005fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fd0:	091b      	lsrs	r3, r3, #4
 8005fd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d223      	bcs.n	8006022 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fd8c 	bl	8006afc <RCC_SetFlashLatencyFromMSIRange>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e3ba      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fee:	4b73      	ldr	r3, [pc, #460]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a72      	ldr	r2, [pc, #456]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8005ff4:	f043 0308 	orr.w	r3, r3, #8
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	4b70      	ldr	r3, [pc, #448]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	496d      	ldr	r1, [pc, #436]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8006008:	4313      	orrs	r3, r2
 800600a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800600c:	4b6b      	ldr	r3, [pc, #428]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	4968      	ldr	r1, [pc, #416]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 800601c:	4313      	orrs	r3, r2
 800601e:	604b      	str	r3, [r1, #4]
 8006020:	e025      	b.n	800606e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006022:	4b66      	ldr	r3, [pc, #408]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a65      	ldr	r2, [pc, #404]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8006028:	f043 0308 	orr.w	r3, r3, #8
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	4b63      	ldr	r3, [pc, #396]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	4960      	ldr	r1, [pc, #384]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 800603c:	4313      	orrs	r3, r2
 800603e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006040:	4b5e      	ldr	r3, [pc, #376]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	495b      	ldr	r1, [pc, #364]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8006050:	4313      	orrs	r3, r2
 8006052:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fd4c 	bl	8006afc <RCC_SetFlashLatencyFromMSIRange>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e37a      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800606e:	f000 fc81 	bl	8006974 <HAL_RCC_GetSysClockFreq>
 8006072:	4602      	mov	r2, r0
 8006074:	4b51      	ldr	r3, [pc, #324]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	091b      	lsrs	r3, r3, #4
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	4950      	ldr	r1, [pc, #320]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8006080:	5ccb      	ldrb	r3, [r1, r3]
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	fa22 f303 	lsr.w	r3, r2, r3
 800608a:	4a4e      	ldr	r2, [pc, #312]	@ (80061c4 <HAL_RCC_OscConfig+0x278>)
 800608c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800608e:	4b4e      	ldr	r3, [pc, #312]	@ (80061c8 <HAL_RCC_OscConfig+0x27c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f7fd f95e 	bl	8003354 <HAL_InitTick>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d052      	beq.n	8006148 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	e35e      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d032      	beq.n	8006114 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80060ae:	4b43      	ldr	r3, [pc, #268]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a42      	ldr	r2, [pc, #264]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80060ba:	f7fd f99b 	bl	80033f4 <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060c2:	f7fd f997 	bl	80033f4 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e347      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060d4:	4b39      	ldr	r3, [pc, #228]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060e0:	4b36      	ldr	r3, [pc, #216]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a35      	ldr	r2, [pc, #212]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 80060e6:	f043 0308 	orr.w	r3, r3, #8
 80060ea:	6013      	str	r3, [r2, #0]
 80060ec:	4b33      	ldr	r3, [pc, #204]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	4930      	ldr	r1, [pc, #192]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060fe:	4b2f      	ldr	r3, [pc, #188]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	021b      	lsls	r3, r3, #8
 800610c:	492b      	ldr	r1, [pc, #172]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 800610e:	4313      	orrs	r3, r2
 8006110:	604b      	str	r3, [r1, #4]
 8006112:	e01a      	b.n	800614a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006114:	4b29      	ldr	r3, [pc, #164]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a28      	ldr	r2, [pc, #160]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 800611a:	f023 0301 	bic.w	r3, r3, #1
 800611e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006120:	f7fd f968 	bl	80033f4 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006128:	f7fd f964 	bl	80033f4 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e314      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800613a:	4b20      	ldr	r3, [pc, #128]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x1dc>
 8006146:	e000      	b.n	800614a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006148:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d073      	beq.n	800623e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b08      	cmp	r3, #8
 800615a:	d005      	beq.n	8006168 <HAL_RCC_OscConfig+0x21c>
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	2b0c      	cmp	r3, #12
 8006160:	d10e      	bne.n	8006180 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b03      	cmp	r3, #3
 8006166:	d10b      	bne.n	8006180 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006168:	4b14      	ldr	r3, [pc, #80]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d063      	beq.n	800623c <HAL_RCC_OscConfig+0x2f0>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d15f      	bne.n	800623c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e2f1      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006188:	d106      	bne.n	8006198 <HAL_RCC_OscConfig+0x24c>
 800618a:	4b0c      	ldr	r3, [pc, #48]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a0b      	ldr	r2, [pc, #44]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 8006190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	e025      	b.n	80061e4 <HAL_RCC_OscConfig+0x298>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061a0:	d114      	bne.n	80061cc <HAL_RCC_OscConfig+0x280>
 80061a2:	4b06      	ldr	r3, [pc, #24]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a05      	ldr	r2, [pc, #20]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 80061a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	4b03      	ldr	r3, [pc, #12]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a02      	ldr	r2, [pc, #8]	@ (80061bc <HAL_RCC_OscConfig+0x270>)
 80061b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	e013      	b.n	80061e4 <HAL_RCC_OscConfig+0x298>
 80061bc:	40021000 	.word	0x40021000
 80061c0:	0800ba58 	.word	0x0800ba58
 80061c4:	20000000 	.word	0x20000000
 80061c8:	20000004 	.word	0x20000004
 80061cc:	4ba0      	ldr	r3, [pc, #640]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a9f      	ldr	r2, [pc, #636]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80061d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	4b9d      	ldr	r3, [pc, #628]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a9c      	ldr	r2, [pc, #624]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80061de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d013      	beq.n	8006214 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ec:	f7fd f902 	bl	80033f4 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061f4:	f7fd f8fe 	bl	80033f4 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b64      	cmp	r3, #100	@ 0x64
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e2ae      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006206:	4b92      	ldr	r3, [pc, #584]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0x2a8>
 8006212:	e014      	b.n	800623e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006214:	f7fd f8ee 	bl	80033f4 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800621c:	f7fd f8ea 	bl	80033f4 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b64      	cmp	r3, #100	@ 0x64
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e29a      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800622e:	4b88      	ldr	r3, [pc, #544]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0x2d0>
 800623a:	e000      	b.n	800623e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800623c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d060      	beq.n	800630c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d005      	beq.n	800625c <HAL_RCC_OscConfig+0x310>
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b0c      	cmp	r3, #12
 8006254:	d119      	bne.n	800628a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d116      	bne.n	800628a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800625c:	4b7c      	ldr	r3, [pc, #496]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006264:	2b00      	cmp	r3, #0
 8006266:	d005      	beq.n	8006274 <HAL_RCC_OscConfig+0x328>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e277      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006274:	4b76      	ldr	r3, [pc, #472]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	061b      	lsls	r3, r3, #24
 8006282:	4973      	ldr	r1, [pc, #460]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006284:	4313      	orrs	r3, r2
 8006286:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006288:	e040      	b.n	800630c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d023      	beq.n	80062da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006292:	4b6f      	ldr	r3, [pc, #444]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a6e      	ldr	r2, [pc, #440]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800629c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629e:	f7fd f8a9 	bl	80033f4 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062a6:	f7fd f8a5 	bl	80033f4 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e255      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062b8:	4b65      	ldr	r3, [pc, #404]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0f0      	beq.n	80062a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c4:	4b62      	ldr	r3, [pc, #392]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	061b      	lsls	r3, r3, #24
 80062d2:	495f      	ldr	r1, [pc, #380]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	604b      	str	r3, [r1, #4]
 80062d8:	e018      	b.n	800630c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062da:	4b5d      	ldr	r3, [pc, #372]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a5c      	ldr	r2, [pc, #368]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80062e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e6:	f7fd f885 	bl	80033f4 <HAL_GetTick>
 80062ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062ec:	e008      	b.n	8006300 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062ee:	f7fd f881 	bl	80033f4 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d901      	bls.n	8006300 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e231      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006300:	4b53      	ldr	r3, [pc, #332]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1f0      	bne.n	80062ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d03c      	beq.n	8006392 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01c      	beq.n	800635a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006320:	4b4b      	ldr	r3, [pc, #300]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006326:	4a4a      	ldr	r2, [pc, #296]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006328:	f043 0301 	orr.w	r3, r3, #1
 800632c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006330:	f7fd f860 	bl	80033f4 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006338:	f7fd f85c 	bl	80033f4 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e20c      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800634a:	4b41      	ldr	r3, [pc, #260]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 800634c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0ef      	beq.n	8006338 <HAL_RCC_OscConfig+0x3ec>
 8006358:	e01b      	b.n	8006392 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800635a:	4b3d      	ldr	r3, [pc, #244]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 800635c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006360:	4a3b      	ldr	r2, [pc, #236]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636a:	f7fd f843 	bl	80033f4 <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006372:	f7fd f83f 	bl	80033f4 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e1ef      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006384:	4b32      	ldr	r3, [pc, #200]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1ef      	bne.n	8006372 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 80a6 	beq.w	80064ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063a0:	2300      	movs	r3, #0
 80063a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80063a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80063a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10d      	bne.n	80063cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063b0:	4b27      	ldr	r3, [pc, #156]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80063b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b4:	4a26      	ldr	r2, [pc, #152]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80063b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80063bc:	4b24      	ldr	r3, [pc, #144]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 80063be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063c4:	60bb      	str	r3, [r7, #8]
 80063c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063c8:	2301      	movs	r3, #1
 80063ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063cc:	4b21      	ldr	r3, [pc, #132]	@ (8006454 <HAL_RCC_OscConfig+0x508>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d118      	bne.n	800640a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006454 <HAL_RCC_OscConfig+0x508>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006454 <HAL_RCC_OscConfig+0x508>)
 80063de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063e4:	f7fd f806 	bl	80033f4 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ec:	f7fd f802 	bl	80033f4 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e1b2      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063fe:	4b15      	ldr	r3, [pc, #84]	@ (8006454 <HAL_RCC_OscConfig+0x508>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0f0      	beq.n	80063ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d108      	bne.n	8006424 <HAL_RCC_OscConfig+0x4d8>
 8006412:	4b0f      	ldr	r3, [pc, #60]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006418:	4a0d      	ldr	r2, [pc, #52]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006422:	e029      	b.n	8006478 <HAL_RCC_OscConfig+0x52c>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	2b05      	cmp	r3, #5
 800642a:	d115      	bne.n	8006458 <HAL_RCC_OscConfig+0x50c>
 800642c:	4b08      	ldr	r3, [pc, #32]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 800642e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006432:	4a07      	ldr	r2, [pc, #28]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006434:	f043 0304 	orr.w	r3, r3, #4
 8006438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800643c:	4b04      	ldr	r3, [pc, #16]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006442:	4a03      	ldr	r2, [pc, #12]	@ (8006450 <HAL_RCC_OscConfig+0x504>)
 8006444:	f043 0301 	orr.w	r3, r3, #1
 8006448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800644c:	e014      	b.n	8006478 <HAL_RCC_OscConfig+0x52c>
 800644e:	bf00      	nop
 8006450:	40021000 	.word	0x40021000
 8006454:	40007000 	.word	0x40007000
 8006458:	4b9a      	ldr	r3, [pc, #616]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 800645a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645e:	4a99      	ldr	r2, [pc, #612]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 8006460:	f023 0301 	bic.w	r3, r3, #1
 8006464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006468:	4b96      	ldr	r3, [pc, #600]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646e:	4a95      	ldr	r2, [pc, #596]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 8006470:	f023 0304 	bic.w	r3, r3, #4
 8006474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d016      	beq.n	80064ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006480:	f7fc ffb8 	bl	80033f4 <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006486:	e00a      	b.n	800649e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006488:	f7fc ffb4 	bl	80033f4 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006496:	4293      	cmp	r3, r2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e162      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800649e:	4b89      	ldr	r3, [pc, #548]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0ed      	beq.n	8006488 <HAL_RCC_OscConfig+0x53c>
 80064ac:	e015      	b.n	80064da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ae:	f7fc ffa1 	bl	80033f4 <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064b4:	e00a      	b.n	80064cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b6:	f7fc ff9d 	bl	80033f4 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e14b      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064cc:	4b7d      	ldr	r3, [pc, #500]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1ed      	bne.n	80064b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064da:	7ffb      	ldrb	r3, [r7, #31]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d105      	bne.n	80064ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064e0:	4b78      	ldr	r3, [pc, #480]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 80064e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e4:	4a77      	ldr	r2, [pc, #476]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 80064e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d03c      	beq.n	8006572 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01c      	beq.n	800653a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006500:	4b70      	ldr	r3, [pc, #448]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 8006502:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006506:	4a6f      	ldr	r2, [pc, #444]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 8006508:	f043 0301 	orr.w	r3, r3, #1
 800650c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006510:	f7fc ff70 	bl	80033f4 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006518:	f7fc ff6c 	bl	80033f4 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e11c      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800652a:	4b66      	ldr	r3, [pc, #408]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 800652c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0ef      	beq.n	8006518 <HAL_RCC_OscConfig+0x5cc>
 8006538:	e01b      	b.n	8006572 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800653a:	4b62      	ldr	r3, [pc, #392]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 800653c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006540:	4a60      	ldr	r2, [pc, #384]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 8006542:	f023 0301 	bic.w	r3, r3, #1
 8006546:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654a:	f7fc ff53 	bl	80033f4 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006552:	f7fc ff4f 	bl	80033f4 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e0ff      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006564:	4b57      	ldr	r3, [pc, #348]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 8006566:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1ef      	bne.n	8006552 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 80f3 	beq.w	8006762 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006580:	2b02      	cmp	r3, #2
 8006582:	f040 80c9 	bne.w	8006718 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006586:	4b4f      	ldr	r3, [pc, #316]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f003 0203 	and.w	r2, r3, #3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006596:	429a      	cmp	r2, r3
 8006598:	d12c      	bne.n	80065f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a4:	3b01      	subs	r3, #1
 80065a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d123      	bne.n	80065f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d11b      	bne.n	80065f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d113      	bne.n	80065f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	3b01      	subs	r3, #1
 80065da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065dc:	429a      	cmp	r2, r3
 80065de:	d109      	bne.n	80065f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	3b01      	subs	r3, #1
 80065ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d06b      	beq.n	80066cc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2b0c      	cmp	r3, #12
 80065f8:	d062      	beq.n	80066c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80065fa:	4b32      	ldr	r3, [pc, #200]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e0ac      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800660a:	4b2e      	ldr	r3, [pc, #184]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a2d      	ldr	r2, [pc, #180]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 8006610:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006614:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006616:	f7fc feed 	bl	80033f4 <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661e:	f7fc fee9 	bl	80033f4 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e099      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006630:	4b24      	ldr	r3, [pc, #144]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1f0      	bne.n	800661e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800663c:	4b21      	ldr	r3, [pc, #132]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	4b21      	ldr	r3, [pc, #132]	@ (80066c8 <HAL_RCC_OscConfig+0x77c>)
 8006642:	4013      	ands	r3, r2
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800664c:	3a01      	subs	r2, #1
 800664e:	0112      	lsls	r2, r2, #4
 8006650:	4311      	orrs	r1, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006656:	0212      	lsls	r2, r2, #8
 8006658:	4311      	orrs	r1, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800665e:	0852      	lsrs	r2, r2, #1
 8006660:	3a01      	subs	r2, #1
 8006662:	0552      	lsls	r2, r2, #21
 8006664:	4311      	orrs	r1, r2
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800666a:	0852      	lsrs	r2, r2, #1
 800666c:	3a01      	subs	r2, #1
 800666e:	0652      	lsls	r2, r2, #25
 8006670:	4311      	orrs	r1, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006676:	06d2      	lsls	r2, r2, #27
 8006678:	430a      	orrs	r2, r1
 800667a:	4912      	ldr	r1, [pc, #72]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 800667c:	4313      	orrs	r3, r2
 800667e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006680:	4b10      	ldr	r3, [pc, #64]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a0f      	ldr	r2, [pc, #60]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 8006686:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800668a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800668c:	4b0d      	ldr	r3, [pc, #52]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	4a0c      	ldr	r2, [pc, #48]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 8006692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006696:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006698:	f7fc feac 	bl	80033f4 <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066a0:	f7fc fea8 	bl	80033f4 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e058      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066b2:	4b04      	ldr	r3, [pc, #16]	@ (80066c4 <HAL_RCC_OscConfig+0x778>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0f0      	beq.n	80066a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066be:	e050      	b.n	8006762 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e04f      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
 80066c4:	40021000 	.word	0x40021000
 80066c8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066cc:	4b27      	ldr	r3, [pc, #156]	@ (800676c <HAL_RCC_OscConfig+0x820>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d144      	bne.n	8006762 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80066d8:	4b24      	ldr	r3, [pc, #144]	@ (800676c <HAL_RCC_OscConfig+0x820>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a23      	ldr	r2, [pc, #140]	@ (800676c <HAL_RCC_OscConfig+0x820>)
 80066de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066e4:	4b21      	ldr	r3, [pc, #132]	@ (800676c <HAL_RCC_OscConfig+0x820>)
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	4a20      	ldr	r2, [pc, #128]	@ (800676c <HAL_RCC_OscConfig+0x820>)
 80066ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066f0:	f7fc fe80 	bl	80033f4 <HAL_GetTick>
 80066f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066f6:	e008      	b.n	800670a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066f8:	f7fc fe7c 	bl	80033f4 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b02      	cmp	r3, #2
 8006704:	d901      	bls.n	800670a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e02c      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800670a:	4b18      	ldr	r3, [pc, #96]	@ (800676c <HAL_RCC_OscConfig+0x820>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0f0      	beq.n	80066f8 <HAL_RCC_OscConfig+0x7ac>
 8006716:	e024      	b.n	8006762 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	2b0c      	cmp	r3, #12
 800671c:	d01f      	beq.n	800675e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800671e:	4b13      	ldr	r3, [pc, #76]	@ (800676c <HAL_RCC_OscConfig+0x820>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a12      	ldr	r2, [pc, #72]	@ (800676c <HAL_RCC_OscConfig+0x820>)
 8006724:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fc fe63 	bl	80033f4 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006732:	f7fc fe5f 	bl	80033f4 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e00f      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006744:	4b09      	ldr	r3, [pc, #36]	@ (800676c <HAL_RCC_OscConfig+0x820>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f0      	bne.n	8006732 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006750:	4b06      	ldr	r3, [pc, #24]	@ (800676c <HAL_RCC_OscConfig+0x820>)
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	4905      	ldr	r1, [pc, #20]	@ (800676c <HAL_RCC_OscConfig+0x820>)
 8006756:	4b06      	ldr	r3, [pc, #24]	@ (8006770 <HAL_RCC_OscConfig+0x824>)
 8006758:	4013      	ands	r3, r2
 800675a:	60cb      	str	r3, [r1, #12]
 800675c:	e001      	b.n	8006762 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e000      	b.n	8006764 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3720      	adds	r7, #32
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40021000 	.word	0x40021000
 8006770:	feeefffc 	.word	0xfeeefffc

08006774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e0e7      	b.n	8006958 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006788:	4b75      	ldr	r3, [pc, #468]	@ (8006960 <HAL_RCC_ClockConfig+0x1ec>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d910      	bls.n	80067b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006796:	4b72      	ldr	r3, [pc, #456]	@ (8006960 <HAL_RCC_ClockConfig+0x1ec>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f023 0207 	bic.w	r2, r3, #7
 800679e:	4970      	ldr	r1, [pc, #448]	@ (8006960 <HAL_RCC_ClockConfig+0x1ec>)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a6:	4b6e      	ldr	r3, [pc, #440]	@ (8006960 <HAL_RCC_ClockConfig+0x1ec>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d001      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0cf      	b.n	8006958 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d010      	beq.n	80067e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	4b66      	ldr	r3, [pc, #408]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d908      	bls.n	80067e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d4:	4b63      	ldr	r3, [pc, #396]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	4960      	ldr	r1, [pc, #384]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d04c      	beq.n	800688c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d107      	bne.n	800680a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067fa:	4b5a      	ldr	r3, [pc, #360]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d121      	bne.n	800684a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e0a6      	b.n	8006958 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d107      	bne.n	8006822 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006812:	4b54      	ldr	r3, [pc, #336]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d115      	bne.n	800684a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e09a      	b.n	8006958 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d107      	bne.n	800683a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800682a:	4b4e      	ldr	r3, [pc, #312]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e08e      	b.n	8006958 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800683a:	4b4a      	ldr	r3, [pc, #296]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e086      	b.n	8006958 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800684a:	4b46      	ldr	r3, [pc, #280]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f023 0203 	bic.w	r2, r3, #3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4943      	ldr	r1, [pc, #268]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 8006858:	4313      	orrs	r3, r2
 800685a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800685c:	f7fc fdca 	bl	80033f4 <HAL_GetTick>
 8006860:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006862:	e00a      	b.n	800687a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006864:	f7fc fdc6 	bl	80033f4 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006872:	4293      	cmp	r3, r2
 8006874:	d901      	bls.n	800687a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e06e      	b.n	8006958 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687a:	4b3a      	ldr	r3, [pc, #232]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f003 020c 	and.w	r2, r3, #12
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	429a      	cmp	r2, r3
 800688a:	d1eb      	bne.n	8006864 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d010      	beq.n	80068ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	4b31      	ldr	r3, [pc, #196]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d208      	bcs.n	80068ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	492b      	ldr	r1, [pc, #172]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068ba:	4b29      	ldr	r3, [pc, #164]	@ (8006960 <HAL_RCC_ClockConfig+0x1ec>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d210      	bcs.n	80068ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068c8:	4b25      	ldr	r3, [pc, #148]	@ (8006960 <HAL_RCC_ClockConfig+0x1ec>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f023 0207 	bic.w	r2, r3, #7
 80068d0:	4923      	ldr	r1, [pc, #140]	@ (8006960 <HAL_RCC_ClockConfig+0x1ec>)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068d8:	4b21      	ldr	r3, [pc, #132]	@ (8006960 <HAL_RCC_ClockConfig+0x1ec>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0307 	and.w	r3, r3, #7
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d001      	beq.n	80068ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e036      	b.n	8006958 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d008      	beq.n	8006908 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	4918      	ldr	r1, [pc, #96]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 8006904:	4313      	orrs	r3, r2
 8006906:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d009      	beq.n	8006928 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006914:	4b13      	ldr	r3, [pc, #76]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	4910      	ldr	r1, [pc, #64]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 8006924:	4313      	orrs	r3, r2
 8006926:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006928:	f000 f824 	bl	8006974 <HAL_RCC_GetSysClockFreq>
 800692c:	4602      	mov	r2, r0
 800692e:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <HAL_RCC_ClockConfig+0x1f0>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	091b      	lsrs	r3, r3, #4
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	490b      	ldr	r1, [pc, #44]	@ (8006968 <HAL_RCC_ClockConfig+0x1f4>)
 800693a:	5ccb      	ldrb	r3, [r1, r3]
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
 8006944:	4a09      	ldr	r2, [pc, #36]	@ (800696c <HAL_RCC_ClockConfig+0x1f8>)
 8006946:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006948:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <HAL_RCC_ClockConfig+0x1fc>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f7fc fd01 	bl	8003354 <HAL_InitTick>
 8006952:	4603      	mov	r3, r0
 8006954:	72fb      	strb	r3, [r7, #11]

  return status;
 8006956:	7afb      	ldrb	r3, [r7, #11]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40022000 	.word	0x40022000
 8006964:	40021000 	.word	0x40021000
 8006968:	0800ba58 	.word	0x0800ba58
 800696c:	20000000 	.word	0x20000000
 8006970:	20000004 	.word	0x20000004

08006974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006974:	b480      	push	{r7}
 8006976:	b089      	sub	sp, #36	@ 0x24
 8006978:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	2300      	movs	r3, #0
 8006980:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006982:	4b3e      	ldr	r3, [pc, #248]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 030c 	and.w	r3, r3, #12
 800698a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800698c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x108>)
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0303 	and.w	r3, r3, #3
 8006994:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_RCC_GetSysClockFreq+0x34>
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2b0c      	cmp	r3, #12
 80069a0:	d121      	bne.n	80069e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d11e      	bne.n	80069e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80069a8:	4b34      	ldr	r3, [pc, #208]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0308 	and.w	r3, r3, #8
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d107      	bne.n	80069c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80069b4:	4b31      	ldr	r3, [pc, #196]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80069b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069ba:	0a1b      	lsrs	r3, r3, #8
 80069bc:	f003 030f 	and.w	r3, r3, #15
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	e005      	b.n	80069d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80069c4:	4b2d      	ldr	r3, [pc, #180]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	091b      	lsrs	r3, r3, #4
 80069ca:	f003 030f 	and.w	r3, r3, #15
 80069ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80069d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x10c>)
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10d      	bne.n	80069fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069e4:	e00a      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d102      	bne.n	80069f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069ec:	4b25      	ldr	r3, [pc, #148]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x110>)
 80069ee:	61bb      	str	r3, [r7, #24]
 80069f0:	e004      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d101      	bne.n	80069fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80069f8:	4b23      	ldr	r3, [pc, #140]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0x114>)
 80069fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2b0c      	cmp	r3, #12
 8006a00:	d134      	bne.n	8006a6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a02:	4b1e      	ldr	r3, [pc, #120]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d003      	beq.n	8006a1a <HAL_RCC_GetSysClockFreq+0xa6>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d003      	beq.n	8006a20 <HAL_RCC_GetSysClockFreq+0xac>
 8006a18:	e005      	b.n	8006a26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a1c:	617b      	str	r3, [r7, #20]
      break;
 8006a1e:	e005      	b.n	8006a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006a20:	4b19      	ldr	r3, [pc, #100]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0x114>)
 8006a22:	617b      	str	r3, [r7, #20]
      break;
 8006a24:	e002      	b.n	8006a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	617b      	str	r3, [r7, #20]
      break;
 8006a2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a2c:	4b13      	ldr	r3, [pc, #76]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	091b      	lsrs	r3, r3, #4
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	3301      	adds	r3, #1
 8006a38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a3a:	4b10      	ldr	r3, [pc, #64]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	0a1b      	lsrs	r3, r3, #8
 8006a40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	fb03 f202 	mul.w	r2, r3, r2
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a52:	4b0a      	ldr	r3, [pc, #40]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	0e5b      	lsrs	r3, r3, #25
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006a6c:	69bb      	ldr	r3, [r7, #24]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3724      	adds	r7, #36	@ 0x24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	0800ba70 	.word	0x0800ba70
 8006a84:	00f42400 	.word	0x00f42400
 8006a88:	017d7840 	.word	0x017d7840

08006a8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a90:	4b03      	ldr	r3, [pc, #12]	@ (8006aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a92:	681b      	ldr	r3, [r3, #0]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	20000000 	.word	0x20000000

08006aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006aa8:	f7ff fff0 	bl	8006a8c <HAL_RCC_GetHCLKFreq>
 8006aac:	4602      	mov	r2, r0
 8006aae:	4b06      	ldr	r3, [pc, #24]	@ (8006ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	0a1b      	lsrs	r3, r3, #8
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	4904      	ldr	r1, [pc, #16]	@ (8006acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006aba:	5ccb      	ldrb	r3, [r1, r3]
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	0800ba68 	.word	0x0800ba68

08006ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ad4:	f7ff ffda 	bl	8006a8c <HAL_RCC_GetHCLKFreq>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	4b06      	ldr	r3, [pc, #24]	@ (8006af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	0adb      	lsrs	r3, r3, #11
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	4904      	ldr	r1, [pc, #16]	@ (8006af8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ae6:	5ccb      	ldrb	r3, [r1, r3]
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40021000 	.word	0x40021000
 8006af8:	0800ba68 	.word	0x0800ba68

08006afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006b04:	2300      	movs	r3, #0
 8006b06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006b08:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006b14:	f7ff f91e 	bl	8005d54 <HAL_PWREx_GetVoltageRange>
 8006b18:	6178      	str	r0, [r7, #20]
 8006b1a:	e014      	b.n	8006b46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b1c:	4b25      	ldr	r3, [pc, #148]	@ (8006bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b20:	4a24      	ldr	r2, [pc, #144]	@ (8006bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b28:	4b22      	ldr	r3, [pc, #136]	@ (8006bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b34:	f7ff f90e 	bl	8005d54 <HAL_PWREx_GetVoltageRange>
 8006b38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8006bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b4c:	d10b      	bne.n	8006b66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b80      	cmp	r3, #128	@ 0x80
 8006b52:	d919      	bls.n	8006b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2ba0      	cmp	r3, #160	@ 0xa0
 8006b58:	d902      	bls.n	8006b60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	e013      	b.n	8006b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b60:	2301      	movs	r3, #1
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	e010      	b.n	8006b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b80      	cmp	r3, #128	@ 0x80
 8006b6a:	d902      	bls.n	8006b72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	613b      	str	r3, [r7, #16]
 8006b70:	e00a      	b.n	8006b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b80      	cmp	r3, #128	@ 0x80
 8006b76:	d102      	bne.n	8006b7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b78:	2302      	movs	r3, #2
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	e004      	b.n	8006b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b70      	cmp	r3, #112	@ 0x70
 8006b82:	d101      	bne.n	8006b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b84:	2301      	movs	r3, #1
 8006b86:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006b88:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f023 0207 	bic.w	r2, r3, #7
 8006b90:	4909      	ldr	r1, [pc, #36]	@ (8006bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006b98:	4b07      	ldr	r3, [pc, #28]	@ (8006bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d001      	beq.n	8006baa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	40022000 	.word	0x40022000

08006bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006bc8:	2300      	movs	r3, #0
 8006bca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d031      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bdc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006be0:	d01a      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006be2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006be6:	d814      	bhi.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d009      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006bec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bf0:	d10f      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	4a5c      	ldr	r2, [pc, #368]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bfc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006bfe:	e00c      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3304      	adds	r3, #4
 8006c04:	2100      	movs	r1, #0
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fa32 	bl	8007070 <RCCEx_PLLSAI1_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c10:	e003      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	74fb      	strb	r3, [r7, #19]
      break;
 8006c16:	e000      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c1a:	7cfb      	ldrb	r3, [r7, #19]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10b      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c20:	4b51      	ldr	r3, [pc, #324]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2e:	494e      	ldr	r1, [pc, #312]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006c36:	e001      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	7cfb      	ldrb	r3, [r7, #19]
 8006c3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 809e 	beq.w	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c4e:	4b46      	ldr	r3, [pc, #280]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00d      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c64:	4b40      	ldr	r3, [pc, #256]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c68:	4a3f      	ldr	r2, [pc, #252]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c70:	4b3d      	ldr	r3, [pc, #244]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c78:	60bb      	str	r3, [r7, #8]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c80:	4b3a      	ldr	r3, [pc, #232]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a39      	ldr	r2, [pc, #228]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c8c:	f7fc fbb2 	bl	80033f4 <HAL_GetTick>
 8006c90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c92:	e009      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c94:	f7fc fbae 	bl	80033f4 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d902      	bls.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	74fb      	strb	r3, [r7, #19]
        break;
 8006ca6:	e005      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ca8:	4b30      	ldr	r3, [pc, #192]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0ef      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006cb4:	7cfb      	ldrb	r3, [r7, #19]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d15a      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006cba:	4b2b      	ldr	r3, [pc, #172]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01e      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d019      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cd6:	4b24      	ldr	r3, [pc, #144]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ce0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ce2:	4b21      	ldr	r3, [pc, #132]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d02:	4a19      	ldr	r2, [pc, #100]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d016      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d14:	f7fc fb6e 	bl	80033f4 <HAL_GetTick>
 8006d18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d1a:	e00b      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1c:	f7fc fb6a 	bl	80033f4 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d902      	bls.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	74fb      	strb	r3, [r7, #19]
            break;
 8006d32:	e006      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d34:	4b0c      	ldr	r3, [pc, #48]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0ec      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006d42:	7cfb      	ldrb	r3, [r7, #19]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10b      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d48:	4b07      	ldr	r3, [pc, #28]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d56:	4904      	ldr	r1, [pc, #16]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006d5e:	e009      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d60:	7cfb      	ldrb	r3, [r7, #19]
 8006d62:	74bb      	strb	r3, [r7, #18]
 8006d64:	e006      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006d66:	bf00      	nop
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d70:	7cfb      	ldrb	r3, [r7, #19]
 8006d72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d74:	7c7b      	ldrb	r3, [r7, #17]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d105      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d7a:	4b8d      	ldr	r3, [pc, #564]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d7e:	4a8c      	ldr	r2, [pc, #560]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006d80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d92:	4b87      	ldr	r3, [pc, #540]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d98:	f023 0203 	bic.w	r2, r3, #3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	4983      	ldr	r1, [pc, #524]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006db4:	4b7e      	ldr	r3, [pc, #504]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dba:	f023 020c 	bic.w	r2, r3, #12
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc2:	497b      	ldr	r1, [pc, #492]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dd6:	4b76      	ldr	r3, [pc, #472]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ddc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de4:	4972      	ldr	r1, [pc, #456]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00a      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006df8:	4b6d      	ldr	r3, [pc, #436]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e06:	496a      	ldr	r1, [pc, #424]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e1a:	4b65      	ldr	r3, [pc, #404]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e28:	4961      	ldr	r1, [pc, #388]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00a      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4a:	4959      	ldr	r1, [pc, #356]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e5e:	4b54      	ldr	r3, [pc, #336]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e64:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e6c:	4950      	ldr	r1, [pc, #320]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e80:	4b4b      	ldr	r3, [pc, #300]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e86:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e8e:	4948      	ldr	r1, [pc, #288]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ea2:	4b43      	ldr	r3, [pc, #268]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb0:	493f      	ldr	r1, [pc, #252]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d028      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ed2:	4937      	ldr	r1, [pc, #220]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ede:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ee2:	d106      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ee4:	4b32      	ldr	r3, [pc, #200]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	4a31      	ldr	r2, [pc, #196]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eee:	60d3      	str	r3, [r2, #12]
 8006ef0:	e011      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ef6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006efa:	d10c      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3304      	adds	r3, #4
 8006f00:	2101      	movs	r1, #1
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 f8b4 	bl	8007070 <RCCEx_PLLSAI1_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f0c:	7cfb      	ldrb	r3, [r7, #19]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8006f12:	7cfb      	ldrb	r3, [r7, #19]
 8006f14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d028      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f22:	4b23      	ldr	r3, [pc, #140]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f30:	491f      	ldr	r1, [pc, #124]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f40:	d106      	bne.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f42:	4b1b      	ldr	r3, [pc, #108]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f4c:	60d3      	str	r3, [r2, #12]
 8006f4e:	e011      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f58:	d10c      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	2101      	movs	r1, #1
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f885 	bl	8007070 <RCCEx_PLLSAI1_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f6a:	7cfb      	ldrb	r3, [r7, #19]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006f70:	7cfb      	ldrb	r3, [r7, #19]
 8006f72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d02b      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f80:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f8e:	4908      	ldr	r1, [pc, #32]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f9e:	d109      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fa0:	4b03      	ldr	r3, [pc, #12]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	4a02      	ldr	r2, [pc, #8]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006faa:	60d3      	str	r3, [r2, #12]
 8006fac:	e014      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006fae:	bf00      	nop
 8006fb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fbc:	d10c      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 f853 	bl	8007070 <RCCEx_PLLSAI1_Config>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006fce:	7cfb      	ldrb	r3, [r7, #19]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8006fd4:	7cfb      	ldrb	r3, [r7, #19]
 8006fd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d01c      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fe4:	4b19      	ldr	r3, [pc, #100]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff2:	4916      	ldr	r1, [pc, #88]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007002:	d10c      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3304      	adds	r3, #4
 8007008:	2102      	movs	r1, #2
 800700a:	4618      	mov	r0, r3
 800700c:	f000 f830 	bl	8007070 <RCCEx_PLLSAI1_Config>
 8007010:	4603      	mov	r3, r0
 8007012:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007014:	7cfb      	ldrb	r3, [r7, #19]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800701a:	7cfb      	ldrb	r3, [r7, #19]
 800701c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800702a:	4b08      	ldr	r3, [pc, #32]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800702c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007030:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007038:	4904      	ldr	r1, [pc, #16]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800703a:	4313      	orrs	r3, r2
 800703c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007040:	7cbb      	ldrb	r3, [r7, #18]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40021000 	.word	0x40021000

08007050 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007054:	4b05      	ldr	r3, [pc, #20]	@ (800706c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a04      	ldr	r2, [pc, #16]	@ (800706c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800705a:	f043 0304 	orr.w	r3, r3, #4
 800705e:	6013      	str	r3, [r2, #0]
}
 8007060:	bf00      	nop
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40021000 	.word	0x40021000

08007070 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800707e:	4b74      	ldr	r3, [pc, #464]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d018      	beq.n	80070bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800708a:	4b71      	ldr	r3, [pc, #452]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f003 0203 	and.w	r2, r3, #3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d10d      	bne.n	80070b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
       ||
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80070a2:	4b6b      	ldr	r3, [pc, #428]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	091b      	lsrs	r3, r3, #4
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
       ||
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d047      	beq.n	8007146 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	73fb      	strb	r3, [r7, #15]
 80070ba:	e044      	b.n	8007146 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d018      	beq.n	80070f6 <RCCEx_PLLSAI1_Config+0x86>
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d825      	bhi.n	8007114 <RCCEx_PLLSAI1_Config+0xa4>
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d002      	beq.n	80070d2 <RCCEx_PLLSAI1_Config+0x62>
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d009      	beq.n	80070e4 <RCCEx_PLLSAI1_Config+0x74>
 80070d0:	e020      	b.n	8007114 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80070d2:	4b5f      	ldr	r3, [pc, #380]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d11d      	bne.n	800711a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070e2:	e01a      	b.n	800711a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80070e4:	4b5a      	ldr	r3, [pc, #360]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d116      	bne.n	800711e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070f4:	e013      	b.n	800711e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80070f6:	4b56      	ldr	r3, [pc, #344]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10f      	bne.n	8007122 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007102:	4b53      	ldr	r3, [pc, #332]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007112:	e006      	b.n	8007122 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	73fb      	strb	r3, [r7, #15]
      break;
 8007118:	e004      	b.n	8007124 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800711a:	bf00      	nop
 800711c:	e002      	b.n	8007124 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800711e:	bf00      	nop
 8007120:	e000      	b.n	8007124 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007122:	bf00      	nop
    }

    if(status == HAL_OK)
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10d      	bne.n	8007146 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800712a:	4b49      	ldr	r3, [pc, #292]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6819      	ldr	r1, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	3b01      	subs	r3, #1
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	430b      	orrs	r3, r1
 8007140:	4943      	ldr	r1, [pc, #268]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007142:	4313      	orrs	r3, r2
 8007144:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d17c      	bne.n	8007246 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800714c:	4b40      	ldr	r3, [pc, #256]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a3f      	ldr	r2, [pc, #252]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007152:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007158:	f7fc f94c 	bl	80033f4 <HAL_GetTick>
 800715c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800715e:	e009      	b.n	8007174 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007160:	f7fc f948 	bl	80033f4 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d902      	bls.n	8007174 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	73fb      	strb	r3, [r7, #15]
        break;
 8007172:	e005      	b.n	8007180 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007174:	4b36      	ldr	r3, [pc, #216]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1ef      	bne.n	8007160 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d15f      	bne.n	8007246 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d110      	bne.n	80071ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800718c:	4b30      	ldr	r3, [pc, #192]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007194:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6892      	ldr	r2, [r2, #8]
 800719c:	0211      	lsls	r1, r2, #8
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	68d2      	ldr	r2, [r2, #12]
 80071a2:	06d2      	lsls	r2, r2, #27
 80071a4:	430a      	orrs	r2, r1
 80071a6:	492a      	ldr	r1, [pc, #168]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	610b      	str	r3, [r1, #16]
 80071ac:	e027      	b.n	80071fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d112      	bne.n	80071da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071b4:	4b26      	ldr	r3, [pc, #152]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80071bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6892      	ldr	r2, [r2, #8]
 80071c4:	0211      	lsls	r1, r2, #8
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6912      	ldr	r2, [r2, #16]
 80071ca:	0852      	lsrs	r2, r2, #1
 80071cc:	3a01      	subs	r2, #1
 80071ce:	0552      	lsls	r2, r2, #21
 80071d0:	430a      	orrs	r2, r1
 80071d2:	491f      	ldr	r1, [pc, #124]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	610b      	str	r3, [r1, #16]
 80071d8:	e011      	b.n	80071fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071da:	4b1d      	ldr	r3, [pc, #116]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80071e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	6892      	ldr	r2, [r2, #8]
 80071ea:	0211      	lsls	r1, r2, #8
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6952      	ldr	r2, [r2, #20]
 80071f0:	0852      	lsrs	r2, r2, #1
 80071f2:	3a01      	subs	r2, #1
 80071f4:	0652      	lsls	r2, r2, #25
 80071f6:	430a      	orrs	r2, r1
 80071f8:	4915      	ldr	r1, [pc, #84]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80071fe:	4b14      	ldr	r3, [pc, #80]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a13      	ldr	r2, [pc, #76]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007204:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007208:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800720a:	f7fc f8f3 	bl	80033f4 <HAL_GetTick>
 800720e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007210:	e009      	b.n	8007226 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007212:	f7fc f8ef 	bl	80033f4 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d902      	bls.n	8007226 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	73fb      	strb	r3, [r7, #15]
          break;
 8007224:	e005      	b.n	8007232 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007226:	4b0a      	ldr	r3, [pc, #40]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0ef      	beq.n	8007212 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007238:	4b05      	ldr	r3, [pc, #20]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	4903      	ldr	r1, [pc, #12]	@ (8007250 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007242:	4313      	orrs	r3, r2
 8007244:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	40021000 	.word	0x40021000

08007254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e095      	b.n	8007392 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726a:	2b00      	cmp	r3, #0
 800726c:	d108      	bne.n	8007280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007276:	d009      	beq.n	800728c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	61da      	str	r2, [r3, #28]
 800727e:	e005      	b.n	800728c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fb fd26 	bl	8002cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072cc:	d902      	bls.n	80072d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	e002      	b.n	80072da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80072d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80072e2:	d007      	beq.n	80072f4 <HAL_SPI_Init+0xa0>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072ec:	d002      	beq.n	80072f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007304:	431a      	orrs	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	431a      	orrs	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007336:	ea42 0103 	orr.w	r1, r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	0c1b      	lsrs	r3, r3, #16
 8007350:	f003 0204 	and.w	r2, r3, #4
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007358:	f003 0310 	and.w	r3, r3, #16
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007370:	ea42 0103 	orr.w	r1, r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e049      	b.n	8007440 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d106      	bne.n	80073c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7fb fd4d 	bl	8002e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3304      	adds	r3, #4
 80073d6:	4619      	mov	r1, r3
 80073d8:	4610      	mov	r0, r2
 80073da:	f000 f929 	bl	8007630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e049      	b.n	80074ee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d106      	bne.n	8007474 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fb fc84 	bl	8002d7c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3304      	adds	r3, #4
 8007484:	4619      	mov	r1, r3
 8007486:	4610      	mov	r0, r2
 8007488:	f000 f8d2 	bl	8007630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b086      	sub	sp, #24
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007510:	2302      	movs	r3, #2
 8007512:	e088      	b.n	8007626 <HAL_TIM_IC_ConfigChannel+0x130>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d11b      	bne.n	800755a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007532:	f000 f8ed 	bl	8007710 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	699a      	ldr	r2, [r3, #24]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 020c 	bic.w	r2, r2, #12
 8007544:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6999      	ldr	r1, [r3, #24]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	619a      	str	r2, [r3, #24]
 8007558:	e060      	b.n	800761c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b04      	cmp	r3, #4
 800755e:	d11c      	bne.n	800759a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007570:	f000 f924 	bl	80077bc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007582:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6999      	ldr	r1, [r3, #24]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	021a      	lsls	r2, r3, #8
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	619a      	str	r2, [r3, #24]
 8007598:	e040      	b.n	800761c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b08      	cmp	r3, #8
 800759e:	d11b      	bne.n	80075d8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80075b0:	f000 f941 	bl	8007836 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	69da      	ldr	r2, [r3, #28]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 020c 	bic.w	r2, r2, #12
 80075c2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69d9      	ldr	r1, [r3, #28]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	61da      	str	r2, [r3, #28]
 80075d6:	e021      	b.n	800761c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b0c      	cmp	r3, #12
 80075dc:	d11c      	bne.n	8007618 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80075ee:	f000 f95e 	bl	80078ae <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	69da      	ldr	r2, [r3, #28]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007600:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69d9      	ldr	r1, [r3, #28]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	021a      	lsls	r2, r3, #8
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	61da      	str	r2, [r3, #28]
 8007616:	e001      	b.n	800761c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a30      	ldr	r2, [pc, #192]	@ (8007704 <TIM_Base_SetConfig+0xd4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_Base_SetConfig+0x20>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800764e:	d108      	bne.n	8007662 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a27      	ldr	r2, [pc, #156]	@ (8007704 <TIM_Base_SetConfig+0xd4>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00b      	beq.n	8007682 <TIM_Base_SetConfig+0x52>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007670:	d007      	beq.n	8007682 <TIM_Base_SetConfig+0x52>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a24      	ldr	r2, [pc, #144]	@ (8007708 <TIM_Base_SetConfig+0xd8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d003      	beq.n	8007682 <TIM_Base_SetConfig+0x52>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a23      	ldr	r2, [pc, #140]	@ (800770c <TIM_Base_SetConfig+0xdc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d108      	bne.n	8007694 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a12      	ldr	r2, [pc, #72]	@ (8007704 <TIM_Base_SetConfig+0xd4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d007      	beq.n	80076d0 <TIM_Base_SetConfig+0xa0>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a11      	ldr	r2, [pc, #68]	@ (8007708 <TIM_Base_SetConfig+0xd8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d003      	beq.n	80076d0 <TIM_Base_SetConfig+0xa0>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a10      	ldr	r2, [pc, #64]	@ (800770c <TIM_Base_SetConfig+0xdc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d103      	bne.n	80076d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d105      	bne.n	80076f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f023 0201 	bic.w	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	611a      	str	r2, [r3, #16]
  }
}
 80076f6:	bf00      	nop
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40014000 	.word	0x40014000
 800770c:	40014400 	.word	0x40014400

08007710 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	f023 0201 	bic.w	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4a1e      	ldr	r2, [pc, #120]	@ (80077b4 <TIM_TI1_SetConfig+0xa4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d007      	beq.n	800774e <TIM_TI1_SetConfig+0x3e>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007744:	d003      	beq.n	800774e <TIM_TI1_SetConfig+0x3e>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4a1b      	ldr	r2, [pc, #108]	@ (80077b8 <TIM_TI1_SetConfig+0xa8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d101      	bne.n	8007752 <TIM_TI1_SetConfig+0x42>
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <TIM_TI1_SetConfig+0x44>
 8007752:	2300      	movs	r3, #0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d008      	beq.n	800776a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4313      	orrs	r3, r2
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	e003      	b.n	8007772 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	b2db      	uxtb	r3, r3
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f023 030a 	bic.w	r3, r3, #10
 800778c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f003 030a 	and.w	r3, r3, #10
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4313      	orrs	r3, r2
 8007798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	621a      	str	r2, [r3, #32]
}
 80077a6:	bf00      	nop
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40012c00 	.word	0x40012c00
 80077b8:	40014000 	.word	0x40014000

080077bc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	f023 0210 	bic.w	r2, r3, #16
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	031b      	lsls	r3, r3, #12
 8007800:	b29b      	uxth	r3, r3
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	4313      	orrs	r3, r2
 8007806:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800780e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	4313      	orrs	r3, r2
 800781c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	621a      	str	r2, [r3, #32]
}
 800782a:	bf00      	nop
 800782c:	371c      	adds	r7, #28
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007836:	b480      	push	{r7}
 8007838:	b087      	sub	sp, #28
 800783a:	af00      	add	r7, sp, #0
 800783c:	60f8      	str	r0, [r7, #12]
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	607a      	str	r2, [r7, #4]
 8007842:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f023 0303 	bic.w	r3, r3, #3
 8007862:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007872:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	b2db      	uxtb	r3, r3
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007886:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	021b      	lsls	r3, r3, #8
 800788c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	4313      	orrs	r3, r2
 8007894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	621a      	str	r2, [r3, #32]
}
 80078a2:	bf00      	nop
 80078a4:	371c      	adds	r7, #28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b087      	sub	sp, #28
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	021b      	lsls	r3, r3, #8
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	031b      	lsls	r3, r3, #12
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007900:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	031b      	lsls	r3, r3, #12
 8007906:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	621a      	str	r2, [r3, #32]
}
 800791c:	bf00      	nop
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800793c:	2302      	movs	r3, #2
 800793e:	e04f      	b.n	80079e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a21      	ldr	r2, [pc, #132]	@ (80079ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d108      	bne.n	800797c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007970:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a14      	ldr	r2, [pc, #80]	@ (80079ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d009      	beq.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a8:	d004      	beq.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a10      	ldr	r2, [pc, #64]	@ (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d10c      	bne.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	40012c00 	.word	0x40012c00
 80079f0:	40014000 	.word	0x40014000

080079f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e040      	b.n	8007a88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fb fa66 	bl	8002ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2224      	movs	r2, #36	@ 0x24
 8007a20:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0201 	bic.w	r2, r2, #1
 8007a30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fe3a 	bl	80086b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fbdd 	bl	8008200 <UART_SetConfig>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e01b      	b.n	8007a88 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f042 0201 	orr.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 feb9 	bl	80087f8 <UART_CheckIdleState>
 8007a86:	4603      	mov	r3, r0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08a      	sub	sp, #40	@ 0x28
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	d177      	bne.n	8007b98 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <HAL_UART_Transmit+0x24>
 8007aae:	88fb      	ldrh	r3, [r7, #6]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e070      	b.n	8007b9a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2221      	movs	r2, #33	@ 0x21
 8007ac4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ac6:	f7fb fc95 	bl	80033f4 <HAL_GetTick>
 8007aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	88fa      	ldrh	r2, [r7, #6]
 8007ad0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	88fa      	ldrh	r2, [r7, #6]
 8007ad8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ae4:	d108      	bne.n	8007af8 <HAL_UART_Transmit+0x68>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007aee:	2300      	movs	r3, #0
 8007af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	e003      	b.n	8007b00 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007afc:	2300      	movs	r3, #0
 8007afe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b00:	e02f      	b.n	8007b62 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2180      	movs	r1, #128	@ 0x80
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 ff1b 	bl	8008948 <UART_WaitOnFlagUntilTimeout>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d004      	beq.n	8007b22 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e03b      	b.n	8007b9a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10b      	bne.n	8007b40 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	881a      	ldrh	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b34:	b292      	uxth	r2, r2
 8007b36:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	3302      	adds	r3, #2
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	e007      	b.n	8007b50 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1c9      	bne.n	8007b02 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2200      	movs	r2, #0
 8007b76:	2140      	movs	r1, #64	@ 0x40
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 fee5 	bl	8008948 <UART_WaitOnFlagUntilTimeout>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2220      	movs	r2, #32
 8007b88:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e005      	b.n	8007b9a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2220      	movs	r2, #32
 8007b92:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	e000      	b.n	8007b9a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007b98:	2302      	movs	r3, #2
  }
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b0ba      	sub	sp, #232	@ 0xe8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007bca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007bce:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d115      	bne.n	8007c0c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00f      	beq.n	8007c0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d009      	beq.n	8007c0c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 82ca 	beq.w	8008196 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
      }
      return;
 8007c0a:	e2c4      	b.n	8008196 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 8117 	beq.w	8007e44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007c22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007c26:	4b85      	ldr	r3, [pc, #532]	@ (8007e3c <HAL_UART_IRQHandler+0x298>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 810a 	beq.w	8007e44 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d011      	beq.n	8007c60 <HAL_UART_IRQHandler+0xbc>
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00b      	beq.n	8007c60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c56:	f043 0201 	orr.w	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d011      	beq.n	8007c90 <HAL_UART_IRQHandler+0xec>
 8007c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c86:	f043 0204 	orr.w	r2, r3, #4
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d011      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x11c>
 8007c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2204      	movs	r2, #4
 8007cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cb6:	f043 0202 	orr.w	r2, r3, #2
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cc4:	f003 0308 	and.w	r3, r3, #8
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d017      	beq.n	8007cfc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d105      	bne.n	8007ce4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00b      	beq.n	8007cfc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2208      	movs	r2, #8
 8007cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cf2:	f043 0208 	orr.w	r2, r3, #8
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d012      	beq.n	8007d2e <HAL_UART_IRQHandler+0x18a>
 8007d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00c      	beq.n	8007d2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d24:	f043 0220 	orr.w	r2, r3, #32
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 8230 	beq.w	800819a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00d      	beq.n	8007d62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d007      	beq.n	8007d62 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d76:	2b40      	cmp	r3, #64	@ 0x40
 8007d78:	d005      	beq.n	8007d86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d04f      	beq.n	8007e26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 ff12 	bl	8008bb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d96:	2b40      	cmp	r3, #64	@ 0x40
 8007d98:	d141      	bne.n	8007e1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3308      	adds	r3, #8
 8007da0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007db4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007db8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3308      	adds	r3, #8
 8007dc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007dc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007dca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007dd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1d9      	bne.n	8007d9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d013      	beq.n	8007e16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007df2:	4a13      	ldr	r2, [pc, #76]	@ (8007e40 <HAL_UART_IRQHandler+0x29c>)
 8007df4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fc fc42 	bl	8004684 <HAL_DMA_Abort_IT>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d017      	beq.n	8007e36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e14:	e00f      	b.n	8007e36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f9e8 	bl	80081ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e1c:	e00b      	b.n	8007e36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f9e4 	bl	80081ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e24:	e007      	b.n	8007e36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9e0 	bl	80081ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007e34:	e1b1      	b.n	800819a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e36:	bf00      	nop
    return;
 8007e38:	e1af      	b.n	800819a <HAL_UART_IRQHandler+0x5f6>
 8007e3a:	bf00      	nop
 8007e3c:	04000120 	.word	0x04000120
 8007e40:	08008e61 	.word	0x08008e61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	f040 816a 	bne.w	8008122 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e52:	f003 0310 	and.w	r3, r3, #16
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 8163 	beq.w	8008122 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e60:	f003 0310 	and.w	r3, r3, #16
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 815c 	beq.w	8008122 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2210      	movs	r2, #16
 8007e70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7c:	2b40      	cmp	r3, #64	@ 0x40
 8007e7e:	f040 80d4 	bne.w	800802a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 80ad 	beq.w	8007ff2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007e9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	f080 80a5 	bcs.w	8007ff2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007eae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f040 8086 	bne.w	8007fd0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007eee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ef2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007efa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1da      	bne.n	8007ec4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3308      	adds	r3, #8
 8007f14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f18:	e853 3f00 	ldrex	r3, [r3]
 8007f1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f20:	f023 0301 	bic.w	r3, r3, #1
 8007f24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e1      	bne.n	8007f0e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007f5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3308      	adds	r3, #8
 8007f6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007f6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e3      	bne.n	8007f4a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fa0:	f023 0310 	bic.w	r3, r3, #16
 8007fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	461a      	mov	r2, r3
 8007fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007fb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007fba:	e841 2300 	strex	r3, r2, [r1]
 8007fbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007fc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1e4      	bne.n	8007f90 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fc fb1c 	bl	8004608 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7fa fbee 	bl	80027cc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007ff0:	e0d5      	b.n	800819e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ff8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	f040 80ce 	bne.w	800819e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b20      	cmp	r3, #32
 8008010:	f040 80c5 	bne.w	800819e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7fa fbd2 	bl	80027cc <HAL_UARTEx_RxEventCallback>
      return;
 8008028:	e0b9      	b.n	800819e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008036:	b29b      	uxth	r3, r3
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008044:	b29b      	uxth	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 80ab 	beq.w	80081a2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800804c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 80a6 	beq.w	80081a2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805e:	e853 3f00 	ldrex	r3, [r3]
 8008062:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008066:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800806a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008078:	647b      	str	r3, [r7, #68]	@ 0x44
 800807a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800807e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e4      	bne.n	8008056 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3308      	adds	r3, #8
 8008092:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	623b      	str	r3, [r7, #32]
   return(result);
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	f023 0301 	bic.w	r3, r3, #1
 80080a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3308      	adds	r3, #8
 80080ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80080b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80080b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080b8:	e841 2300 	strex	r3, r2, [r1]
 80080bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e3      	bne.n	800808c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f023 0310 	bic.w	r3, r3, #16
 80080ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	461a      	mov	r2, r3
 80080f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80080fa:	61fb      	str	r3, [r7, #28]
 80080fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	69b9      	ldr	r1, [r7, #24]
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	617b      	str	r3, [r7, #20]
   return(result);
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e4      	bne.n	80080d8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7fa fb56 	bl	80027cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008120:	e03f      	b.n	80081a2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00e      	beq.n	800814c <HAL_UART_IRQHandler+0x5a8>
 800812e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d008      	beq.n	800814c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008142:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fecb 	bl	8008ee0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800814a:	e02d      	b.n	80081a8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800814c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00e      	beq.n	8008176 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800815c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008160:	2b00      	cmp	r3, #0
 8008162:	d008      	beq.n	8008176 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01c      	beq.n	80081a6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
    }
    return;
 8008174:	e017      	b.n	80081a6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800817a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800817e:	2b00      	cmp	r3, #0
 8008180:	d012      	beq.n	80081a8 <HAL_UART_IRQHandler+0x604>
 8008182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00c      	beq.n	80081a8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fe7c 	bl	8008e8c <UART_EndTransmit_IT>
    return;
 8008194:	e008      	b.n	80081a8 <HAL_UART_IRQHandler+0x604>
      return;
 8008196:	bf00      	nop
 8008198:	e006      	b.n	80081a8 <HAL_UART_IRQHandler+0x604>
    return;
 800819a:	bf00      	nop
 800819c:	e004      	b.n	80081a8 <HAL_UART_IRQHandler+0x604>
      return;
 800819e:	bf00      	nop
 80081a0:	e002      	b.n	80081a8 <HAL_UART_IRQHandler+0x604>
      return;
 80081a2:	bf00      	nop
 80081a4:	e000      	b.n	80081a8 <HAL_UART_IRQHandler+0x604>
    return;
 80081a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80081a8:	37e8      	adds	r7, #232	@ 0xe8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop

080081b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008204:	b08a      	sub	sp, #40	@ 0x28
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	431a      	orrs	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	431a      	orrs	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	4313      	orrs	r3, r2
 8008226:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	4b9e      	ldr	r3, [pc, #632]	@ (80084a8 <UART_SetConfig+0x2a8>)
 8008230:	4013      	ands	r3, r2
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008238:	430b      	orrs	r3, r1
 800823a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a93      	ldr	r2, [pc, #588]	@ (80084ac <UART_SetConfig+0x2ac>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d004      	beq.n	800826c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008268:	4313      	orrs	r3, r2
 800826a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800827c:	430a      	orrs	r2, r1
 800827e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a8a      	ldr	r2, [pc, #552]	@ (80084b0 <UART_SetConfig+0x2b0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d126      	bne.n	80082d8 <UART_SetConfig+0xd8>
 800828a:	4b8a      	ldr	r3, [pc, #552]	@ (80084b4 <UART_SetConfig+0x2b4>)
 800828c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	2b03      	cmp	r3, #3
 8008296:	d81b      	bhi.n	80082d0 <UART_SetConfig+0xd0>
 8008298:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <UART_SetConfig+0xa0>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	080082b1 	.word	0x080082b1
 80082a4:	080082c1 	.word	0x080082c1
 80082a8:	080082b9 	.word	0x080082b9
 80082ac:	080082c9 	.word	0x080082c9
 80082b0:	2301      	movs	r3, #1
 80082b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082b6:	e0ab      	b.n	8008410 <UART_SetConfig+0x210>
 80082b8:	2302      	movs	r3, #2
 80082ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082be:	e0a7      	b.n	8008410 <UART_SetConfig+0x210>
 80082c0:	2304      	movs	r3, #4
 80082c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082c6:	e0a3      	b.n	8008410 <UART_SetConfig+0x210>
 80082c8:	2308      	movs	r3, #8
 80082ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082ce:	e09f      	b.n	8008410 <UART_SetConfig+0x210>
 80082d0:	2310      	movs	r3, #16
 80082d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082d6:	e09b      	b.n	8008410 <UART_SetConfig+0x210>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a76      	ldr	r2, [pc, #472]	@ (80084b8 <UART_SetConfig+0x2b8>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d138      	bne.n	8008354 <UART_SetConfig+0x154>
 80082e2:	4b74      	ldr	r3, [pc, #464]	@ (80084b4 <UART_SetConfig+0x2b4>)
 80082e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082e8:	f003 030c 	and.w	r3, r3, #12
 80082ec:	2b0c      	cmp	r3, #12
 80082ee:	d82d      	bhi.n	800834c <UART_SetConfig+0x14c>
 80082f0:	a201      	add	r2, pc, #4	@ (adr r2, 80082f8 <UART_SetConfig+0xf8>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	0800832d 	.word	0x0800832d
 80082fc:	0800834d 	.word	0x0800834d
 8008300:	0800834d 	.word	0x0800834d
 8008304:	0800834d 	.word	0x0800834d
 8008308:	0800833d 	.word	0x0800833d
 800830c:	0800834d 	.word	0x0800834d
 8008310:	0800834d 	.word	0x0800834d
 8008314:	0800834d 	.word	0x0800834d
 8008318:	08008335 	.word	0x08008335
 800831c:	0800834d 	.word	0x0800834d
 8008320:	0800834d 	.word	0x0800834d
 8008324:	0800834d 	.word	0x0800834d
 8008328:	08008345 	.word	0x08008345
 800832c:	2300      	movs	r3, #0
 800832e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008332:	e06d      	b.n	8008410 <UART_SetConfig+0x210>
 8008334:	2302      	movs	r3, #2
 8008336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800833a:	e069      	b.n	8008410 <UART_SetConfig+0x210>
 800833c:	2304      	movs	r3, #4
 800833e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008342:	e065      	b.n	8008410 <UART_SetConfig+0x210>
 8008344:	2308      	movs	r3, #8
 8008346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800834a:	e061      	b.n	8008410 <UART_SetConfig+0x210>
 800834c:	2310      	movs	r3, #16
 800834e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008352:	e05d      	b.n	8008410 <UART_SetConfig+0x210>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a58      	ldr	r2, [pc, #352]	@ (80084bc <UART_SetConfig+0x2bc>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d125      	bne.n	80083aa <UART_SetConfig+0x1aa>
 800835e:	4b55      	ldr	r3, [pc, #340]	@ (80084b4 <UART_SetConfig+0x2b4>)
 8008360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008364:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008368:	2b30      	cmp	r3, #48	@ 0x30
 800836a:	d016      	beq.n	800839a <UART_SetConfig+0x19a>
 800836c:	2b30      	cmp	r3, #48	@ 0x30
 800836e:	d818      	bhi.n	80083a2 <UART_SetConfig+0x1a2>
 8008370:	2b20      	cmp	r3, #32
 8008372:	d00a      	beq.n	800838a <UART_SetConfig+0x18a>
 8008374:	2b20      	cmp	r3, #32
 8008376:	d814      	bhi.n	80083a2 <UART_SetConfig+0x1a2>
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <UART_SetConfig+0x182>
 800837c:	2b10      	cmp	r3, #16
 800837e:	d008      	beq.n	8008392 <UART_SetConfig+0x192>
 8008380:	e00f      	b.n	80083a2 <UART_SetConfig+0x1a2>
 8008382:	2300      	movs	r3, #0
 8008384:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008388:	e042      	b.n	8008410 <UART_SetConfig+0x210>
 800838a:	2302      	movs	r3, #2
 800838c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008390:	e03e      	b.n	8008410 <UART_SetConfig+0x210>
 8008392:	2304      	movs	r3, #4
 8008394:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008398:	e03a      	b.n	8008410 <UART_SetConfig+0x210>
 800839a:	2308      	movs	r3, #8
 800839c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083a0:	e036      	b.n	8008410 <UART_SetConfig+0x210>
 80083a2:	2310      	movs	r3, #16
 80083a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083a8:	e032      	b.n	8008410 <UART_SetConfig+0x210>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a3f      	ldr	r2, [pc, #252]	@ (80084ac <UART_SetConfig+0x2ac>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d12a      	bne.n	800840a <UART_SetConfig+0x20a>
 80083b4:	4b3f      	ldr	r3, [pc, #252]	@ (80084b4 <UART_SetConfig+0x2b4>)
 80083b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80083be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083c2:	d01a      	beq.n	80083fa <UART_SetConfig+0x1fa>
 80083c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083c8:	d81b      	bhi.n	8008402 <UART_SetConfig+0x202>
 80083ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083ce:	d00c      	beq.n	80083ea <UART_SetConfig+0x1ea>
 80083d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083d4:	d815      	bhi.n	8008402 <UART_SetConfig+0x202>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <UART_SetConfig+0x1e2>
 80083da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083de:	d008      	beq.n	80083f2 <UART_SetConfig+0x1f2>
 80083e0:	e00f      	b.n	8008402 <UART_SetConfig+0x202>
 80083e2:	2300      	movs	r3, #0
 80083e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083e8:	e012      	b.n	8008410 <UART_SetConfig+0x210>
 80083ea:	2302      	movs	r3, #2
 80083ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083f0:	e00e      	b.n	8008410 <UART_SetConfig+0x210>
 80083f2:	2304      	movs	r3, #4
 80083f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083f8:	e00a      	b.n	8008410 <UART_SetConfig+0x210>
 80083fa:	2308      	movs	r3, #8
 80083fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008400:	e006      	b.n	8008410 <UART_SetConfig+0x210>
 8008402:	2310      	movs	r3, #16
 8008404:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008408:	e002      	b.n	8008410 <UART_SetConfig+0x210>
 800840a:	2310      	movs	r3, #16
 800840c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a25      	ldr	r2, [pc, #148]	@ (80084ac <UART_SetConfig+0x2ac>)
 8008416:	4293      	cmp	r3, r2
 8008418:	f040 808a 	bne.w	8008530 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800841c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008420:	2b08      	cmp	r3, #8
 8008422:	d824      	bhi.n	800846e <UART_SetConfig+0x26e>
 8008424:	a201      	add	r2, pc, #4	@ (adr r2, 800842c <UART_SetConfig+0x22c>)
 8008426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842a:	bf00      	nop
 800842c:	08008451 	.word	0x08008451
 8008430:	0800846f 	.word	0x0800846f
 8008434:	08008459 	.word	0x08008459
 8008438:	0800846f 	.word	0x0800846f
 800843c:	0800845f 	.word	0x0800845f
 8008440:	0800846f 	.word	0x0800846f
 8008444:	0800846f 	.word	0x0800846f
 8008448:	0800846f 	.word	0x0800846f
 800844c:	08008467 	.word	0x08008467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008450:	f7fe fb28 	bl	8006aa4 <HAL_RCC_GetPCLK1Freq>
 8008454:	61f8      	str	r0, [r7, #28]
        break;
 8008456:	e010      	b.n	800847a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008458:	4b19      	ldr	r3, [pc, #100]	@ (80084c0 <UART_SetConfig+0x2c0>)
 800845a:	61fb      	str	r3, [r7, #28]
        break;
 800845c:	e00d      	b.n	800847a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800845e:	f7fe fa89 	bl	8006974 <HAL_RCC_GetSysClockFreq>
 8008462:	61f8      	str	r0, [r7, #28]
        break;
 8008464:	e009      	b.n	800847a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800846a:	61fb      	str	r3, [r7, #28]
        break;
 800846c:	e005      	b.n	800847a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008478:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 8109 	beq.w	8008694 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	4613      	mov	r3, r2
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	4413      	add	r3, r2
 800848c:	69fa      	ldr	r2, [r7, #28]
 800848e:	429a      	cmp	r2, r3
 8008490:	d305      	bcc.n	800849e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008498:	69fa      	ldr	r2, [r7, #28]
 800849a:	429a      	cmp	r2, r3
 800849c:	d912      	bls.n	80084c4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80084a4:	e0f6      	b.n	8008694 <UART_SetConfig+0x494>
 80084a6:	bf00      	nop
 80084a8:	efff69f3 	.word	0xefff69f3
 80084ac:	40008000 	.word	0x40008000
 80084b0:	40013800 	.word	0x40013800
 80084b4:	40021000 	.word	0x40021000
 80084b8:	40004400 	.word	0x40004400
 80084bc:	40004800 	.word	0x40004800
 80084c0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	2200      	movs	r2, #0
 80084c8:	461c      	mov	r4, r3
 80084ca:	4615      	mov	r5, r2
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	f04f 0300 	mov.w	r3, #0
 80084d4:	022b      	lsls	r3, r5, #8
 80084d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80084da:	0222      	lsls	r2, r4, #8
 80084dc:	68f9      	ldr	r1, [r7, #12]
 80084de:	6849      	ldr	r1, [r1, #4]
 80084e0:	0849      	lsrs	r1, r1, #1
 80084e2:	2000      	movs	r0, #0
 80084e4:	4688      	mov	r8, r1
 80084e6:	4681      	mov	r9, r0
 80084e8:	eb12 0a08 	adds.w	sl, r2, r8
 80084ec:	eb43 0b09 	adc.w	fp, r3, r9
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	607a      	str	r2, [r7, #4]
 80084fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084fe:	4650      	mov	r0, sl
 8008500:	4659      	mov	r1, fp
 8008502:	f7f8 fba1 	bl	8000c48 <__aeabi_uldivmod>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4613      	mov	r3, r2
 800850c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008514:	d308      	bcc.n	8008528 <UART_SetConfig+0x328>
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800851c:	d204      	bcs.n	8008528 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	60da      	str	r2, [r3, #12]
 8008526:	e0b5      	b.n	8008694 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800852e:	e0b1      	b.n	8008694 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008538:	d15d      	bne.n	80085f6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800853a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800853e:	2b08      	cmp	r3, #8
 8008540:	d827      	bhi.n	8008592 <UART_SetConfig+0x392>
 8008542:	a201      	add	r2, pc, #4	@ (adr r2, 8008548 <UART_SetConfig+0x348>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	0800856d 	.word	0x0800856d
 800854c:	08008575 	.word	0x08008575
 8008550:	0800857d 	.word	0x0800857d
 8008554:	08008593 	.word	0x08008593
 8008558:	08008583 	.word	0x08008583
 800855c:	08008593 	.word	0x08008593
 8008560:	08008593 	.word	0x08008593
 8008564:	08008593 	.word	0x08008593
 8008568:	0800858b 	.word	0x0800858b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800856c:	f7fe fa9a 	bl	8006aa4 <HAL_RCC_GetPCLK1Freq>
 8008570:	61f8      	str	r0, [r7, #28]
        break;
 8008572:	e014      	b.n	800859e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008574:	f7fe faac 	bl	8006ad0 <HAL_RCC_GetPCLK2Freq>
 8008578:	61f8      	str	r0, [r7, #28]
        break;
 800857a:	e010      	b.n	800859e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800857c:	4b4c      	ldr	r3, [pc, #304]	@ (80086b0 <UART_SetConfig+0x4b0>)
 800857e:	61fb      	str	r3, [r7, #28]
        break;
 8008580:	e00d      	b.n	800859e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008582:	f7fe f9f7 	bl	8006974 <HAL_RCC_GetSysClockFreq>
 8008586:	61f8      	str	r0, [r7, #28]
        break;
 8008588:	e009      	b.n	800859e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800858a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800858e:	61fb      	str	r3, [r7, #28]
        break;
 8008590:	e005      	b.n	800859e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800859c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d077      	beq.n	8008694 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	005a      	lsls	r2, r3, #1
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	085b      	lsrs	r3, r3, #1
 80085ae:	441a      	add	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	2b0f      	cmp	r3, #15
 80085be:	d916      	bls.n	80085ee <UART_SetConfig+0x3ee>
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085c6:	d212      	bcs.n	80085ee <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f023 030f 	bic.w	r3, r3, #15
 80085d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	085b      	lsrs	r3, r3, #1
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	f003 0307 	and.w	r3, r3, #7
 80085dc:	b29a      	uxth	r2, r3
 80085de:	8afb      	ldrh	r3, [r7, #22]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	8afa      	ldrh	r2, [r7, #22]
 80085ea:	60da      	str	r2, [r3, #12]
 80085ec:	e052      	b.n	8008694 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80085f4:	e04e      	b.n	8008694 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80085fa:	2b08      	cmp	r3, #8
 80085fc:	d827      	bhi.n	800864e <UART_SetConfig+0x44e>
 80085fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008604 <UART_SetConfig+0x404>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008629 	.word	0x08008629
 8008608:	08008631 	.word	0x08008631
 800860c:	08008639 	.word	0x08008639
 8008610:	0800864f 	.word	0x0800864f
 8008614:	0800863f 	.word	0x0800863f
 8008618:	0800864f 	.word	0x0800864f
 800861c:	0800864f 	.word	0x0800864f
 8008620:	0800864f 	.word	0x0800864f
 8008624:	08008647 	.word	0x08008647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008628:	f7fe fa3c 	bl	8006aa4 <HAL_RCC_GetPCLK1Freq>
 800862c:	61f8      	str	r0, [r7, #28]
        break;
 800862e:	e014      	b.n	800865a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008630:	f7fe fa4e 	bl	8006ad0 <HAL_RCC_GetPCLK2Freq>
 8008634:	61f8      	str	r0, [r7, #28]
        break;
 8008636:	e010      	b.n	800865a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008638:	4b1d      	ldr	r3, [pc, #116]	@ (80086b0 <UART_SetConfig+0x4b0>)
 800863a:	61fb      	str	r3, [r7, #28]
        break;
 800863c:	e00d      	b.n	800865a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800863e:	f7fe f999 	bl	8006974 <HAL_RCC_GetSysClockFreq>
 8008642:	61f8      	str	r0, [r7, #28]
        break;
 8008644:	e009      	b.n	800865a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800864a:	61fb      	str	r3, [r7, #28]
        break;
 800864c:	e005      	b.n	800865a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008658:	bf00      	nop
    }

    if (pclk != 0U)
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d019      	beq.n	8008694 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	085a      	lsrs	r2, r3, #1
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	441a      	add	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008672:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	2b0f      	cmp	r3, #15
 8008678:	d909      	bls.n	800868e <UART_SetConfig+0x48e>
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008680:	d205      	bcs.n	800868e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60da      	str	r2, [r3, #12]
 800868c:	e002      	b.n	8008694 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80086a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3728      	adds	r7, #40	@ 0x28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086ae:	bf00      	nop
 80086b0:	00f42400 	.word	0x00f42400

080086b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c0:	f003 0308 	and.w	r3, r3, #8
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00a      	beq.n	80086de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	430a      	orrs	r2, r1
 80086dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	430a      	orrs	r2, r1
 80086fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00a      	beq.n	8008722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	430a      	orrs	r2, r1
 8008720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	430a      	orrs	r2, r1
 8008742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00a      	beq.n	8008766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008790:	2b00      	cmp	r3, #0
 8008792:	d01a      	beq.n	80087ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087b2:	d10a      	bne.n	80087ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	605a      	str	r2, [r3, #4]
  }
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b098      	sub	sp, #96	@ 0x60
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008808:	f7fa fdf4 	bl	80033f4 <HAL_GetTick>
 800880c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0308 	and.w	r3, r3, #8
 8008818:	2b08      	cmp	r3, #8
 800881a:	d12e      	bne.n	800887a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800881c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008824:	2200      	movs	r2, #0
 8008826:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f88c 	bl	8008948 <UART_WaitOnFlagUntilTimeout>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d021      	beq.n	800887a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883e:	e853 3f00 	ldrex	r3, [r3]
 8008842:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800884a:	653b      	str	r3, [r7, #80]	@ 0x50
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	461a      	mov	r2, r3
 8008852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008854:	647b      	str	r3, [r7, #68]	@ 0x44
 8008856:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800885a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e6      	bne.n	8008836 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e062      	b.n	8008940 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	2b04      	cmp	r3, #4
 8008886:	d149      	bne.n	800891c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008888:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008890:	2200      	movs	r2, #0
 8008892:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f856 	bl	8008948 <UART_WaitOnFlagUntilTimeout>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d03c      	beq.n	800891c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	623b      	str	r3, [r7, #32]
   return(result);
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80088c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e6      	bne.n	80088a2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3308      	adds	r3, #8
 80088da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 0301 	bic.w	r3, r3, #1
 80088ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3308      	adds	r3, #8
 80088f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088f4:	61fa      	str	r2, [r7, #28]
 80088f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	69b9      	ldr	r1, [r7, #24]
 80088fa:	69fa      	ldr	r2, [r7, #28]
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	617b      	str	r3, [r7, #20]
   return(result);
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e5      	bne.n	80088d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2220      	movs	r2, #32
 800890c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e011      	b.n	8008940 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2220      	movs	r2, #32
 8008920:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2220      	movs	r2, #32
 8008926:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3758      	adds	r7, #88	@ 0x58
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	603b      	str	r3, [r7, #0]
 8008954:	4613      	mov	r3, r2
 8008956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008958:	e04f      	b.n	80089fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008960:	d04b      	beq.n	80089fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008962:	f7fa fd47 	bl	80033f4 <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	429a      	cmp	r2, r3
 8008970:	d302      	bcc.n	8008978 <UART_WaitOnFlagUntilTimeout+0x30>
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	e04e      	b.n	8008a1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0304 	and.w	r3, r3, #4
 8008986:	2b00      	cmp	r3, #0
 8008988:	d037      	beq.n	80089fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	2b80      	cmp	r3, #128	@ 0x80
 800898e:	d034      	beq.n	80089fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b40      	cmp	r3, #64	@ 0x40
 8008994:	d031      	beq.n	80089fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	f003 0308 	and.w	r3, r3, #8
 80089a0:	2b08      	cmp	r3, #8
 80089a2:	d110      	bne.n	80089c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2208      	movs	r2, #8
 80089aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f8ff 	bl	8008bb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2208      	movs	r2, #8
 80089b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e029      	b.n	8008a1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089d4:	d111      	bne.n	80089fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 f8e5 	bl	8008bb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e00f      	b.n	8008a1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	69da      	ldr	r2, [r3, #28]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	4013      	ands	r3, r2
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	bf0c      	ite	eq
 8008a0a:	2301      	moveq	r3, #1
 8008a0c:	2300      	movne	r3, #0
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d0a0      	beq.n	800895a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
	...

08008a24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b096      	sub	sp, #88	@ 0x58
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	88fa      	ldrh	r2, [r7, #6]
 8008a3c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2222      	movs	r2, #34	@ 0x22
 8008a4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d028      	beq.n	8008aaa <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b58 <UART_Start_Receive_DMA+0x134>)
 8008a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a64:	4a3d      	ldr	r2, [pc, #244]	@ (8008b5c <UART_Start_Receive_DMA+0x138>)
 8008a66:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8008b60 <UART_Start_Receive_DMA+0x13c>)
 8008a6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a74:	2200      	movs	r2, #0
 8008a76:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3324      	adds	r3, #36	@ 0x24
 8008a82:	4619      	mov	r1, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a88:	461a      	mov	r2, r3
 8008a8a:	88fb      	ldrh	r3, [r7, #6]
 8008a8c:	f7fb fd5c 	bl	8004548 <HAL_DMA_Start_IT>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d009      	beq.n	8008aaa <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2210      	movs	r2, #16
 8008a9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e051      	b.n	8008b4e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d018      	beq.n	8008ae4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aba:	e853 3f00 	ldrex	r3, [r3]
 8008abe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ac6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ad2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ad8:	e841 2300 	strex	r3, r2, [r1]
 8008adc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e6      	bne.n	8008ab2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3308      	adds	r3, #8
 8008aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aee:	e853 3f00 	ldrex	r3, [r3]
 8008af2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af6:	f043 0301 	orr.w	r3, r3, #1
 8008afa:	653b      	str	r3, [r7, #80]	@ 0x50
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3308      	adds	r3, #8
 8008b02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b04:	637a      	str	r2, [r7, #52]	@ 0x34
 8008b06:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b0c:	e841 2300 	strex	r3, r2, [r1]
 8008b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1e5      	bne.n	8008ae4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	e853 3f00 	ldrex	r3, [r3]
 8008b26:	613b      	str	r3, [r7, #16]
   return(result);
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3308      	adds	r3, #8
 8008b36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b38:	623a      	str	r2, [r7, #32]
 8008b3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	69f9      	ldr	r1, [r7, #28]
 8008b3e:	6a3a      	ldr	r2, [r7, #32]
 8008b40:	e841 2300 	strex	r3, r2, [r1]
 8008b44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e5      	bne.n	8008b18 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3758      	adds	r7, #88	@ 0x58
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	08008c79 	.word	0x08008c79
 8008b5c:	08008da5 	.word	0x08008da5
 8008b60:	08008de3 	.word	0x08008de3

08008b64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b089      	sub	sp, #36	@ 0x24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	e853 3f00 	ldrex	r3, [r3]
 8008b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008b80:	61fb      	str	r3, [r7, #28]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8e:	6979      	ldr	r1, [r7, #20]
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	613b      	str	r3, [r7, #16]
   return(result);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1e6      	bne.n	8008b6c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008ba4:	bf00      	nop
 8008ba6:	3724      	adds	r7, #36	@ 0x24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b095      	sub	sp, #84	@ 0x54
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e6      	bne.n	8008bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3308      	adds	r3, #8
 8008bf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	f023 0301 	bic.w	r3, r3, #1
 8008c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3308      	adds	r3, #8
 8008c08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e5      	bne.n	8008bea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d118      	bne.n	8008c58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	e853 3f00 	ldrex	r3, [r3]
 8008c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	f023 0310 	bic.w	r3, r3, #16
 8008c3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	461a      	mov	r2, r3
 8008c42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c44:	61bb      	str	r3, [r7, #24]
 8008c46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	6979      	ldr	r1, [r7, #20]
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	e841 2300 	strex	r3, r2, [r1]
 8008c50:	613b      	str	r3, [r7, #16]
   return(result);
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1e6      	bne.n	8008c26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008c6c:	bf00      	nop
 8008c6e:	3754      	adds	r7, #84	@ 0x54
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b09c      	sub	sp, #112	@ 0x70
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c84:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d171      	bne.n	8008d78 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ca4:	e853 3f00 	ldrex	r3, [r3]
 8008ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cbc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e6      	bne.n	8008c9c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	e853 3f00 	ldrex	r3, [r3]
 8008cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce0:	f023 0301 	bic.w	r3, r3, #1
 8008ce4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3308      	adds	r3, #8
 8008cec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008cee:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cf6:	e841 2300 	strex	r3, r2, [r1]
 8008cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1e5      	bne.n	8008cce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3308      	adds	r3, #8
 8008d08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0c:	e853 3f00 	ldrex	r3, [r3]
 8008d10:	623b      	str	r3, [r7, #32]
   return(result);
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d18:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3308      	adds	r3, #8
 8008d20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008d22:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d2a:	e841 2300 	strex	r3, r2, [r1]
 8008d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1e5      	bne.n	8008d02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d118      	bne.n	8008d78 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	e853 3f00 	ldrex	r3, [r3]
 8008d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0310 	bic.w	r3, r3, #16
 8008d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	461a      	mov	r2, r3
 8008d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d64:	61fb      	str	r3, [r7, #28]
 8008d66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d68:	69b9      	ldr	r1, [r7, #24]
 8008d6a:	69fa      	ldr	r2, [r7, #28]
 8008d6c:	e841 2300 	strex	r3, r2, [r1]
 8008d70:	617b      	str	r3, [r7, #20]
   return(result);
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1e6      	bne.n	8008d46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d107      	bne.n	8008d96 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008d90:	f7f9 fd1c 	bl	80027cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d94:	e002      	b.n	8008d9c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008d96:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008d98:	f7ff fa14 	bl	80081c4 <HAL_UART_RxCpltCallback>
}
 8008d9c:	bf00      	nop
 8008d9e:	3770      	adds	r7, #112	@ 0x70
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2201      	movs	r2, #1
 8008db6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d109      	bne.n	8008dd4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008dc6:	085b      	lsrs	r3, r3, #1
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	4619      	mov	r1, r3
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7f9 fcfd 	bl	80027cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008dd2:	e002      	b.n	8008dda <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f7ff f9ff 	bl	80081d8 <HAL_UART_RxHalfCpltCallback>
}
 8008dda:	bf00      	nop
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b086      	sub	sp, #24
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008df4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e08:	2b80      	cmp	r3, #128	@ 0x80
 8008e0a:	d109      	bne.n	8008e20 <UART_DMAError+0x3e>
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2b21      	cmp	r3, #33	@ 0x21
 8008e10:	d106      	bne.n	8008e20 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008e1a:	6978      	ldr	r0, [r7, #20]
 8008e1c:	f7ff fea2 	bl	8008b64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e2a:	2b40      	cmp	r3, #64	@ 0x40
 8008e2c:	d109      	bne.n	8008e42 <UART_DMAError+0x60>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b22      	cmp	r3, #34	@ 0x22
 8008e32:	d106      	bne.n	8008e42 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008e3c:	6978      	ldr	r0, [r7, #20]
 8008e3e:	f7ff feb7 	bl	8008bb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e48:	f043 0210 	orr.w	r2, r3, #16
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e52:	6978      	ldr	r0, [r7, #20]
 8008e54:	f7ff f9ca 	bl	80081ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e58:	bf00      	nop
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f7ff f9b4 	bl	80081ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e84:	bf00      	nop
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ea8:	61fb      	str	r3, [r7, #28]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	61bb      	str	r3, [r7, #24]
 8008eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	6979      	ldr	r1, [r7, #20]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e6      	bne.n	8008e94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff f96c 	bl	80081b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ed8:	bf00      	nop
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08c      	sub	sp, #48	@ 0x30
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4613      	mov	r3, r2
 8008f00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f08:	2b20      	cmp	r3, #32
 8008f0a:	d142      	bne.n	8008f92 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008f12:	88fb      	ldrh	r3, [r7, #6]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e03b      	b.n	8008f94 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008f28:	88fb      	ldrh	r3, [r7, #6]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	68b9      	ldr	r1, [r7, #8]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f7ff fd78 	bl	8008a24 <UART_Start_Receive_DMA>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008f3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d124      	bne.n	8008f8c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d11d      	bne.n	8008f86 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2210      	movs	r2, #16
 8008f50:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	e853 3f00 	ldrex	r3, [r3]
 8008f5e:	617b      	str	r3, [r7, #20]
   return(result);
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f043 0310 	orr.w	r3, r3, #16
 8008f66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f72:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	6a39      	ldr	r1, [r7, #32]
 8008f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f78:	e841 2300 	strex	r3, r2, [r1]
 8008f7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e6      	bne.n	8008f52 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008f84:	e002      	b.n	8008f8c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008f8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f90:	e000      	b.n	8008f94 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008f92:	2302      	movs	r3, #2
  }
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3730      	adds	r7, #48	@ 0x30
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <__cvt>:
 8008f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa0:	ec57 6b10 	vmov	r6, r7, d0
 8008fa4:	2f00      	cmp	r7, #0
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	4619      	mov	r1, r3
 8008faa:	463b      	mov	r3, r7
 8008fac:	bfbb      	ittet	lt
 8008fae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008fb2:	461f      	movlt	r7, r3
 8008fb4:	2300      	movge	r3, #0
 8008fb6:	232d      	movlt	r3, #45	@ 0x2d
 8008fb8:	700b      	strb	r3, [r1, #0]
 8008fba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fbc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008fc0:	4691      	mov	r9, r2
 8008fc2:	f023 0820 	bic.w	r8, r3, #32
 8008fc6:	bfbc      	itt	lt
 8008fc8:	4632      	movlt	r2, r6
 8008fca:	4616      	movlt	r6, r2
 8008fcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008fd0:	d005      	beq.n	8008fde <__cvt+0x42>
 8008fd2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008fd6:	d100      	bne.n	8008fda <__cvt+0x3e>
 8008fd8:	3401      	adds	r4, #1
 8008fda:	2102      	movs	r1, #2
 8008fdc:	e000      	b.n	8008fe0 <__cvt+0x44>
 8008fde:	2103      	movs	r1, #3
 8008fe0:	ab03      	add	r3, sp, #12
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	ab02      	add	r3, sp, #8
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	ec47 6b10 	vmov	d0, r6, r7
 8008fec:	4653      	mov	r3, sl
 8008fee:	4622      	mov	r2, r4
 8008ff0:	f000 ff46 	bl	8009e80 <_dtoa_r>
 8008ff4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	d119      	bne.n	8009030 <__cvt+0x94>
 8008ffc:	f019 0f01 	tst.w	r9, #1
 8009000:	d00e      	beq.n	8009020 <__cvt+0x84>
 8009002:	eb00 0904 	add.w	r9, r0, r4
 8009006:	2200      	movs	r2, #0
 8009008:	2300      	movs	r3, #0
 800900a:	4630      	mov	r0, r6
 800900c:	4639      	mov	r1, r7
 800900e:	f7f7 fd5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009012:	b108      	cbz	r0, 8009018 <__cvt+0x7c>
 8009014:	f8cd 900c 	str.w	r9, [sp, #12]
 8009018:	2230      	movs	r2, #48	@ 0x30
 800901a:	9b03      	ldr	r3, [sp, #12]
 800901c:	454b      	cmp	r3, r9
 800901e:	d31e      	bcc.n	800905e <__cvt+0xc2>
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009024:	1b5b      	subs	r3, r3, r5
 8009026:	4628      	mov	r0, r5
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	b004      	add	sp, #16
 800902c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009030:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009034:	eb00 0904 	add.w	r9, r0, r4
 8009038:	d1e5      	bne.n	8009006 <__cvt+0x6a>
 800903a:	7803      	ldrb	r3, [r0, #0]
 800903c:	2b30      	cmp	r3, #48	@ 0x30
 800903e:	d10a      	bne.n	8009056 <__cvt+0xba>
 8009040:	2200      	movs	r2, #0
 8009042:	2300      	movs	r3, #0
 8009044:	4630      	mov	r0, r6
 8009046:	4639      	mov	r1, r7
 8009048:	f7f7 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800904c:	b918      	cbnz	r0, 8009056 <__cvt+0xba>
 800904e:	f1c4 0401 	rsb	r4, r4, #1
 8009052:	f8ca 4000 	str.w	r4, [sl]
 8009056:	f8da 3000 	ldr.w	r3, [sl]
 800905a:	4499      	add	r9, r3
 800905c:	e7d3      	b.n	8009006 <__cvt+0x6a>
 800905e:	1c59      	adds	r1, r3, #1
 8009060:	9103      	str	r1, [sp, #12]
 8009062:	701a      	strb	r2, [r3, #0]
 8009064:	e7d9      	b.n	800901a <__cvt+0x7e>

08009066 <__exponent>:
 8009066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009068:	2900      	cmp	r1, #0
 800906a:	bfba      	itte	lt
 800906c:	4249      	neglt	r1, r1
 800906e:	232d      	movlt	r3, #45	@ 0x2d
 8009070:	232b      	movge	r3, #43	@ 0x2b
 8009072:	2909      	cmp	r1, #9
 8009074:	7002      	strb	r2, [r0, #0]
 8009076:	7043      	strb	r3, [r0, #1]
 8009078:	dd29      	ble.n	80090ce <__exponent+0x68>
 800907a:	f10d 0307 	add.w	r3, sp, #7
 800907e:	461d      	mov	r5, r3
 8009080:	270a      	movs	r7, #10
 8009082:	461a      	mov	r2, r3
 8009084:	fbb1 f6f7 	udiv	r6, r1, r7
 8009088:	fb07 1416 	mls	r4, r7, r6, r1
 800908c:	3430      	adds	r4, #48	@ 0x30
 800908e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009092:	460c      	mov	r4, r1
 8009094:	2c63      	cmp	r4, #99	@ 0x63
 8009096:	f103 33ff 	add.w	r3, r3, #4294967295
 800909a:	4631      	mov	r1, r6
 800909c:	dcf1      	bgt.n	8009082 <__exponent+0x1c>
 800909e:	3130      	adds	r1, #48	@ 0x30
 80090a0:	1e94      	subs	r4, r2, #2
 80090a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80090a6:	1c41      	adds	r1, r0, #1
 80090a8:	4623      	mov	r3, r4
 80090aa:	42ab      	cmp	r3, r5
 80090ac:	d30a      	bcc.n	80090c4 <__exponent+0x5e>
 80090ae:	f10d 0309 	add.w	r3, sp, #9
 80090b2:	1a9b      	subs	r3, r3, r2
 80090b4:	42ac      	cmp	r4, r5
 80090b6:	bf88      	it	hi
 80090b8:	2300      	movhi	r3, #0
 80090ba:	3302      	adds	r3, #2
 80090bc:	4403      	add	r3, r0
 80090be:	1a18      	subs	r0, r3, r0
 80090c0:	b003      	add	sp, #12
 80090c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80090c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80090cc:	e7ed      	b.n	80090aa <__exponent+0x44>
 80090ce:	2330      	movs	r3, #48	@ 0x30
 80090d0:	3130      	adds	r1, #48	@ 0x30
 80090d2:	7083      	strb	r3, [r0, #2]
 80090d4:	70c1      	strb	r1, [r0, #3]
 80090d6:	1d03      	adds	r3, r0, #4
 80090d8:	e7f1      	b.n	80090be <__exponent+0x58>
	...

080090dc <_printf_float>:
 80090dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e0:	b08d      	sub	sp, #52	@ 0x34
 80090e2:	460c      	mov	r4, r1
 80090e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80090e8:	4616      	mov	r6, r2
 80090ea:	461f      	mov	r7, r3
 80090ec:	4605      	mov	r5, r0
 80090ee:	f000 fdbf 	bl	8009c70 <_localeconv_r>
 80090f2:	6803      	ldr	r3, [r0, #0]
 80090f4:	9304      	str	r3, [sp, #16]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7f7 f8ba 	bl	8000270 <strlen>
 80090fc:	2300      	movs	r3, #0
 80090fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009100:	f8d8 3000 	ldr.w	r3, [r8]
 8009104:	9005      	str	r0, [sp, #20]
 8009106:	3307      	adds	r3, #7
 8009108:	f023 0307 	bic.w	r3, r3, #7
 800910c:	f103 0208 	add.w	r2, r3, #8
 8009110:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009114:	f8d4 b000 	ldr.w	fp, [r4]
 8009118:	f8c8 2000 	str.w	r2, [r8]
 800911c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009120:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009124:	9307      	str	r3, [sp, #28]
 8009126:	f8cd 8018 	str.w	r8, [sp, #24]
 800912a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800912e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009132:	4b9c      	ldr	r3, [pc, #624]	@ (80093a4 <_printf_float+0x2c8>)
 8009134:	f04f 32ff 	mov.w	r2, #4294967295
 8009138:	f7f7 fcf8 	bl	8000b2c <__aeabi_dcmpun>
 800913c:	bb70      	cbnz	r0, 800919c <_printf_float+0xc0>
 800913e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009142:	4b98      	ldr	r3, [pc, #608]	@ (80093a4 <_printf_float+0x2c8>)
 8009144:	f04f 32ff 	mov.w	r2, #4294967295
 8009148:	f7f7 fcd2 	bl	8000af0 <__aeabi_dcmple>
 800914c:	bb30      	cbnz	r0, 800919c <_printf_float+0xc0>
 800914e:	2200      	movs	r2, #0
 8009150:	2300      	movs	r3, #0
 8009152:	4640      	mov	r0, r8
 8009154:	4649      	mov	r1, r9
 8009156:	f7f7 fcc1 	bl	8000adc <__aeabi_dcmplt>
 800915a:	b110      	cbz	r0, 8009162 <_printf_float+0x86>
 800915c:	232d      	movs	r3, #45	@ 0x2d
 800915e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009162:	4a91      	ldr	r2, [pc, #580]	@ (80093a8 <_printf_float+0x2cc>)
 8009164:	4b91      	ldr	r3, [pc, #580]	@ (80093ac <_printf_float+0x2d0>)
 8009166:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800916a:	bf94      	ite	ls
 800916c:	4690      	movls	r8, r2
 800916e:	4698      	movhi	r8, r3
 8009170:	2303      	movs	r3, #3
 8009172:	6123      	str	r3, [r4, #16]
 8009174:	f02b 0304 	bic.w	r3, fp, #4
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	f04f 0900 	mov.w	r9, #0
 800917e:	9700      	str	r7, [sp, #0]
 8009180:	4633      	mov	r3, r6
 8009182:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009184:	4621      	mov	r1, r4
 8009186:	4628      	mov	r0, r5
 8009188:	f000 f9d2 	bl	8009530 <_printf_common>
 800918c:	3001      	adds	r0, #1
 800918e:	f040 808d 	bne.w	80092ac <_printf_float+0x1d0>
 8009192:	f04f 30ff 	mov.w	r0, #4294967295
 8009196:	b00d      	add	sp, #52	@ 0x34
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	4642      	mov	r2, r8
 800919e:	464b      	mov	r3, r9
 80091a0:	4640      	mov	r0, r8
 80091a2:	4649      	mov	r1, r9
 80091a4:	f7f7 fcc2 	bl	8000b2c <__aeabi_dcmpun>
 80091a8:	b140      	cbz	r0, 80091bc <_printf_float+0xe0>
 80091aa:	464b      	mov	r3, r9
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bfbc      	itt	lt
 80091b0:	232d      	movlt	r3, #45	@ 0x2d
 80091b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80091b6:	4a7e      	ldr	r2, [pc, #504]	@ (80093b0 <_printf_float+0x2d4>)
 80091b8:	4b7e      	ldr	r3, [pc, #504]	@ (80093b4 <_printf_float+0x2d8>)
 80091ba:	e7d4      	b.n	8009166 <_printf_float+0x8a>
 80091bc:	6863      	ldr	r3, [r4, #4]
 80091be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80091c2:	9206      	str	r2, [sp, #24]
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	d13b      	bne.n	8009240 <_printf_float+0x164>
 80091c8:	2306      	movs	r3, #6
 80091ca:	6063      	str	r3, [r4, #4]
 80091cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80091d0:	2300      	movs	r3, #0
 80091d2:	6022      	str	r2, [r4, #0]
 80091d4:	9303      	str	r3, [sp, #12]
 80091d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80091d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80091dc:	ab09      	add	r3, sp, #36	@ 0x24
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	6861      	ldr	r1, [r4, #4]
 80091e2:	ec49 8b10 	vmov	d0, r8, r9
 80091e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80091ea:	4628      	mov	r0, r5
 80091ec:	f7ff fed6 	bl	8008f9c <__cvt>
 80091f0:	9b06      	ldr	r3, [sp, #24]
 80091f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091f4:	2b47      	cmp	r3, #71	@ 0x47
 80091f6:	4680      	mov	r8, r0
 80091f8:	d129      	bne.n	800924e <_printf_float+0x172>
 80091fa:	1cc8      	adds	r0, r1, #3
 80091fc:	db02      	blt.n	8009204 <_printf_float+0x128>
 80091fe:	6863      	ldr	r3, [r4, #4]
 8009200:	4299      	cmp	r1, r3
 8009202:	dd41      	ble.n	8009288 <_printf_float+0x1ac>
 8009204:	f1aa 0a02 	sub.w	sl, sl, #2
 8009208:	fa5f fa8a 	uxtb.w	sl, sl
 800920c:	3901      	subs	r1, #1
 800920e:	4652      	mov	r2, sl
 8009210:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009214:	9109      	str	r1, [sp, #36]	@ 0x24
 8009216:	f7ff ff26 	bl	8009066 <__exponent>
 800921a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800921c:	1813      	adds	r3, r2, r0
 800921e:	2a01      	cmp	r2, #1
 8009220:	4681      	mov	r9, r0
 8009222:	6123      	str	r3, [r4, #16]
 8009224:	dc02      	bgt.n	800922c <_printf_float+0x150>
 8009226:	6822      	ldr	r2, [r4, #0]
 8009228:	07d2      	lsls	r2, r2, #31
 800922a:	d501      	bpl.n	8009230 <_printf_float+0x154>
 800922c:	3301      	adds	r3, #1
 800922e:	6123      	str	r3, [r4, #16]
 8009230:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0a2      	beq.n	800917e <_printf_float+0xa2>
 8009238:	232d      	movs	r3, #45	@ 0x2d
 800923a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800923e:	e79e      	b.n	800917e <_printf_float+0xa2>
 8009240:	9a06      	ldr	r2, [sp, #24]
 8009242:	2a47      	cmp	r2, #71	@ 0x47
 8009244:	d1c2      	bne.n	80091cc <_printf_float+0xf0>
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1c0      	bne.n	80091cc <_printf_float+0xf0>
 800924a:	2301      	movs	r3, #1
 800924c:	e7bd      	b.n	80091ca <_printf_float+0xee>
 800924e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009252:	d9db      	bls.n	800920c <_printf_float+0x130>
 8009254:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009258:	d118      	bne.n	800928c <_printf_float+0x1b0>
 800925a:	2900      	cmp	r1, #0
 800925c:	6863      	ldr	r3, [r4, #4]
 800925e:	dd0b      	ble.n	8009278 <_printf_float+0x19c>
 8009260:	6121      	str	r1, [r4, #16]
 8009262:	b913      	cbnz	r3, 800926a <_printf_float+0x18e>
 8009264:	6822      	ldr	r2, [r4, #0]
 8009266:	07d0      	lsls	r0, r2, #31
 8009268:	d502      	bpl.n	8009270 <_printf_float+0x194>
 800926a:	3301      	adds	r3, #1
 800926c:	440b      	add	r3, r1
 800926e:	6123      	str	r3, [r4, #16]
 8009270:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009272:	f04f 0900 	mov.w	r9, #0
 8009276:	e7db      	b.n	8009230 <_printf_float+0x154>
 8009278:	b913      	cbnz	r3, 8009280 <_printf_float+0x1a4>
 800927a:	6822      	ldr	r2, [r4, #0]
 800927c:	07d2      	lsls	r2, r2, #31
 800927e:	d501      	bpl.n	8009284 <_printf_float+0x1a8>
 8009280:	3302      	adds	r3, #2
 8009282:	e7f4      	b.n	800926e <_printf_float+0x192>
 8009284:	2301      	movs	r3, #1
 8009286:	e7f2      	b.n	800926e <_printf_float+0x192>
 8009288:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800928c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800928e:	4299      	cmp	r1, r3
 8009290:	db05      	blt.n	800929e <_printf_float+0x1c2>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	6121      	str	r1, [r4, #16]
 8009296:	07d8      	lsls	r0, r3, #31
 8009298:	d5ea      	bpl.n	8009270 <_printf_float+0x194>
 800929a:	1c4b      	adds	r3, r1, #1
 800929c:	e7e7      	b.n	800926e <_printf_float+0x192>
 800929e:	2900      	cmp	r1, #0
 80092a0:	bfd4      	ite	le
 80092a2:	f1c1 0202 	rsble	r2, r1, #2
 80092a6:	2201      	movgt	r2, #1
 80092a8:	4413      	add	r3, r2
 80092aa:	e7e0      	b.n	800926e <_printf_float+0x192>
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	055a      	lsls	r2, r3, #21
 80092b0:	d407      	bmi.n	80092c2 <_printf_float+0x1e6>
 80092b2:	6923      	ldr	r3, [r4, #16]
 80092b4:	4642      	mov	r2, r8
 80092b6:	4631      	mov	r1, r6
 80092b8:	4628      	mov	r0, r5
 80092ba:	47b8      	blx	r7
 80092bc:	3001      	adds	r0, #1
 80092be:	d12b      	bne.n	8009318 <_printf_float+0x23c>
 80092c0:	e767      	b.n	8009192 <_printf_float+0xb6>
 80092c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80092c6:	f240 80dd 	bls.w	8009484 <_printf_float+0x3a8>
 80092ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80092ce:	2200      	movs	r2, #0
 80092d0:	2300      	movs	r3, #0
 80092d2:	f7f7 fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d033      	beq.n	8009342 <_printf_float+0x266>
 80092da:	4a37      	ldr	r2, [pc, #220]	@ (80093b8 <_printf_float+0x2dc>)
 80092dc:	2301      	movs	r3, #1
 80092de:	4631      	mov	r1, r6
 80092e0:	4628      	mov	r0, r5
 80092e2:	47b8      	blx	r7
 80092e4:	3001      	adds	r0, #1
 80092e6:	f43f af54 	beq.w	8009192 <_printf_float+0xb6>
 80092ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80092ee:	4543      	cmp	r3, r8
 80092f0:	db02      	blt.n	80092f8 <_printf_float+0x21c>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	07d8      	lsls	r0, r3, #31
 80092f6:	d50f      	bpl.n	8009318 <_printf_float+0x23c>
 80092f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	47b8      	blx	r7
 8009302:	3001      	adds	r0, #1
 8009304:	f43f af45 	beq.w	8009192 <_printf_float+0xb6>
 8009308:	f04f 0900 	mov.w	r9, #0
 800930c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009310:	f104 0a1a 	add.w	sl, r4, #26
 8009314:	45c8      	cmp	r8, r9
 8009316:	dc09      	bgt.n	800932c <_printf_float+0x250>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	079b      	lsls	r3, r3, #30
 800931c:	f100 8103 	bmi.w	8009526 <_printf_float+0x44a>
 8009320:	68e0      	ldr	r0, [r4, #12]
 8009322:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009324:	4298      	cmp	r0, r3
 8009326:	bfb8      	it	lt
 8009328:	4618      	movlt	r0, r3
 800932a:	e734      	b.n	8009196 <_printf_float+0xba>
 800932c:	2301      	movs	r3, #1
 800932e:	4652      	mov	r2, sl
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f af2b 	beq.w	8009192 <_printf_float+0xb6>
 800933c:	f109 0901 	add.w	r9, r9, #1
 8009340:	e7e8      	b.n	8009314 <_printf_float+0x238>
 8009342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009344:	2b00      	cmp	r3, #0
 8009346:	dc39      	bgt.n	80093bc <_printf_float+0x2e0>
 8009348:	4a1b      	ldr	r2, [pc, #108]	@ (80093b8 <_printf_float+0x2dc>)
 800934a:	2301      	movs	r3, #1
 800934c:	4631      	mov	r1, r6
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	f43f af1d 	beq.w	8009192 <_printf_float+0xb6>
 8009358:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800935c:	ea59 0303 	orrs.w	r3, r9, r3
 8009360:	d102      	bne.n	8009368 <_printf_float+0x28c>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	07d9      	lsls	r1, r3, #31
 8009366:	d5d7      	bpl.n	8009318 <_printf_float+0x23c>
 8009368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800936c:	4631      	mov	r1, r6
 800936e:	4628      	mov	r0, r5
 8009370:	47b8      	blx	r7
 8009372:	3001      	adds	r0, #1
 8009374:	f43f af0d 	beq.w	8009192 <_printf_float+0xb6>
 8009378:	f04f 0a00 	mov.w	sl, #0
 800937c:	f104 0b1a 	add.w	fp, r4, #26
 8009380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009382:	425b      	negs	r3, r3
 8009384:	4553      	cmp	r3, sl
 8009386:	dc01      	bgt.n	800938c <_printf_float+0x2b0>
 8009388:	464b      	mov	r3, r9
 800938a:	e793      	b.n	80092b4 <_printf_float+0x1d8>
 800938c:	2301      	movs	r3, #1
 800938e:	465a      	mov	r2, fp
 8009390:	4631      	mov	r1, r6
 8009392:	4628      	mov	r0, r5
 8009394:	47b8      	blx	r7
 8009396:	3001      	adds	r0, #1
 8009398:	f43f aefb 	beq.w	8009192 <_printf_float+0xb6>
 800939c:	f10a 0a01 	add.w	sl, sl, #1
 80093a0:	e7ee      	b.n	8009380 <_printf_float+0x2a4>
 80093a2:	bf00      	nop
 80093a4:	7fefffff 	.word	0x7fefffff
 80093a8:	0800baa0 	.word	0x0800baa0
 80093ac:	0800baa4 	.word	0x0800baa4
 80093b0:	0800baa8 	.word	0x0800baa8
 80093b4:	0800baac 	.word	0x0800baac
 80093b8:	0800bab0 	.word	0x0800bab0
 80093bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093c2:	4553      	cmp	r3, sl
 80093c4:	bfa8      	it	ge
 80093c6:	4653      	movge	r3, sl
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	4699      	mov	r9, r3
 80093cc:	dc36      	bgt.n	800943c <_printf_float+0x360>
 80093ce:	f04f 0b00 	mov.w	fp, #0
 80093d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093d6:	f104 021a 	add.w	r2, r4, #26
 80093da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093dc:	9306      	str	r3, [sp, #24]
 80093de:	eba3 0309 	sub.w	r3, r3, r9
 80093e2:	455b      	cmp	r3, fp
 80093e4:	dc31      	bgt.n	800944a <_printf_float+0x36e>
 80093e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e8:	459a      	cmp	sl, r3
 80093ea:	dc3a      	bgt.n	8009462 <_printf_float+0x386>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	07da      	lsls	r2, r3, #31
 80093f0:	d437      	bmi.n	8009462 <_printf_float+0x386>
 80093f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f4:	ebaa 0903 	sub.w	r9, sl, r3
 80093f8:	9b06      	ldr	r3, [sp, #24]
 80093fa:	ebaa 0303 	sub.w	r3, sl, r3
 80093fe:	4599      	cmp	r9, r3
 8009400:	bfa8      	it	ge
 8009402:	4699      	movge	r9, r3
 8009404:	f1b9 0f00 	cmp.w	r9, #0
 8009408:	dc33      	bgt.n	8009472 <_printf_float+0x396>
 800940a:	f04f 0800 	mov.w	r8, #0
 800940e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009412:	f104 0b1a 	add.w	fp, r4, #26
 8009416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009418:	ebaa 0303 	sub.w	r3, sl, r3
 800941c:	eba3 0309 	sub.w	r3, r3, r9
 8009420:	4543      	cmp	r3, r8
 8009422:	f77f af79 	ble.w	8009318 <_printf_float+0x23c>
 8009426:	2301      	movs	r3, #1
 8009428:	465a      	mov	r2, fp
 800942a:	4631      	mov	r1, r6
 800942c:	4628      	mov	r0, r5
 800942e:	47b8      	blx	r7
 8009430:	3001      	adds	r0, #1
 8009432:	f43f aeae 	beq.w	8009192 <_printf_float+0xb6>
 8009436:	f108 0801 	add.w	r8, r8, #1
 800943a:	e7ec      	b.n	8009416 <_printf_float+0x33a>
 800943c:	4642      	mov	r2, r8
 800943e:	4631      	mov	r1, r6
 8009440:	4628      	mov	r0, r5
 8009442:	47b8      	blx	r7
 8009444:	3001      	adds	r0, #1
 8009446:	d1c2      	bne.n	80093ce <_printf_float+0x2f2>
 8009448:	e6a3      	b.n	8009192 <_printf_float+0xb6>
 800944a:	2301      	movs	r3, #1
 800944c:	4631      	mov	r1, r6
 800944e:	4628      	mov	r0, r5
 8009450:	9206      	str	r2, [sp, #24]
 8009452:	47b8      	blx	r7
 8009454:	3001      	adds	r0, #1
 8009456:	f43f ae9c 	beq.w	8009192 <_printf_float+0xb6>
 800945a:	9a06      	ldr	r2, [sp, #24]
 800945c:	f10b 0b01 	add.w	fp, fp, #1
 8009460:	e7bb      	b.n	80093da <_printf_float+0x2fe>
 8009462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009466:	4631      	mov	r1, r6
 8009468:	4628      	mov	r0, r5
 800946a:	47b8      	blx	r7
 800946c:	3001      	adds	r0, #1
 800946e:	d1c0      	bne.n	80093f2 <_printf_float+0x316>
 8009470:	e68f      	b.n	8009192 <_printf_float+0xb6>
 8009472:	9a06      	ldr	r2, [sp, #24]
 8009474:	464b      	mov	r3, r9
 8009476:	4442      	add	r2, r8
 8009478:	4631      	mov	r1, r6
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	d1c3      	bne.n	800940a <_printf_float+0x32e>
 8009482:	e686      	b.n	8009192 <_printf_float+0xb6>
 8009484:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009488:	f1ba 0f01 	cmp.w	sl, #1
 800948c:	dc01      	bgt.n	8009492 <_printf_float+0x3b6>
 800948e:	07db      	lsls	r3, r3, #31
 8009490:	d536      	bpl.n	8009500 <_printf_float+0x424>
 8009492:	2301      	movs	r3, #1
 8009494:	4642      	mov	r2, r8
 8009496:	4631      	mov	r1, r6
 8009498:	4628      	mov	r0, r5
 800949a:	47b8      	blx	r7
 800949c:	3001      	adds	r0, #1
 800949e:	f43f ae78 	beq.w	8009192 <_printf_float+0xb6>
 80094a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094a6:	4631      	mov	r1, r6
 80094a8:	4628      	mov	r0, r5
 80094aa:	47b8      	blx	r7
 80094ac:	3001      	adds	r0, #1
 80094ae:	f43f ae70 	beq.w	8009192 <_printf_float+0xb6>
 80094b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80094b6:	2200      	movs	r2, #0
 80094b8:	2300      	movs	r3, #0
 80094ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094be:	f7f7 fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 80094c2:	b9c0      	cbnz	r0, 80094f6 <_printf_float+0x41a>
 80094c4:	4653      	mov	r3, sl
 80094c6:	f108 0201 	add.w	r2, r8, #1
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	d10c      	bne.n	80094ee <_printf_float+0x412>
 80094d4:	e65d      	b.n	8009192 <_printf_float+0xb6>
 80094d6:	2301      	movs	r3, #1
 80094d8:	465a      	mov	r2, fp
 80094da:	4631      	mov	r1, r6
 80094dc:	4628      	mov	r0, r5
 80094de:	47b8      	blx	r7
 80094e0:	3001      	adds	r0, #1
 80094e2:	f43f ae56 	beq.w	8009192 <_printf_float+0xb6>
 80094e6:	f108 0801 	add.w	r8, r8, #1
 80094ea:	45d0      	cmp	r8, sl
 80094ec:	dbf3      	blt.n	80094d6 <_printf_float+0x3fa>
 80094ee:	464b      	mov	r3, r9
 80094f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80094f4:	e6df      	b.n	80092b6 <_printf_float+0x1da>
 80094f6:	f04f 0800 	mov.w	r8, #0
 80094fa:	f104 0b1a 	add.w	fp, r4, #26
 80094fe:	e7f4      	b.n	80094ea <_printf_float+0x40e>
 8009500:	2301      	movs	r3, #1
 8009502:	4642      	mov	r2, r8
 8009504:	e7e1      	b.n	80094ca <_printf_float+0x3ee>
 8009506:	2301      	movs	r3, #1
 8009508:	464a      	mov	r2, r9
 800950a:	4631      	mov	r1, r6
 800950c:	4628      	mov	r0, r5
 800950e:	47b8      	blx	r7
 8009510:	3001      	adds	r0, #1
 8009512:	f43f ae3e 	beq.w	8009192 <_printf_float+0xb6>
 8009516:	f108 0801 	add.w	r8, r8, #1
 800951a:	68e3      	ldr	r3, [r4, #12]
 800951c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800951e:	1a5b      	subs	r3, r3, r1
 8009520:	4543      	cmp	r3, r8
 8009522:	dcf0      	bgt.n	8009506 <_printf_float+0x42a>
 8009524:	e6fc      	b.n	8009320 <_printf_float+0x244>
 8009526:	f04f 0800 	mov.w	r8, #0
 800952a:	f104 0919 	add.w	r9, r4, #25
 800952e:	e7f4      	b.n	800951a <_printf_float+0x43e>

08009530 <_printf_common>:
 8009530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009534:	4616      	mov	r6, r2
 8009536:	4698      	mov	r8, r3
 8009538:	688a      	ldr	r2, [r1, #8]
 800953a:	690b      	ldr	r3, [r1, #16]
 800953c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009540:	4293      	cmp	r3, r2
 8009542:	bfb8      	it	lt
 8009544:	4613      	movlt	r3, r2
 8009546:	6033      	str	r3, [r6, #0]
 8009548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800954c:	4607      	mov	r7, r0
 800954e:	460c      	mov	r4, r1
 8009550:	b10a      	cbz	r2, 8009556 <_printf_common+0x26>
 8009552:	3301      	adds	r3, #1
 8009554:	6033      	str	r3, [r6, #0]
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	0699      	lsls	r1, r3, #26
 800955a:	bf42      	ittt	mi
 800955c:	6833      	ldrmi	r3, [r6, #0]
 800955e:	3302      	addmi	r3, #2
 8009560:	6033      	strmi	r3, [r6, #0]
 8009562:	6825      	ldr	r5, [r4, #0]
 8009564:	f015 0506 	ands.w	r5, r5, #6
 8009568:	d106      	bne.n	8009578 <_printf_common+0x48>
 800956a:	f104 0a19 	add.w	sl, r4, #25
 800956e:	68e3      	ldr	r3, [r4, #12]
 8009570:	6832      	ldr	r2, [r6, #0]
 8009572:	1a9b      	subs	r3, r3, r2
 8009574:	42ab      	cmp	r3, r5
 8009576:	dc26      	bgt.n	80095c6 <_printf_common+0x96>
 8009578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800957c:	6822      	ldr	r2, [r4, #0]
 800957e:	3b00      	subs	r3, #0
 8009580:	bf18      	it	ne
 8009582:	2301      	movne	r3, #1
 8009584:	0692      	lsls	r2, r2, #26
 8009586:	d42b      	bmi.n	80095e0 <_printf_common+0xb0>
 8009588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800958c:	4641      	mov	r1, r8
 800958e:	4638      	mov	r0, r7
 8009590:	47c8      	blx	r9
 8009592:	3001      	adds	r0, #1
 8009594:	d01e      	beq.n	80095d4 <_printf_common+0xa4>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	6922      	ldr	r2, [r4, #16]
 800959a:	f003 0306 	and.w	r3, r3, #6
 800959e:	2b04      	cmp	r3, #4
 80095a0:	bf02      	ittt	eq
 80095a2:	68e5      	ldreq	r5, [r4, #12]
 80095a4:	6833      	ldreq	r3, [r6, #0]
 80095a6:	1aed      	subeq	r5, r5, r3
 80095a8:	68a3      	ldr	r3, [r4, #8]
 80095aa:	bf0c      	ite	eq
 80095ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095b0:	2500      	movne	r5, #0
 80095b2:	4293      	cmp	r3, r2
 80095b4:	bfc4      	itt	gt
 80095b6:	1a9b      	subgt	r3, r3, r2
 80095b8:	18ed      	addgt	r5, r5, r3
 80095ba:	2600      	movs	r6, #0
 80095bc:	341a      	adds	r4, #26
 80095be:	42b5      	cmp	r5, r6
 80095c0:	d11a      	bne.n	80095f8 <_printf_common+0xc8>
 80095c2:	2000      	movs	r0, #0
 80095c4:	e008      	b.n	80095d8 <_printf_common+0xa8>
 80095c6:	2301      	movs	r3, #1
 80095c8:	4652      	mov	r2, sl
 80095ca:	4641      	mov	r1, r8
 80095cc:	4638      	mov	r0, r7
 80095ce:	47c8      	blx	r9
 80095d0:	3001      	adds	r0, #1
 80095d2:	d103      	bne.n	80095dc <_printf_common+0xac>
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095dc:	3501      	adds	r5, #1
 80095de:	e7c6      	b.n	800956e <_printf_common+0x3e>
 80095e0:	18e1      	adds	r1, r4, r3
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	2030      	movs	r0, #48	@ 0x30
 80095e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095ea:	4422      	add	r2, r4
 80095ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095f4:	3302      	adds	r3, #2
 80095f6:	e7c7      	b.n	8009588 <_printf_common+0x58>
 80095f8:	2301      	movs	r3, #1
 80095fa:	4622      	mov	r2, r4
 80095fc:	4641      	mov	r1, r8
 80095fe:	4638      	mov	r0, r7
 8009600:	47c8      	blx	r9
 8009602:	3001      	adds	r0, #1
 8009604:	d0e6      	beq.n	80095d4 <_printf_common+0xa4>
 8009606:	3601      	adds	r6, #1
 8009608:	e7d9      	b.n	80095be <_printf_common+0x8e>
	...

0800960c <_printf_i>:
 800960c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009610:	7e0f      	ldrb	r7, [r1, #24]
 8009612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009614:	2f78      	cmp	r7, #120	@ 0x78
 8009616:	4691      	mov	r9, r2
 8009618:	4680      	mov	r8, r0
 800961a:	460c      	mov	r4, r1
 800961c:	469a      	mov	sl, r3
 800961e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009622:	d807      	bhi.n	8009634 <_printf_i+0x28>
 8009624:	2f62      	cmp	r7, #98	@ 0x62
 8009626:	d80a      	bhi.n	800963e <_printf_i+0x32>
 8009628:	2f00      	cmp	r7, #0
 800962a:	f000 80d2 	beq.w	80097d2 <_printf_i+0x1c6>
 800962e:	2f58      	cmp	r7, #88	@ 0x58
 8009630:	f000 80b9 	beq.w	80097a6 <_printf_i+0x19a>
 8009634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800963c:	e03a      	b.n	80096b4 <_printf_i+0xa8>
 800963e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009642:	2b15      	cmp	r3, #21
 8009644:	d8f6      	bhi.n	8009634 <_printf_i+0x28>
 8009646:	a101      	add	r1, pc, #4	@ (adr r1, 800964c <_printf_i+0x40>)
 8009648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800964c:	080096a5 	.word	0x080096a5
 8009650:	080096b9 	.word	0x080096b9
 8009654:	08009635 	.word	0x08009635
 8009658:	08009635 	.word	0x08009635
 800965c:	08009635 	.word	0x08009635
 8009660:	08009635 	.word	0x08009635
 8009664:	080096b9 	.word	0x080096b9
 8009668:	08009635 	.word	0x08009635
 800966c:	08009635 	.word	0x08009635
 8009670:	08009635 	.word	0x08009635
 8009674:	08009635 	.word	0x08009635
 8009678:	080097b9 	.word	0x080097b9
 800967c:	080096e3 	.word	0x080096e3
 8009680:	08009773 	.word	0x08009773
 8009684:	08009635 	.word	0x08009635
 8009688:	08009635 	.word	0x08009635
 800968c:	080097db 	.word	0x080097db
 8009690:	08009635 	.word	0x08009635
 8009694:	080096e3 	.word	0x080096e3
 8009698:	08009635 	.word	0x08009635
 800969c:	08009635 	.word	0x08009635
 80096a0:	0800977b 	.word	0x0800977b
 80096a4:	6833      	ldr	r3, [r6, #0]
 80096a6:	1d1a      	adds	r2, r3, #4
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6032      	str	r2, [r6, #0]
 80096ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096b4:	2301      	movs	r3, #1
 80096b6:	e09d      	b.n	80097f4 <_printf_i+0x1e8>
 80096b8:	6833      	ldr	r3, [r6, #0]
 80096ba:	6820      	ldr	r0, [r4, #0]
 80096bc:	1d19      	adds	r1, r3, #4
 80096be:	6031      	str	r1, [r6, #0]
 80096c0:	0606      	lsls	r6, r0, #24
 80096c2:	d501      	bpl.n	80096c8 <_printf_i+0xbc>
 80096c4:	681d      	ldr	r5, [r3, #0]
 80096c6:	e003      	b.n	80096d0 <_printf_i+0xc4>
 80096c8:	0645      	lsls	r5, r0, #25
 80096ca:	d5fb      	bpl.n	80096c4 <_printf_i+0xb8>
 80096cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096d0:	2d00      	cmp	r5, #0
 80096d2:	da03      	bge.n	80096dc <_printf_i+0xd0>
 80096d4:	232d      	movs	r3, #45	@ 0x2d
 80096d6:	426d      	negs	r5, r5
 80096d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096dc:	4859      	ldr	r0, [pc, #356]	@ (8009844 <_printf_i+0x238>)
 80096de:	230a      	movs	r3, #10
 80096e0:	e011      	b.n	8009706 <_printf_i+0xfa>
 80096e2:	6821      	ldr	r1, [r4, #0]
 80096e4:	6833      	ldr	r3, [r6, #0]
 80096e6:	0608      	lsls	r0, r1, #24
 80096e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80096ec:	d402      	bmi.n	80096f4 <_printf_i+0xe8>
 80096ee:	0649      	lsls	r1, r1, #25
 80096f0:	bf48      	it	mi
 80096f2:	b2ad      	uxthmi	r5, r5
 80096f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80096f6:	4853      	ldr	r0, [pc, #332]	@ (8009844 <_printf_i+0x238>)
 80096f8:	6033      	str	r3, [r6, #0]
 80096fa:	bf14      	ite	ne
 80096fc:	230a      	movne	r3, #10
 80096fe:	2308      	moveq	r3, #8
 8009700:	2100      	movs	r1, #0
 8009702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009706:	6866      	ldr	r6, [r4, #4]
 8009708:	60a6      	str	r6, [r4, #8]
 800970a:	2e00      	cmp	r6, #0
 800970c:	bfa2      	ittt	ge
 800970e:	6821      	ldrge	r1, [r4, #0]
 8009710:	f021 0104 	bicge.w	r1, r1, #4
 8009714:	6021      	strge	r1, [r4, #0]
 8009716:	b90d      	cbnz	r5, 800971c <_printf_i+0x110>
 8009718:	2e00      	cmp	r6, #0
 800971a:	d04b      	beq.n	80097b4 <_printf_i+0x1a8>
 800971c:	4616      	mov	r6, r2
 800971e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009722:	fb03 5711 	mls	r7, r3, r1, r5
 8009726:	5dc7      	ldrb	r7, [r0, r7]
 8009728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800972c:	462f      	mov	r7, r5
 800972e:	42bb      	cmp	r3, r7
 8009730:	460d      	mov	r5, r1
 8009732:	d9f4      	bls.n	800971e <_printf_i+0x112>
 8009734:	2b08      	cmp	r3, #8
 8009736:	d10b      	bne.n	8009750 <_printf_i+0x144>
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	07df      	lsls	r7, r3, #31
 800973c:	d508      	bpl.n	8009750 <_printf_i+0x144>
 800973e:	6923      	ldr	r3, [r4, #16]
 8009740:	6861      	ldr	r1, [r4, #4]
 8009742:	4299      	cmp	r1, r3
 8009744:	bfde      	ittt	le
 8009746:	2330      	movle	r3, #48	@ 0x30
 8009748:	f806 3c01 	strble.w	r3, [r6, #-1]
 800974c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009750:	1b92      	subs	r2, r2, r6
 8009752:	6122      	str	r2, [r4, #16]
 8009754:	f8cd a000 	str.w	sl, [sp]
 8009758:	464b      	mov	r3, r9
 800975a:	aa03      	add	r2, sp, #12
 800975c:	4621      	mov	r1, r4
 800975e:	4640      	mov	r0, r8
 8009760:	f7ff fee6 	bl	8009530 <_printf_common>
 8009764:	3001      	adds	r0, #1
 8009766:	d14a      	bne.n	80097fe <_printf_i+0x1f2>
 8009768:	f04f 30ff 	mov.w	r0, #4294967295
 800976c:	b004      	add	sp, #16
 800976e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	f043 0320 	orr.w	r3, r3, #32
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	4833      	ldr	r0, [pc, #204]	@ (8009848 <_printf_i+0x23c>)
 800977c:	2778      	movs	r7, #120	@ 0x78
 800977e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	6831      	ldr	r1, [r6, #0]
 8009786:	061f      	lsls	r7, r3, #24
 8009788:	f851 5b04 	ldr.w	r5, [r1], #4
 800978c:	d402      	bmi.n	8009794 <_printf_i+0x188>
 800978e:	065f      	lsls	r7, r3, #25
 8009790:	bf48      	it	mi
 8009792:	b2ad      	uxthmi	r5, r5
 8009794:	6031      	str	r1, [r6, #0]
 8009796:	07d9      	lsls	r1, r3, #31
 8009798:	bf44      	itt	mi
 800979a:	f043 0320 	orrmi.w	r3, r3, #32
 800979e:	6023      	strmi	r3, [r4, #0]
 80097a0:	b11d      	cbz	r5, 80097aa <_printf_i+0x19e>
 80097a2:	2310      	movs	r3, #16
 80097a4:	e7ac      	b.n	8009700 <_printf_i+0xf4>
 80097a6:	4827      	ldr	r0, [pc, #156]	@ (8009844 <_printf_i+0x238>)
 80097a8:	e7e9      	b.n	800977e <_printf_i+0x172>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	f023 0320 	bic.w	r3, r3, #32
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	e7f6      	b.n	80097a2 <_printf_i+0x196>
 80097b4:	4616      	mov	r6, r2
 80097b6:	e7bd      	b.n	8009734 <_printf_i+0x128>
 80097b8:	6833      	ldr	r3, [r6, #0]
 80097ba:	6825      	ldr	r5, [r4, #0]
 80097bc:	6961      	ldr	r1, [r4, #20]
 80097be:	1d18      	adds	r0, r3, #4
 80097c0:	6030      	str	r0, [r6, #0]
 80097c2:	062e      	lsls	r6, r5, #24
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	d501      	bpl.n	80097cc <_printf_i+0x1c0>
 80097c8:	6019      	str	r1, [r3, #0]
 80097ca:	e002      	b.n	80097d2 <_printf_i+0x1c6>
 80097cc:	0668      	lsls	r0, r5, #25
 80097ce:	d5fb      	bpl.n	80097c8 <_printf_i+0x1bc>
 80097d0:	8019      	strh	r1, [r3, #0]
 80097d2:	2300      	movs	r3, #0
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	4616      	mov	r6, r2
 80097d8:	e7bc      	b.n	8009754 <_printf_i+0x148>
 80097da:	6833      	ldr	r3, [r6, #0]
 80097dc:	1d1a      	adds	r2, r3, #4
 80097de:	6032      	str	r2, [r6, #0]
 80097e0:	681e      	ldr	r6, [r3, #0]
 80097e2:	6862      	ldr	r2, [r4, #4]
 80097e4:	2100      	movs	r1, #0
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7f6 fcf2 	bl	80001d0 <memchr>
 80097ec:	b108      	cbz	r0, 80097f2 <_printf_i+0x1e6>
 80097ee:	1b80      	subs	r0, r0, r6
 80097f0:	6060      	str	r0, [r4, #4]
 80097f2:	6863      	ldr	r3, [r4, #4]
 80097f4:	6123      	str	r3, [r4, #16]
 80097f6:	2300      	movs	r3, #0
 80097f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097fc:	e7aa      	b.n	8009754 <_printf_i+0x148>
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	4632      	mov	r2, r6
 8009802:	4649      	mov	r1, r9
 8009804:	4640      	mov	r0, r8
 8009806:	47d0      	blx	sl
 8009808:	3001      	adds	r0, #1
 800980a:	d0ad      	beq.n	8009768 <_printf_i+0x15c>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	079b      	lsls	r3, r3, #30
 8009810:	d413      	bmi.n	800983a <_printf_i+0x22e>
 8009812:	68e0      	ldr	r0, [r4, #12]
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	4298      	cmp	r0, r3
 8009818:	bfb8      	it	lt
 800981a:	4618      	movlt	r0, r3
 800981c:	e7a6      	b.n	800976c <_printf_i+0x160>
 800981e:	2301      	movs	r3, #1
 8009820:	4632      	mov	r2, r6
 8009822:	4649      	mov	r1, r9
 8009824:	4640      	mov	r0, r8
 8009826:	47d0      	blx	sl
 8009828:	3001      	adds	r0, #1
 800982a:	d09d      	beq.n	8009768 <_printf_i+0x15c>
 800982c:	3501      	adds	r5, #1
 800982e:	68e3      	ldr	r3, [r4, #12]
 8009830:	9903      	ldr	r1, [sp, #12]
 8009832:	1a5b      	subs	r3, r3, r1
 8009834:	42ab      	cmp	r3, r5
 8009836:	dcf2      	bgt.n	800981e <_printf_i+0x212>
 8009838:	e7eb      	b.n	8009812 <_printf_i+0x206>
 800983a:	2500      	movs	r5, #0
 800983c:	f104 0619 	add.w	r6, r4, #25
 8009840:	e7f5      	b.n	800982e <_printf_i+0x222>
 8009842:	bf00      	nop
 8009844:	0800bab2 	.word	0x0800bab2
 8009848:	0800bac3 	.word	0x0800bac3

0800984c <std>:
 800984c:	2300      	movs	r3, #0
 800984e:	b510      	push	{r4, lr}
 8009850:	4604      	mov	r4, r0
 8009852:	e9c0 3300 	strd	r3, r3, [r0]
 8009856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800985a:	6083      	str	r3, [r0, #8]
 800985c:	8181      	strh	r1, [r0, #12]
 800985e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009860:	81c2      	strh	r2, [r0, #14]
 8009862:	6183      	str	r3, [r0, #24]
 8009864:	4619      	mov	r1, r3
 8009866:	2208      	movs	r2, #8
 8009868:	305c      	adds	r0, #92	@ 0x5c
 800986a:	f000 f9f9 	bl	8009c60 <memset>
 800986e:	4b0d      	ldr	r3, [pc, #52]	@ (80098a4 <std+0x58>)
 8009870:	6263      	str	r3, [r4, #36]	@ 0x24
 8009872:	4b0d      	ldr	r3, [pc, #52]	@ (80098a8 <std+0x5c>)
 8009874:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009876:	4b0d      	ldr	r3, [pc, #52]	@ (80098ac <std+0x60>)
 8009878:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800987a:	4b0d      	ldr	r3, [pc, #52]	@ (80098b0 <std+0x64>)
 800987c:	6323      	str	r3, [r4, #48]	@ 0x30
 800987e:	4b0d      	ldr	r3, [pc, #52]	@ (80098b4 <std+0x68>)
 8009880:	6224      	str	r4, [r4, #32]
 8009882:	429c      	cmp	r4, r3
 8009884:	d006      	beq.n	8009894 <std+0x48>
 8009886:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800988a:	4294      	cmp	r4, r2
 800988c:	d002      	beq.n	8009894 <std+0x48>
 800988e:	33d0      	adds	r3, #208	@ 0xd0
 8009890:	429c      	cmp	r4, r3
 8009892:	d105      	bne.n	80098a0 <std+0x54>
 8009894:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800989c:	f000 ba5c 	b.w	8009d58 <__retarget_lock_init_recursive>
 80098a0:	bd10      	pop	{r4, pc}
 80098a2:	bf00      	nop
 80098a4:	08009ab1 	.word	0x08009ab1
 80098a8:	08009ad3 	.word	0x08009ad3
 80098ac:	08009b0b 	.word	0x08009b0b
 80098b0:	08009b2f 	.word	0x08009b2f
 80098b4:	200017d0 	.word	0x200017d0

080098b8 <stdio_exit_handler>:
 80098b8:	4a02      	ldr	r2, [pc, #8]	@ (80098c4 <stdio_exit_handler+0xc>)
 80098ba:	4903      	ldr	r1, [pc, #12]	@ (80098c8 <stdio_exit_handler+0x10>)
 80098bc:	4803      	ldr	r0, [pc, #12]	@ (80098cc <stdio_exit_handler+0x14>)
 80098be:	f000 b869 	b.w	8009994 <_fwalk_sglue>
 80098c2:	bf00      	nop
 80098c4:	2000002c 	.word	0x2000002c
 80098c8:	0800b699 	.word	0x0800b699
 80098cc:	2000003c 	.word	0x2000003c

080098d0 <cleanup_stdio>:
 80098d0:	6841      	ldr	r1, [r0, #4]
 80098d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009904 <cleanup_stdio+0x34>)
 80098d4:	4299      	cmp	r1, r3
 80098d6:	b510      	push	{r4, lr}
 80098d8:	4604      	mov	r4, r0
 80098da:	d001      	beq.n	80098e0 <cleanup_stdio+0x10>
 80098dc:	f001 fedc 	bl	800b698 <_fflush_r>
 80098e0:	68a1      	ldr	r1, [r4, #8]
 80098e2:	4b09      	ldr	r3, [pc, #36]	@ (8009908 <cleanup_stdio+0x38>)
 80098e4:	4299      	cmp	r1, r3
 80098e6:	d002      	beq.n	80098ee <cleanup_stdio+0x1e>
 80098e8:	4620      	mov	r0, r4
 80098ea:	f001 fed5 	bl	800b698 <_fflush_r>
 80098ee:	68e1      	ldr	r1, [r4, #12]
 80098f0:	4b06      	ldr	r3, [pc, #24]	@ (800990c <cleanup_stdio+0x3c>)
 80098f2:	4299      	cmp	r1, r3
 80098f4:	d004      	beq.n	8009900 <cleanup_stdio+0x30>
 80098f6:	4620      	mov	r0, r4
 80098f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098fc:	f001 becc 	b.w	800b698 <_fflush_r>
 8009900:	bd10      	pop	{r4, pc}
 8009902:	bf00      	nop
 8009904:	200017d0 	.word	0x200017d0
 8009908:	20001838 	.word	0x20001838
 800990c:	200018a0 	.word	0x200018a0

08009910 <global_stdio_init.part.0>:
 8009910:	b510      	push	{r4, lr}
 8009912:	4b0b      	ldr	r3, [pc, #44]	@ (8009940 <global_stdio_init.part.0+0x30>)
 8009914:	4c0b      	ldr	r4, [pc, #44]	@ (8009944 <global_stdio_init.part.0+0x34>)
 8009916:	4a0c      	ldr	r2, [pc, #48]	@ (8009948 <global_stdio_init.part.0+0x38>)
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	4620      	mov	r0, r4
 800991c:	2200      	movs	r2, #0
 800991e:	2104      	movs	r1, #4
 8009920:	f7ff ff94 	bl	800984c <std>
 8009924:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009928:	2201      	movs	r2, #1
 800992a:	2109      	movs	r1, #9
 800992c:	f7ff ff8e 	bl	800984c <std>
 8009930:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009934:	2202      	movs	r2, #2
 8009936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800993a:	2112      	movs	r1, #18
 800993c:	f7ff bf86 	b.w	800984c <std>
 8009940:	20001908 	.word	0x20001908
 8009944:	200017d0 	.word	0x200017d0
 8009948:	080098b9 	.word	0x080098b9

0800994c <__sfp_lock_acquire>:
 800994c:	4801      	ldr	r0, [pc, #4]	@ (8009954 <__sfp_lock_acquire+0x8>)
 800994e:	f000 ba04 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 8009952:	bf00      	nop
 8009954:	20001911 	.word	0x20001911

08009958 <__sfp_lock_release>:
 8009958:	4801      	ldr	r0, [pc, #4]	@ (8009960 <__sfp_lock_release+0x8>)
 800995a:	f000 b9ff 	b.w	8009d5c <__retarget_lock_release_recursive>
 800995e:	bf00      	nop
 8009960:	20001911 	.word	0x20001911

08009964 <__sinit>:
 8009964:	b510      	push	{r4, lr}
 8009966:	4604      	mov	r4, r0
 8009968:	f7ff fff0 	bl	800994c <__sfp_lock_acquire>
 800996c:	6a23      	ldr	r3, [r4, #32]
 800996e:	b11b      	cbz	r3, 8009978 <__sinit+0x14>
 8009970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009974:	f7ff bff0 	b.w	8009958 <__sfp_lock_release>
 8009978:	4b04      	ldr	r3, [pc, #16]	@ (800998c <__sinit+0x28>)
 800997a:	6223      	str	r3, [r4, #32]
 800997c:	4b04      	ldr	r3, [pc, #16]	@ (8009990 <__sinit+0x2c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1f5      	bne.n	8009970 <__sinit+0xc>
 8009984:	f7ff ffc4 	bl	8009910 <global_stdio_init.part.0>
 8009988:	e7f2      	b.n	8009970 <__sinit+0xc>
 800998a:	bf00      	nop
 800998c:	080098d1 	.word	0x080098d1
 8009990:	20001908 	.word	0x20001908

08009994 <_fwalk_sglue>:
 8009994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009998:	4607      	mov	r7, r0
 800999a:	4688      	mov	r8, r1
 800999c:	4614      	mov	r4, r2
 800999e:	2600      	movs	r6, #0
 80099a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099a4:	f1b9 0901 	subs.w	r9, r9, #1
 80099a8:	d505      	bpl.n	80099b6 <_fwalk_sglue+0x22>
 80099aa:	6824      	ldr	r4, [r4, #0]
 80099ac:	2c00      	cmp	r4, #0
 80099ae:	d1f7      	bne.n	80099a0 <_fwalk_sglue+0xc>
 80099b0:	4630      	mov	r0, r6
 80099b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b6:	89ab      	ldrh	r3, [r5, #12]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d907      	bls.n	80099cc <_fwalk_sglue+0x38>
 80099bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099c0:	3301      	adds	r3, #1
 80099c2:	d003      	beq.n	80099cc <_fwalk_sglue+0x38>
 80099c4:	4629      	mov	r1, r5
 80099c6:	4638      	mov	r0, r7
 80099c8:	47c0      	blx	r8
 80099ca:	4306      	orrs	r6, r0
 80099cc:	3568      	adds	r5, #104	@ 0x68
 80099ce:	e7e9      	b.n	80099a4 <_fwalk_sglue+0x10>

080099d0 <iprintf>:
 80099d0:	b40f      	push	{r0, r1, r2, r3}
 80099d2:	b507      	push	{r0, r1, r2, lr}
 80099d4:	4906      	ldr	r1, [pc, #24]	@ (80099f0 <iprintf+0x20>)
 80099d6:	ab04      	add	r3, sp, #16
 80099d8:	6808      	ldr	r0, [r1, #0]
 80099da:	f853 2b04 	ldr.w	r2, [r3], #4
 80099de:	6881      	ldr	r1, [r0, #8]
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	f001 fcbd 	bl	800b360 <_vfiprintf_r>
 80099e6:	b003      	add	sp, #12
 80099e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099ec:	b004      	add	sp, #16
 80099ee:	4770      	bx	lr
 80099f0:	20000038 	.word	0x20000038

080099f4 <_puts_r>:
 80099f4:	6a03      	ldr	r3, [r0, #32]
 80099f6:	b570      	push	{r4, r5, r6, lr}
 80099f8:	6884      	ldr	r4, [r0, #8]
 80099fa:	4605      	mov	r5, r0
 80099fc:	460e      	mov	r6, r1
 80099fe:	b90b      	cbnz	r3, 8009a04 <_puts_r+0x10>
 8009a00:	f7ff ffb0 	bl	8009964 <__sinit>
 8009a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a06:	07db      	lsls	r3, r3, #31
 8009a08:	d405      	bmi.n	8009a16 <_puts_r+0x22>
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	0598      	lsls	r0, r3, #22
 8009a0e:	d402      	bmi.n	8009a16 <_puts_r+0x22>
 8009a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a12:	f000 f9a2 	bl	8009d5a <__retarget_lock_acquire_recursive>
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	0719      	lsls	r1, r3, #28
 8009a1a:	d502      	bpl.n	8009a22 <_puts_r+0x2e>
 8009a1c:	6923      	ldr	r3, [r4, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d135      	bne.n	8009a8e <_puts_r+0x9a>
 8009a22:	4621      	mov	r1, r4
 8009a24:	4628      	mov	r0, r5
 8009a26:	f000 f8c5 	bl	8009bb4 <__swsetup_r>
 8009a2a:	b380      	cbz	r0, 8009a8e <_puts_r+0x9a>
 8009a2c:	f04f 35ff 	mov.w	r5, #4294967295
 8009a30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a32:	07da      	lsls	r2, r3, #31
 8009a34:	d405      	bmi.n	8009a42 <_puts_r+0x4e>
 8009a36:	89a3      	ldrh	r3, [r4, #12]
 8009a38:	059b      	lsls	r3, r3, #22
 8009a3a:	d402      	bmi.n	8009a42 <_puts_r+0x4e>
 8009a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a3e:	f000 f98d 	bl	8009d5c <__retarget_lock_release_recursive>
 8009a42:	4628      	mov	r0, r5
 8009a44:	bd70      	pop	{r4, r5, r6, pc}
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	da04      	bge.n	8009a54 <_puts_r+0x60>
 8009a4a:	69a2      	ldr	r2, [r4, #24]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	dc17      	bgt.n	8009a80 <_puts_r+0x8c>
 8009a50:	290a      	cmp	r1, #10
 8009a52:	d015      	beq.n	8009a80 <_puts_r+0x8c>
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	1c5a      	adds	r2, r3, #1
 8009a58:	6022      	str	r2, [r4, #0]
 8009a5a:	7019      	strb	r1, [r3, #0]
 8009a5c:	68a3      	ldr	r3, [r4, #8]
 8009a5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a62:	3b01      	subs	r3, #1
 8009a64:	60a3      	str	r3, [r4, #8]
 8009a66:	2900      	cmp	r1, #0
 8009a68:	d1ed      	bne.n	8009a46 <_puts_r+0x52>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	da11      	bge.n	8009a92 <_puts_r+0x9e>
 8009a6e:	4622      	mov	r2, r4
 8009a70:	210a      	movs	r1, #10
 8009a72:	4628      	mov	r0, r5
 8009a74:	f000 f85f 	bl	8009b36 <__swbuf_r>
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d0d7      	beq.n	8009a2c <_puts_r+0x38>
 8009a7c:	250a      	movs	r5, #10
 8009a7e:	e7d7      	b.n	8009a30 <_puts_r+0x3c>
 8009a80:	4622      	mov	r2, r4
 8009a82:	4628      	mov	r0, r5
 8009a84:	f000 f857 	bl	8009b36 <__swbuf_r>
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d1e7      	bne.n	8009a5c <_puts_r+0x68>
 8009a8c:	e7ce      	b.n	8009a2c <_puts_r+0x38>
 8009a8e:	3e01      	subs	r6, #1
 8009a90:	e7e4      	b.n	8009a5c <_puts_r+0x68>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	6022      	str	r2, [r4, #0]
 8009a98:	220a      	movs	r2, #10
 8009a9a:	701a      	strb	r2, [r3, #0]
 8009a9c:	e7ee      	b.n	8009a7c <_puts_r+0x88>
	...

08009aa0 <puts>:
 8009aa0:	4b02      	ldr	r3, [pc, #8]	@ (8009aac <puts+0xc>)
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	f7ff bfa5 	b.w	80099f4 <_puts_r>
 8009aaa:	bf00      	nop
 8009aac:	20000038 	.word	0x20000038

08009ab0 <__sread>:
 8009ab0:	b510      	push	{r4, lr}
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab8:	f000 f900 	bl	8009cbc <_read_r>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	bfab      	itete	ge
 8009ac0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ac2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ac4:	181b      	addge	r3, r3, r0
 8009ac6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009aca:	bfac      	ite	ge
 8009acc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009ace:	81a3      	strhlt	r3, [r4, #12]
 8009ad0:	bd10      	pop	{r4, pc}

08009ad2 <__swrite>:
 8009ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad6:	461f      	mov	r7, r3
 8009ad8:	898b      	ldrh	r3, [r1, #12]
 8009ada:	05db      	lsls	r3, r3, #23
 8009adc:	4605      	mov	r5, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	d505      	bpl.n	8009af0 <__swrite+0x1e>
 8009ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae8:	2302      	movs	r3, #2
 8009aea:	2200      	movs	r2, #0
 8009aec:	f000 f8d4 	bl	8009c98 <_lseek_r>
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009af6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009afa:	81a3      	strh	r3, [r4, #12]
 8009afc:	4632      	mov	r2, r6
 8009afe:	463b      	mov	r3, r7
 8009b00:	4628      	mov	r0, r5
 8009b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b06:	f000 b8eb 	b.w	8009ce0 <_write_r>

08009b0a <__sseek>:
 8009b0a:	b510      	push	{r4, lr}
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b12:	f000 f8c1 	bl	8009c98 <_lseek_r>
 8009b16:	1c43      	adds	r3, r0, #1
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	bf15      	itete	ne
 8009b1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009b1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009b22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009b26:	81a3      	strheq	r3, [r4, #12]
 8009b28:	bf18      	it	ne
 8009b2a:	81a3      	strhne	r3, [r4, #12]
 8009b2c:	bd10      	pop	{r4, pc}

08009b2e <__sclose>:
 8009b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b32:	f000 b8a1 	b.w	8009c78 <_close_r>

08009b36 <__swbuf_r>:
 8009b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b38:	460e      	mov	r6, r1
 8009b3a:	4614      	mov	r4, r2
 8009b3c:	4605      	mov	r5, r0
 8009b3e:	b118      	cbz	r0, 8009b48 <__swbuf_r+0x12>
 8009b40:	6a03      	ldr	r3, [r0, #32]
 8009b42:	b90b      	cbnz	r3, 8009b48 <__swbuf_r+0x12>
 8009b44:	f7ff ff0e 	bl	8009964 <__sinit>
 8009b48:	69a3      	ldr	r3, [r4, #24]
 8009b4a:	60a3      	str	r3, [r4, #8]
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	071a      	lsls	r2, r3, #28
 8009b50:	d501      	bpl.n	8009b56 <__swbuf_r+0x20>
 8009b52:	6923      	ldr	r3, [r4, #16]
 8009b54:	b943      	cbnz	r3, 8009b68 <__swbuf_r+0x32>
 8009b56:	4621      	mov	r1, r4
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f000 f82b 	bl	8009bb4 <__swsetup_r>
 8009b5e:	b118      	cbz	r0, 8009b68 <__swbuf_r+0x32>
 8009b60:	f04f 37ff 	mov.w	r7, #4294967295
 8009b64:	4638      	mov	r0, r7
 8009b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	6922      	ldr	r2, [r4, #16]
 8009b6c:	1a98      	subs	r0, r3, r2
 8009b6e:	6963      	ldr	r3, [r4, #20]
 8009b70:	b2f6      	uxtb	r6, r6
 8009b72:	4283      	cmp	r3, r0
 8009b74:	4637      	mov	r7, r6
 8009b76:	dc05      	bgt.n	8009b84 <__swbuf_r+0x4e>
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f001 fd8c 	bl	800b698 <_fflush_r>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d1ed      	bne.n	8009b60 <__swbuf_r+0x2a>
 8009b84:	68a3      	ldr	r3, [r4, #8]
 8009b86:	3b01      	subs	r3, #1
 8009b88:	60a3      	str	r3, [r4, #8]
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	6022      	str	r2, [r4, #0]
 8009b90:	701e      	strb	r6, [r3, #0]
 8009b92:	6962      	ldr	r2, [r4, #20]
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d004      	beq.n	8009ba4 <__swbuf_r+0x6e>
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	07db      	lsls	r3, r3, #31
 8009b9e:	d5e1      	bpl.n	8009b64 <__swbuf_r+0x2e>
 8009ba0:	2e0a      	cmp	r6, #10
 8009ba2:	d1df      	bne.n	8009b64 <__swbuf_r+0x2e>
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f001 fd76 	bl	800b698 <_fflush_r>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d0d9      	beq.n	8009b64 <__swbuf_r+0x2e>
 8009bb0:	e7d6      	b.n	8009b60 <__swbuf_r+0x2a>
	...

08009bb4 <__swsetup_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4b29      	ldr	r3, [pc, #164]	@ (8009c5c <__swsetup_r+0xa8>)
 8009bb8:	4605      	mov	r5, r0
 8009bba:	6818      	ldr	r0, [r3, #0]
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	b118      	cbz	r0, 8009bc8 <__swsetup_r+0x14>
 8009bc0:	6a03      	ldr	r3, [r0, #32]
 8009bc2:	b90b      	cbnz	r3, 8009bc8 <__swsetup_r+0x14>
 8009bc4:	f7ff fece 	bl	8009964 <__sinit>
 8009bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bcc:	0719      	lsls	r1, r3, #28
 8009bce:	d422      	bmi.n	8009c16 <__swsetup_r+0x62>
 8009bd0:	06da      	lsls	r2, r3, #27
 8009bd2:	d407      	bmi.n	8009be4 <__swsetup_r+0x30>
 8009bd4:	2209      	movs	r2, #9
 8009bd6:	602a      	str	r2, [r5, #0]
 8009bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bdc:	81a3      	strh	r3, [r4, #12]
 8009bde:	f04f 30ff 	mov.w	r0, #4294967295
 8009be2:	e033      	b.n	8009c4c <__swsetup_r+0x98>
 8009be4:	0758      	lsls	r0, r3, #29
 8009be6:	d512      	bpl.n	8009c0e <__swsetup_r+0x5a>
 8009be8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bea:	b141      	cbz	r1, 8009bfe <__swsetup_r+0x4a>
 8009bec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	d002      	beq.n	8009bfa <__swsetup_r+0x46>
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	f000 ff07 	bl	800aa08 <_free_r>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	2300      	movs	r3, #0
 8009c08:	6063      	str	r3, [r4, #4]
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	f043 0308 	orr.w	r3, r3, #8
 8009c14:	81a3      	strh	r3, [r4, #12]
 8009c16:	6923      	ldr	r3, [r4, #16]
 8009c18:	b94b      	cbnz	r3, 8009c2e <__swsetup_r+0x7a>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c24:	d003      	beq.n	8009c2e <__swsetup_r+0x7a>
 8009c26:	4621      	mov	r1, r4
 8009c28:	4628      	mov	r0, r5
 8009c2a:	f001 fd83 	bl	800b734 <__smakebuf_r>
 8009c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c32:	f013 0201 	ands.w	r2, r3, #1
 8009c36:	d00a      	beq.n	8009c4e <__swsetup_r+0x9a>
 8009c38:	2200      	movs	r2, #0
 8009c3a:	60a2      	str	r2, [r4, #8]
 8009c3c:	6962      	ldr	r2, [r4, #20]
 8009c3e:	4252      	negs	r2, r2
 8009c40:	61a2      	str	r2, [r4, #24]
 8009c42:	6922      	ldr	r2, [r4, #16]
 8009c44:	b942      	cbnz	r2, 8009c58 <__swsetup_r+0xa4>
 8009c46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c4a:	d1c5      	bne.n	8009bd8 <__swsetup_r+0x24>
 8009c4c:	bd38      	pop	{r3, r4, r5, pc}
 8009c4e:	0799      	lsls	r1, r3, #30
 8009c50:	bf58      	it	pl
 8009c52:	6962      	ldrpl	r2, [r4, #20]
 8009c54:	60a2      	str	r2, [r4, #8]
 8009c56:	e7f4      	b.n	8009c42 <__swsetup_r+0x8e>
 8009c58:	2000      	movs	r0, #0
 8009c5a:	e7f7      	b.n	8009c4c <__swsetup_r+0x98>
 8009c5c:	20000038 	.word	0x20000038

08009c60 <memset>:
 8009c60:	4402      	add	r2, r0
 8009c62:	4603      	mov	r3, r0
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d100      	bne.n	8009c6a <memset+0xa>
 8009c68:	4770      	bx	lr
 8009c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c6e:	e7f9      	b.n	8009c64 <memset+0x4>

08009c70 <_localeconv_r>:
 8009c70:	4800      	ldr	r0, [pc, #0]	@ (8009c74 <_localeconv_r+0x4>)
 8009c72:	4770      	bx	lr
 8009c74:	20000178 	.word	0x20000178

08009c78 <_close_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4d06      	ldr	r5, [pc, #24]	@ (8009c94 <_close_r+0x1c>)
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4604      	mov	r4, r0
 8009c80:	4608      	mov	r0, r1
 8009c82:	602b      	str	r3, [r5, #0]
 8009c84:	f7f9 faa8 	bl	80031d8 <_close>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_close_r+0x1a>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_close_r+0x1a>
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	2000190c 	.word	0x2000190c

08009c98 <_lseek_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4d07      	ldr	r5, [pc, #28]	@ (8009cb8 <_lseek_r+0x20>)
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	4608      	mov	r0, r1
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	602a      	str	r2, [r5, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f7f9 fabd 	bl	8003226 <_lseek>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	d102      	bne.n	8009cb6 <_lseek_r+0x1e>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	b103      	cbz	r3, 8009cb6 <_lseek_r+0x1e>
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	2000190c 	.word	0x2000190c

08009cbc <_read_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4d07      	ldr	r5, [pc, #28]	@ (8009cdc <_read_r+0x20>)
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	4608      	mov	r0, r1
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	602a      	str	r2, [r5, #0]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f7f9 fa67 	bl	800319e <_read>
 8009cd0:	1c43      	adds	r3, r0, #1
 8009cd2:	d102      	bne.n	8009cda <_read_r+0x1e>
 8009cd4:	682b      	ldr	r3, [r5, #0]
 8009cd6:	b103      	cbz	r3, 8009cda <_read_r+0x1e>
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	2000190c 	.word	0x2000190c

08009ce0 <_write_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4d07      	ldr	r5, [pc, #28]	@ (8009d00 <_write_r+0x20>)
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	4611      	mov	r1, r2
 8009cea:	2200      	movs	r2, #0
 8009cec:	602a      	str	r2, [r5, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f7f8 fd4e 	bl	8002790 <_write>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	d102      	bne.n	8009cfe <_write_r+0x1e>
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	b103      	cbz	r3, 8009cfe <_write_r+0x1e>
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	2000190c 	.word	0x2000190c

08009d04 <__errno>:
 8009d04:	4b01      	ldr	r3, [pc, #4]	@ (8009d0c <__errno+0x8>)
 8009d06:	6818      	ldr	r0, [r3, #0]
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	20000038 	.word	0x20000038

08009d10 <__libc_init_array>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	4d0d      	ldr	r5, [pc, #52]	@ (8009d48 <__libc_init_array+0x38>)
 8009d14:	4c0d      	ldr	r4, [pc, #52]	@ (8009d4c <__libc_init_array+0x3c>)
 8009d16:	1b64      	subs	r4, r4, r5
 8009d18:	10a4      	asrs	r4, r4, #2
 8009d1a:	2600      	movs	r6, #0
 8009d1c:	42a6      	cmp	r6, r4
 8009d1e:	d109      	bne.n	8009d34 <__libc_init_array+0x24>
 8009d20:	4d0b      	ldr	r5, [pc, #44]	@ (8009d50 <__libc_init_array+0x40>)
 8009d22:	4c0c      	ldr	r4, [pc, #48]	@ (8009d54 <__libc_init_array+0x44>)
 8009d24:	f001 fe32 	bl	800b98c <_init>
 8009d28:	1b64      	subs	r4, r4, r5
 8009d2a:	10a4      	asrs	r4, r4, #2
 8009d2c:	2600      	movs	r6, #0
 8009d2e:	42a6      	cmp	r6, r4
 8009d30:	d105      	bne.n	8009d3e <__libc_init_array+0x2e>
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d38:	4798      	blx	r3
 8009d3a:	3601      	adds	r6, #1
 8009d3c:	e7ee      	b.n	8009d1c <__libc_init_array+0xc>
 8009d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d42:	4798      	blx	r3
 8009d44:	3601      	adds	r6, #1
 8009d46:	e7f2      	b.n	8009d2e <__libc_init_array+0x1e>
 8009d48:	0800be18 	.word	0x0800be18
 8009d4c:	0800be18 	.word	0x0800be18
 8009d50:	0800be18 	.word	0x0800be18
 8009d54:	0800be1c 	.word	0x0800be1c

08009d58 <__retarget_lock_init_recursive>:
 8009d58:	4770      	bx	lr

08009d5a <__retarget_lock_acquire_recursive>:
 8009d5a:	4770      	bx	lr

08009d5c <__retarget_lock_release_recursive>:
 8009d5c:	4770      	bx	lr

08009d5e <strcpy>:
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d64:	f803 2b01 	strb.w	r2, [r3], #1
 8009d68:	2a00      	cmp	r2, #0
 8009d6a:	d1f9      	bne.n	8009d60 <strcpy+0x2>
 8009d6c:	4770      	bx	lr

08009d6e <quorem>:
 8009d6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d72:	6903      	ldr	r3, [r0, #16]
 8009d74:	690c      	ldr	r4, [r1, #16]
 8009d76:	42a3      	cmp	r3, r4
 8009d78:	4607      	mov	r7, r0
 8009d7a:	db7e      	blt.n	8009e7a <quorem+0x10c>
 8009d7c:	3c01      	subs	r4, #1
 8009d7e:	f101 0814 	add.w	r8, r1, #20
 8009d82:	00a3      	lsls	r3, r4, #2
 8009d84:	f100 0514 	add.w	r5, r0, #20
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d8e:	9301      	str	r3, [sp, #4]
 8009d90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009da0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009da4:	d32e      	bcc.n	8009e04 <quorem+0x96>
 8009da6:	f04f 0a00 	mov.w	sl, #0
 8009daa:	46c4      	mov	ip, r8
 8009dac:	46ae      	mov	lr, r5
 8009dae:	46d3      	mov	fp, sl
 8009db0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009db4:	b298      	uxth	r0, r3
 8009db6:	fb06 a000 	mla	r0, r6, r0, sl
 8009dba:	0c02      	lsrs	r2, r0, #16
 8009dbc:	0c1b      	lsrs	r3, r3, #16
 8009dbe:	fb06 2303 	mla	r3, r6, r3, r2
 8009dc2:	f8de 2000 	ldr.w	r2, [lr]
 8009dc6:	b280      	uxth	r0, r0
 8009dc8:	b292      	uxth	r2, r2
 8009dca:	1a12      	subs	r2, r2, r0
 8009dcc:	445a      	add	r2, fp
 8009dce:	f8de 0000 	ldr.w	r0, [lr]
 8009dd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ddc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009de0:	b292      	uxth	r2, r2
 8009de2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009de6:	45e1      	cmp	r9, ip
 8009de8:	f84e 2b04 	str.w	r2, [lr], #4
 8009dec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009df0:	d2de      	bcs.n	8009db0 <quorem+0x42>
 8009df2:	9b00      	ldr	r3, [sp, #0]
 8009df4:	58eb      	ldr	r3, [r5, r3]
 8009df6:	b92b      	cbnz	r3, 8009e04 <quorem+0x96>
 8009df8:	9b01      	ldr	r3, [sp, #4]
 8009dfa:	3b04      	subs	r3, #4
 8009dfc:	429d      	cmp	r5, r3
 8009dfe:	461a      	mov	r2, r3
 8009e00:	d32f      	bcc.n	8009e62 <quorem+0xf4>
 8009e02:	613c      	str	r4, [r7, #16]
 8009e04:	4638      	mov	r0, r7
 8009e06:	f001 f979 	bl	800b0fc <__mcmp>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	db25      	blt.n	8009e5a <quorem+0xec>
 8009e0e:	4629      	mov	r1, r5
 8009e10:	2000      	movs	r0, #0
 8009e12:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e16:	f8d1 c000 	ldr.w	ip, [r1]
 8009e1a:	fa1f fe82 	uxth.w	lr, r2
 8009e1e:	fa1f f38c 	uxth.w	r3, ip
 8009e22:	eba3 030e 	sub.w	r3, r3, lr
 8009e26:	4403      	add	r3, r0
 8009e28:	0c12      	lsrs	r2, r2, #16
 8009e2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009e2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e38:	45c1      	cmp	r9, r8
 8009e3a:	f841 3b04 	str.w	r3, [r1], #4
 8009e3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e42:	d2e6      	bcs.n	8009e12 <quorem+0xa4>
 8009e44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e4c:	b922      	cbnz	r2, 8009e58 <quorem+0xea>
 8009e4e:	3b04      	subs	r3, #4
 8009e50:	429d      	cmp	r5, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	d30b      	bcc.n	8009e6e <quorem+0x100>
 8009e56:	613c      	str	r4, [r7, #16]
 8009e58:	3601      	adds	r6, #1
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	b003      	add	sp, #12
 8009e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e62:	6812      	ldr	r2, [r2, #0]
 8009e64:	3b04      	subs	r3, #4
 8009e66:	2a00      	cmp	r2, #0
 8009e68:	d1cb      	bne.n	8009e02 <quorem+0x94>
 8009e6a:	3c01      	subs	r4, #1
 8009e6c:	e7c6      	b.n	8009dfc <quorem+0x8e>
 8009e6e:	6812      	ldr	r2, [r2, #0]
 8009e70:	3b04      	subs	r3, #4
 8009e72:	2a00      	cmp	r2, #0
 8009e74:	d1ef      	bne.n	8009e56 <quorem+0xe8>
 8009e76:	3c01      	subs	r4, #1
 8009e78:	e7ea      	b.n	8009e50 <quorem+0xe2>
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	e7ee      	b.n	8009e5c <quorem+0xee>
	...

08009e80 <_dtoa_r>:
 8009e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	69c7      	ldr	r7, [r0, #28]
 8009e86:	b099      	sub	sp, #100	@ 0x64
 8009e88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e8c:	ec55 4b10 	vmov	r4, r5, d0
 8009e90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009e92:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e94:	4683      	mov	fp, r0
 8009e96:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e9a:	b97f      	cbnz	r7, 8009ebc <_dtoa_r+0x3c>
 8009e9c:	2010      	movs	r0, #16
 8009e9e:	f000 fdfd 	bl	800aa9c <malloc>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	f8cb 001c 	str.w	r0, [fp, #28]
 8009ea8:	b920      	cbnz	r0, 8009eb4 <_dtoa_r+0x34>
 8009eaa:	4ba7      	ldr	r3, [pc, #668]	@ (800a148 <_dtoa_r+0x2c8>)
 8009eac:	21ef      	movs	r1, #239	@ 0xef
 8009eae:	48a7      	ldr	r0, [pc, #668]	@ (800a14c <_dtoa_r+0x2cc>)
 8009eb0:	f001 fcbc 	bl	800b82c <__assert_func>
 8009eb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009eb8:	6007      	str	r7, [r0, #0]
 8009eba:	60c7      	str	r7, [r0, #12]
 8009ebc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ec0:	6819      	ldr	r1, [r3, #0]
 8009ec2:	b159      	cbz	r1, 8009edc <_dtoa_r+0x5c>
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	604a      	str	r2, [r1, #4]
 8009ec8:	2301      	movs	r3, #1
 8009eca:	4093      	lsls	r3, r2
 8009ecc:	608b      	str	r3, [r1, #8]
 8009ece:	4658      	mov	r0, fp
 8009ed0:	f000 feda 	bl	800ac88 <_Bfree>
 8009ed4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	1e2b      	subs	r3, r5, #0
 8009ede:	bfb9      	ittee	lt
 8009ee0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009ee4:	9303      	strlt	r3, [sp, #12]
 8009ee6:	2300      	movge	r3, #0
 8009ee8:	6033      	strge	r3, [r6, #0]
 8009eea:	9f03      	ldr	r7, [sp, #12]
 8009eec:	4b98      	ldr	r3, [pc, #608]	@ (800a150 <_dtoa_r+0x2d0>)
 8009eee:	bfbc      	itt	lt
 8009ef0:	2201      	movlt	r2, #1
 8009ef2:	6032      	strlt	r2, [r6, #0]
 8009ef4:	43bb      	bics	r3, r7
 8009ef6:	d112      	bne.n	8009f1e <_dtoa_r+0x9e>
 8009ef8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009efa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f04:	4323      	orrs	r3, r4
 8009f06:	f000 854d 	beq.w	800a9a4 <_dtoa_r+0xb24>
 8009f0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a164 <_dtoa_r+0x2e4>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f000 854f 	beq.w	800a9b4 <_dtoa_r+0xb34>
 8009f16:	f10a 0303 	add.w	r3, sl, #3
 8009f1a:	f000 bd49 	b.w	800a9b0 <_dtoa_r+0xb30>
 8009f1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f22:	2200      	movs	r2, #0
 8009f24:	ec51 0b17 	vmov	r0, r1, d7
 8009f28:	2300      	movs	r3, #0
 8009f2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009f2e:	f7f6 fdcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f32:	4680      	mov	r8, r0
 8009f34:	b158      	cbz	r0, 8009f4e <_dtoa_r+0xce>
 8009f36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009f38:	2301      	movs	r3, #1
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f3e:	b113      	cbz	r3, 8009f46 <_dtoa_r+0xc6>
 8009f40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f42:	4b84      	ldr	r3, [pc, #528]	@ (800a154 <_dtoa_r+0x2d4>)
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a168 <_dtoa_r+0x2e8>
 8009f4a:	f000 bd33 	b.w	800a9b4 <_dtoa_r+0xb34>
 8009f4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f52:	aa16      	add	r2, sp, #88	@ 0x58
 8009f54:	a917      	add	r1, sp, #92	@ 0x5c
 8009f56:	4658      	mov	r0, fp
 8009f58:	f001 f980 	bl	800b25c <__d2b>
 8009f5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009f60:	4681      	mov	r9, r0
 8009f62:	2e00      	cmp	r6, #0
 8009f64:	d077      	beq.n	800a056 <_dtoa_r+0x1d6>
 8009f66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009f7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f80:	4619      	mov	r1, r3
 8009f82:	2200      	movs	r2, #0
 8009f84:	4b74      	ldr	r3, [pc, #464]	@ (800a158 <_dtoa_r+0x2d8>)
 8009f86:	f7f6 f97f 	bl	8000288 <__aeabi_dsub>
 8009f8a:	a369      	add	r3, pc, #420	@ (adr r3, 800a130 <_dtoa_r+0x2b0>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f7f6 fb32 	bl	80005f8 <__aeabi_dmul>
 8009f94:	a368      	add	r3, pc, #416	@ (adr r3, 800a138 <_dtoa_r+0x2b8>)
 8009f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9a:	f7f6 f977 	bl	800028c <__adddf3>
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	460d      	mov	r5, r1
 8009fa4:	f7f6 fabe 	bl	8000524 <__aeabi_i2d>
 8009fa8:	a365      	add	r3, pc, #404	@ (adr r3, 800a140 <_dtoa_r+0x2c0>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	f7f6 fb23 	bl	80005f8 <__aeabi_dmul>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	f7f6 f967 	bl	800028c <__adddf3>
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	460d      	mov	r5, r1
 8009fc2:	f7f6 fdc9 	bl	8000b58 <__aeabi_d2iz>
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	4607      	mov	r7, r0
 8009fca:	2300      	movs	r3, #0
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7f6 fd84 	bl	8000adc <__aeabi_dcmplt>
 8009fd4:	b140      	cbz	r0, 8009fe8 <_dtoa_r+0x168>
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	f7f6 faa4 	bl	8000524 <__aeabi_i2d>
 8009fdc:	4622      	mov	r2, r4
 8009fde:	462b      	mov	r3, r5
 8009fe0:	f7f6 fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fe4:	b900      	cbnz	r0, 8009fe8 <_dtoa_r+0x168>
 8009fe6:	3f01      	subs	r7, #1
 8009fe8:	2f16      	cmp	r7, #22
 8009fea:	d851      	bhi.n	800a090 <_dtoa_r+0x210>
 8009fec:	4b5b      	ldr	r3, [pc, #364]	@ (800a15c <_dtoa_r+0x2dc>)
 8009fee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ffa:	f7f6 fd6f 	bl	8000adc <__aeabi_dcmplt>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d048      	beq.n	800a094 <_dtoa_r+0x214>
 800a002:	3f01      	subs	r7, #1
 800a004:	2300      	movs	r3, #0
 800a006:	9312      	str	r3, [sp, #72]	@ 0x48
 800a008:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a00a:	1b9b      	subs	r3, r3, r6
 800a00c:	1e5a      	subs	r2, r3, #1
 800a00e:	bf44      	itt	mi
 800a010:	f1c3 0801 	rsbmi	r8, r3, #1
 800a014:	2300      	movmi	r3, #0
 800a016:	9208      	str	r2, [sp, #32]
 800a018:	bf54      	ite	pl
 800a01a:	f04f 0800 	movpl.w	r8, #0
 800a01e:	9308      	strmi	r3, [sp, #32]
 800a020:	2f00      	cmp	r7, #0
 800a022:	db39      	blt.n	800a098 <_dtoa_r+0x218>
 800a024:	9b08      	ldr	r3, [sp, #32]
 800a026:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a028:	443b      	add	r3, r7
 800a02a:	9308      	str	r3, [sp, #32]
 800a02c:	2300      	movs	r3, #0
 800a02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a032:	2b09      	cmp	r3, #9
 800a034:	d864      	bhi.n	800a100 <_dtoa_r+0x280>
 800a036:	2b05      	cmp	r3, #5
 800a038:	bfc4      	itt	gt
 800a03a:	3b04      	subgt	r3, #4
 800a03c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a040:	f1a3 0302 	sub.w	r3, r3, #2
 800a044:	bfcc      	ite	gt
 800a046:	2400      	movgt	r4, #0
 800a048:	2401      	movle	r4, #1
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d863      	bhi.n	800a116 <_dtoa_r+0x296>
 800a04e:	e8df f003 	tbb	[pc, r3]
 800a052:	372a      	.short	0x372a
 800a054:	5535      	.short	0x5535
 800a056:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a05a:	441e      	add	r6, r3
 800a05c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a060:	2b20      	cmp	r3, #32
 800a062:	bfc1      	itttt	gt
 800a064:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a068:	409f      	lslgt	r7, r3
 800a06a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a06e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a072:	bfd6      	itet	le
 800a074:	f1c3 0320 	rsble	r3, r3, #32
 800a078:	ea47 0003 	orrgt.w	r0, r7, r3
 800a07c:	fa04 f003 	lslle.w	r0, r4, r3
 800a080:	f7f6 fa40 	bl	8000504 <__aeabi_ui2d>
 800a084:	2201      	movs	r2, #1
 800a086:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a08a:	3e01      	subs	r6, #1
 800a08c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a08e:	e777      	b.n	8009f80 <_dtoa_r+0x100>
 800a090:	2301      	movs	r3, #1
 800a092:	e7b8      	b.n	800a006 <_dtoa_r+0x186>
 800a094:	9012      	str	r0, [sp, #72]	@ 0x48
 800a096:	e7b7      	b.n	800a008 <_dtoa_r+0x188>
 800a098:	427b      	negs	r3, r7
 800a09a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a09c:	2300      	movs	r3, #0
 800a09e:	eba8 0807 	sub.w	r8, r8, r7
 800a0a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0a4:	e7c4      	b.n	800a030 <_dtoa_r+0x1b0>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dc35      	bgt.n	800a11c <_dtoa_r+0x29c>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	9307      	str	r3, [sp, #28]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0ba:	e00b      	b.n	800a0d4 <_dtoa_r+0x254>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e7f3      	b.n	800a0a8 <_dtoa_r+0x228>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0c6:	18fb      	adds	r3, r7, r3
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	9307      	str	r3, [sp, #28]
 800a0d0:	bfb8      	it	lt
 800a0d2:	2301      	movlt	r3, #1
 800a0d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a0d8:	2100      	movs	r1, #0
 800a0da:	2204      	movs	r2, #4
 800a0dc:	f102 0514 	add.w	r5, r2, #20
 800a0e0:	429d      	cmp	r5, r3
 800a0e2:	d91f      	bls.n	800a124 <_dtoa_r+0x2a4>
 800a0e4:	6041      	str	r1, [r0, #4]
 800a0e6:	4658      	mov	r0, fp
 800a0e8:	f000 fd8e 	bl	800ac08 <_Balloc>
 800a0ec:	4682      	mov	sl, r0
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d13c      	bne.n	800a16c <_dtoa_r+0x2ec>
 800a0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a160 <_dtoa_r+0x2e0>)
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a0fa:	e6d8      	b.n	8009eae <_dtoa_r+0x2e>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e7e0      	b.n	800a0c2 <_dtoa_r+0x242>
 800a100:	2401      	movs	r4, #1
 800a102:	2300      	movs	r3, #0
 800a104:	9309      	str	r3, [sp, #36]	@ 0x24
 800a106:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a108:	f04f 33ff 	mov.w	r3, #4294967295
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	9307      	str	r3, [sp, #28]
 800a110:	2200      	movs	r2, #0
 800a112:	2312      	movs	r3, #18
 800a114:	e7d0      	b.n	800a0b8 <_dtoa_r+0x238>
 800a116:	2301      	movs	r3, #1
 800a118:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a11a:	e7f5      	b.n	800a108 <_dtoa_r+0x288>
 800a11c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	9307      	str	r3, [sp, #28]
 800a122:	e7d7      	b.n	800a0d4 <_dtoa_r+0x254>
 800a124:	3101      	adds	r1, #1
 800a126:	0052      	lsls	r2, r2, #1
 800a128:	e7d8      	b.n	800a0dc <_dtoa_r+0x25c>
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w
 800a130:	636f4361 	.word	0x636f4361
 800a134:	3fd287a7 	.word	0x3fd287a7
 800a138:	8b60c8b3 	.word	0x8b60c8b3
 800a13c:	3fc68a28 	.word	0x3fc68a28
 800a140:	509f79fb 	.word	0x509f79fb
 800a144:	3fd34413 	.word	0x3fd34413
 800a148:	0800bae1 	.word	0x0800bae1
 800a14c:	0800baf8 	.word	0x0800baf8
 800a150:	7ff00000 	.word	0x7ff00000
 800a154:	0800bab1 	.word	0x0800bab1
 800a158:	3ff80000 	.word	0x3ff80000
 800a15c:	0800bbf0 	.word	0x0800bbf0
 800a160:	0800bb50 	.word	0x0800bb50
 800a164:	0800badd 	.word	0x0800badd
 800a168:	0800bab0 	.word	0x0800bab0
 800a16c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a170:	6018      	str	r0, [r3, #0]
 800a172:	9b07      	ldr	r3, [sp, #28]
 800a174:	2b0e      	cmp	r3, #14
 800a176:	f200 80a4 	bhi.w	800a2c2 <_dtoa_r+0x442>
 800a17a:	2c00      	cmp	r4, #0
 800a17c:	f000 80a1 	beq.w	800a2c2 <_dtoa_r+0x442>
 800a180:	2f00      	cmp	r7, #0
 800a182:	dd33      	ble.n	800a1ec <_dtoa_r+0x36c>
 800a184:	4bad      	ldr	r3, [pc, #692]	@ (800a43c <_dtoa_r+0x5bc>)
 800a186:	f007 020f 	and.w	r2, r7, #15
 800a18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a18e:	ed93 7b00 	vldr	d7, [r3]
 800a192:	05f8      	lsls	r0, r7, #23
 800a194:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a198:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a19c:	d516      	bpl.n	800a1cc <_dtoa_r+0x34c>
 800a19e:	4ba8      	ldr	r3, [pc, #672]	@ (800a440 <_dtoa_r+0x5c0>)
 800a1a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1a8:	f7f6 fb50 	bl	800084c <__aeabi_ddiv>
 800a1ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1b0:	f004 040f 	and.w	r4, r4, #15
 800a1b4:	2603      	movs	r6, #3
 800a1b6:	4da2      	ldr	r5, [pc, #648]	@ (800a440 <_dtoa_r+0x5c0>)
 800a1b8:	b954      	cbnz	r4, 800a1d0 <_dtoa_r+0x350>
 800a1ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c2:	f7f6 fb43 	bl	800084c <__aeabi_ddiv>
 800a1c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ca:	e028      	b.n	800a21e <_dtoa_r+0x39e>
 800a1cc:	2602      	movs	r6, #2
 800a1ce:	e7f2      	b.n	800a1b6 <_dtoa_r+0x336>
 800a1d0:	07e1      	lsls	r1, r4, #31
 800a1d2:	d508      	bpl.n	800a1e6 <_dtoa_r+0x366>
 800a1d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1dc:	f7f6 fa0c 	bl	80005f8 <__aeabi_dmul>
 800a1e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1e4:	3601      	adds	r6, #1
 800a1e6:	1064      	asrs	r4, r4, #1
 800a1e8:	3508      	adds	r5, #8
 800a1ea:	e7e5      	b.n	800a1b8 <_dtoa_r+0x338>
 800a1ec:	f000 80d2 	beq.w	800a394 <_dtoa_r+0x514>
 800a1f0:	427c      	negs	r4, r7
 800a1f2:	4b92      	ldr	r3, [pc, #584]	@ (800a43c <_dtoa_r+0x5bc>)
 800a1f4:	4d92      	ldr	r5, [pc, #584]	@ (800a440 <_dtoa_r+0x5c0>)
 800a1f6:	f004 020f 	and.w	r2, r4, #15
 800a1fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a206:	f7f6 f9f7 	bl	80005f8 <__aeabi_dmul>
 800a20a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a20e:	1124      	asrs	r4, r4, #4
 800a210:	2300      	movs	r3, #0
 800a212:	2602      	movs	r6, #2
 800a214:	2c00      	cmp	r4, #0
 800a216:	f040 80b2 	bne.w	800a37e <_dtoa_r+0x4fe>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1d3      	bne.n	800a1c6 <_dtoa_r+0x346>
 800a21e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a220:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 80b7 	beq.w	800a398 <_dtoa_r+0x518>
 800a22a:	4b86      	ldr	r3, [pc, #536]	@ (800a444 <_dtoa_r+0x5c4>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	4620      	mov	r0, r4
 800a230:	4629      	mov	r1, r5
 800a232:	f7f6 fc53 	bl	8000adc <__aeabi_dcmplt>
 800a236:	2800      	cmp	r0, #0
 800a238:	f000 80ae 	beq.w	800a398 <_dtoa_r+0x518>
 800a23c:	9b07      	ldr	r3, [sp, #28]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f000 80aa 	beq.w	800a398 <_dtoa_r+0x518>
 800a244:	9b00      	ldr	r3, [sp, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	dd37      	ble.n	800a2ba <_dtoa_r+0x43a>
 800a24a:	1e7b      	subs	r3, r7, #1
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	4620      	mov	r0, r4
 800a250:	4b7d      	ldr	r3, [pc, #500]	@ (800a448 <_dtoa_r+0x5c8>)
 800a252:	2200      	movs	r2, #0
 800a254:	4629      	mov	r1, r5
 800a256:	f7f6 f9cf 	bl	80005f8 <__aeabi_dmul>
 800a25a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a25e:	9c00      	ldr	r4, [sp, #0]
 800a260:	3601      	adds	r6, #1
 800a262:	4630      	mov	r0, r6
 800a264:	f7f6 f95e 	bl	8000524 <__aeabi_i2d>
 800a268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a26c:	f7f6 f9c4 	bl	80005f8 <__aeabi_dmul>
 800a270:	4b76      	ldr	r3, [pc, #472]	@ (800a44c <_dtoa_r+0x5cc>)
 800a272:	2200      	movs	r2, #0
 800a274:	f7f6 f80a 	bl	800028c <__adddf3>
 800a278:	4605      	mov	r5, r0
 800a27a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a27e:	2c00      	cmp	r4, #0
 800a280:	f040 808d 	bne.w	800a39e <_dtoa_r+0x51e>
 800a284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a288:	4b71      	ldr	r3, [pc, #452]	@ (800a450 <_dtoa_r+0x5d0>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	f7f5 fffc 	bl	8000288 <__aeabi_dsub>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a298:	462a      	mov	r2, r5
 800a29a:	4633      	mov	r3, r6
 800a29c:	f7f6 fc3c 	bl	8000b18 <__aeabi_dcmpgt>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	f040 828b 	bne.w	800a7bc <_dtoa_r+0x93c>
 800a2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2aa:	462a      	mov	r2, r5
 800a2ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a2b0:	f7f6 fc14 	bl	8000adc <__aeabi_dcmplt>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	f040 8128 	bne.w	800a50a <_dtoa_r+0x68a>
 800a2ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a2be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a2c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f2c0 815a 	blt.w	800a57e <_dtoa_r+0x6fe>
 800a2ca:	2f0e      	cmp	r7, #14
 800a2cc:	f300 8157 	bgt.w	800a57e <_dtoa_r+0x6fe>
 800a2d0:	4b5a      	ldr	r3, [pc, #360]	@ (800a43c <_dtoa_r+0x5bc>)
 800a2d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2d6:	ed93 7b00 	vldr	d7, [r3]
 800a2da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	ed8d 7b00 	vstr	d7, [sp]
 800a2e2:	da03      	bge.n	800a2ec <_dtoa_r+0x46c>
 800a2e4:	9b07      	ldr	r3, [sp, #28]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f340 8101 	ble.w	800a4ee <_dtoa_r+0x66e>
 800a2ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a2f0:	4656      	mov	r6, sl
 800a2f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	f7f6 faa7 	bl	800084c <__aeabi_ddiv>
 800a2fe:	f7f6 fc2b 	bl	8000b58 <__aeabi_d2iz>
 800a302:	4680      	mov	r8, r0
 800a304:	f7f6 f90e 	bl	8000524 <__aeabi_i2d>
 800a308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a30c:	f7f6 f974 	bl	80005f8 <__aeabi_dmul>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	4620      	mov	r0, r4
 800a316:	4629      	mov	r1, r5
 800a318:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a31c:	f7f5 ffb4 	bl	8000288 <__aeabi_dsub>
 800a320:	f806 4b01 	strb.w	r4, [r6], #1
 800a324:	9d07      	ldr	r5, [sp, #28]
 800a326:	eba6 040a 	sub.w	r4, r6, sl
 800a32a:	42a5      	cmp	r5, r4
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	f040 8117 	bne.w	800a562 <_dtoa_r+0x6e2>
 800a334:	f7f5 ffaa 	bl	800028c <__adddf3>
 800a338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a33c:	4604      	mov	r4, r0
 800a33e:	460d      	mov	r5, r1
 800a340:	f7f6 fbea 	bl	8000b18 <__aeabi_dcmpgt>
 800a344:	2800      	cmp	r0, #0
 800a346:	f040 80f9 	bne.w	800a53c <_dtoa_r+0x6bc>
 800a34a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a34e:	4620      	mov	r0, r4
 800a350:	4629      	mov	r1, r5
 800a352:	f7f6 fbb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a356:	b118      	cbz	r0, 800a360 <_dtoa_r+0x4e0>
 800a358:	f018 0f01 	tst.w	r8, #1
 800a35c:	f040 80ee 	bne.w	800a53c <_dtoa_r+0x6bc>
 800a360:	4649      	mov	r1, r9
 800a362:	4658      	mov	r0, fp
 800a364:	f000 fc90 	bl	800ac88 <_Bfree>
 800a368:	2300      	movs	r3, #0
 800a36a:	7033      	strb	r3, [r6, #0]
 800a36c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a36e:	3701      	adds	r7, #1
 800a370:	601f      	str	r7, [r3, #0]
 800a372:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a374:	2b00      	cmp	r3, #0
 800a376:	f000 831d 	beq.w	800a9b4 <_dtoa_r+0xb34>
 800a37a:	601e      	str	r6, [r3, #0]
 800a37c:	e31a      	b.n	800a9b4 <_dtoa_r+0xb34>
 800a37e:	07e2      	lsls	r2, r4, #31
 800a380:	d505      	bpl.n	800a38e <_dtoa_r+0x50e>
 800a382:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a386:	f7f6 f937 	bl	80005f8 <__aeabi_dmul>
 800a38a:	3601      	adds	r6, #1
 800a38c:	2301      	movs	r3, #1
 800a38e:	1064      	asrs	r4, r4, #1
 800a390:	3508      	adds	r5, #8
 800a392:	e73f      	b.n	800a214 <_dtoa_r+0x394>
 800a394:	2602      	movs	r6, #2
 800a396:	e742      	b.n	800a21e <_dtoa_r+0x39e>
 800a398:	9c07      	ldr	r4, [sp, #28]
 800a39a:	9704      	str	r7, [sp, #16]
 800a39c:	e761      	b.n	800a262 <_dtoa_r+0x3e2>
 800a39e:	4b27      	ldr	r3, [pc, #156]	@ (800a43c <_dtoa_r+0x5bc>)
 800a3a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a3a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3aa:	4454      	add	r4, sl
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	d053      	beq.n	800a458 <_dtoa_r+0x5d8>
 800a3b0:	4928      	ldr	r1, [pc, #160]	@ (800a454 <_dtoa_r+0x5d4>)
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	f7f6 fa4a 	bl	800084c <__aeabi_ddiv>
 800a3b8:	4633      	mov	r3, r6
 800a3ba:	462a      	mov	r2, r5
 800a3bc:	f7f5 ff64 	bl	8000288 <__aeabi_dsub>
 800a3c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3c4:	4656      	mov	r6, sl
 800a3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ca:	f7f6 fbc5 	bl	8000b58 <__aeabi_d2iz>
 800a3ce:	4605      	mov	r5, r0
 800a3d0:	f7f6 f8a8 	bl	8000524 <__aeabi_i2d>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3dc:	f7f5 ff54 	bl	8000288 <__aeabi_dsub>
 800a3e0:	3530      	adds	r5, #48	@ 0x30
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3ea:	f806 5b01 	strb.w	r5, [r6], #1
 800a3ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3f2:	f7f6 fb73 	bl	8000adc <__aeabi_dcmplt>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d171      	bne.n	800a4de <_dtoa_r+0x65e>
 800a3fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3fe:	4911      	ldr	r1, [pc, #68]	@ (800a444 <_dtoa_r+0x5c4>)
 800a400:	2000      	movs	r0, #0
 800a402:	f7f5 ff41 	bl	8000288 <__aeabi_dsub>
 800a406:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a40a:	f7f6 fb67 	bl	8000adc <__aeabi_dcmplt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	f040 8095 	bne.w	800a53e <_dtoa_r+0x6be>
 800a414:	42a6      	cmp	r6, r4
 800a416:	f43f af50 	beq.w	800a2ba <_dtoa_r+0x43a>
 800a41a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a41e:	4b0a      	ldr	r3, [pc, #40]	@ (800a448 <_dtoa_r+0x5c8>)
 800a420:	2200      	movs	r2, #0
 800a422:	f7f6 f8e9 	bl	80005f8 <__aeabi_dmul>
 800a426:	4b08      	ldr	r3, [pc, #32]	@ (800a448 <_dtoa_r+0x5c8>)
 800a428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a42c:	2200      	movs	r2, #0
 800a42e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a432:	f7f6 f8e1 	bl	80005f8 <__aeabi_dmul>
 800a436:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a43a:	e7c4      	b.n	800a3c6 <_dtoa_r+0x546>
 800a43c:	0800bbf0 	.word	0x0800bbf0
 800a440:	0800bbc8 	.word	0x0800bbc8
 800a444:	3ff00000 	.word	0x3ff00000
 800a448:	40240000 	.word	0x40240000
 800a44c:	401c0000 	.word	0x401c0000
 800a450:	40140000 	.word	0x40140000
 800a454:	3fe00000 	.word	0x3fe00000
 800a458:	4631      	mov	r1, r6
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7f6 f8cc 	bl	80005f8 <__aeabi_dmul>
 800a460:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a464:	9415      	str	r4, [sp, #84]	@ 0x54
 800a466:	4656      	mov	r6, sl
 800a468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a46c:	f7f6 fb74 	bl	8000b58 <__aeabi_d2iz>
 800a470:	4605      	mov	r5, r0
 800a472:	f7f6 f857 	bl	8000524 <__aeabi_i2d>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a47e:	f7f5 ff03 	bl	8000288 <__aeabi_dsub>
 800a482:	3530      	adds	r5, #48	@ 0x30
 800a484:	f806 5b01 	strb.w	r5, [r6], #1
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	42a6      	cmp	r6, r4
 800a48e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a492:	f04f 0200 	mov.w	r2, #0
 800a496:	d124      	bne.n	800a4e2 <_dtoa_r+0x662>
 800a498:	4bac      	ldr	r3, [pc, #688]	@ (800a74c <_dtoa_r+0x8cc>)
 800a49a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a49e:	f7f5 fef5 	bl	800028c <__adddf3>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4aa:	f7f6 fb35 	bl	8000b18 <__aeabi_dcmpgt>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d145      	bne.n	800a53e <_dtoa_r+0x6be>
 800a4b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a4b6:	49a5      	ldr	r1, [pc, #660]	@ (800a74c <_dtoa_r+0x8cc>)
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	f7f5 fee5 	bl	8000288 <__aeabi_dsub>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4c6:	f7f6 fb09 	bl	8000adc <__aeabi_dcmplt>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	f43f aef5 	beq.w	800a2ba <_dtoa_r+0x43a>
 800a4d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a4d2:	1e73      	subs	r3, r6, #1
 800a4d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a4d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a4da:	2b30      	cmp	r3, #48	@ 0x30
 800a4dc:	d0f8      	beq.n	800a4d0 <_dtoa_r+0x650>
 800a4de:	9f04      	ldr	r7, [sp, #16]
 800a4e0:	e73e      	b.n	800a360 <_dtoa_r+0x4e0>
 800a4e2:	4b9b      	ldr	r3, [pc, #620]	@ (800a750 <_dtoa_r+0x8d0>)
 800a4e4:	f7f6 f888 	bl	80005f8 <__aeabi_dmul>
 800a4e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4ec:	e7bc      	b.n	800a468 <_dtoa_r+0x5e8>
 800a4ee:	d10c      	bne.n	800a50a <_dtoa_r+0x68a>
 800a4f0:	4b98      	ldr	r3, [pc, #608]	@ (800a754 <_dtoa_r+0x8d4>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4f8:	f7f6 f87e 	bl	80005f8 <__aeabi_dmul>
 800a4fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a500:	f7f6 fb00 	bl	8000b04 <__aeabi_dcmpge>
 800a504:	2800      	cmp	r0, #0
 800a506:	f000 8157 	beq.w	800a7b8 <_dtoa_r+0x938>
 800a50a:	2400      	movs	r4, #0
 800a50c:	4625      	mov	r5, r4
 800a50e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a510:	43db      	mvns	r3, r3
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	4656      	mov	r6, sl
 800a516:	2700      	movs	r7, #0
 800a518:	4621      	mov	r1, r4
 800a51a:	4658      	mov	r0, fp
 800a51c:	f000 fbb4 	bl	800ac88 <_Bfree>
 800a520:	2d00      	cmp	r5, #0
 800a522:	d0dc      	beq.n	800a4de <_dtoa_r+0x65e>
 800a524:	b12f      	cbz	r7, 800a532 <_dtoa_r+0x6b2>
 800a526:	42af      	cmp	r7, r5
 800a528:	d003      	beq.n	800a532 <_dtoa_r+0x6b2>
 800a52a:	4639      	mov	r1, r7
 800a52c:	4658      	mov	r0, fp
 800a52e:	f000 fbab 	bl	800ac88 <_Bfree>
 800a532:	4629      	mov	r1, r5
 800a534:	4658      	mov	r0, fp
 800a536:	f000 fba7 	bl	800ac88 <_Bfree>
 800a53a:	e7d0      	b.n	800a4de <_dtoa_r+0x65e>
 800a53c:	9704      	str	r7, [sp, #16]
 800a53e:	4633      	mov	r3, r6
 800a540:	461e      	mov	r6, r3
 800a542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a546:	2a39      	cmp	r2, #57	@ 0x39
 800a548:	d107      	bne.n	800a55a <_dtoa_r+0x6da>
 800a54a:	459a      	cmp	sl, r3
 800a54c:	d1f8      	bne.n	800a540 <_dtoa_r+0x6c0>
 800a54e:	9a04      	ldr	r2, [sp, #16]
 800a550:	3201      	adds	r2, #1
 800a552:	9204      	str	r2, [sp, #16]
 800a554:	2230      	movs	r2, #48	@ 0x30
 800a556:	f88a 2000 	strb.w	r2, [sl]
 800a55a:	781a      	ldrb	r2, [r3, #0]
 800a55c:	3201      	adds	r2, #1
 800a55e:	701a      	strb	r2, [r3, #0]
 800a560:	e7bd      	b.n	800a4de <_dtoa_r+0x65e>
 800a562:	4b7b      	ldr	r3, [pc, #492]	@ (800a750 <_dtoa_r+0x8d0>)
 800a564:	2200      	movs	r2, #0
 800a566:	f7f6 f847 	bl	80005f8 <__aeabi_dmul>
 800a56a:	2200      	movs	r2, #0
 800a56c:	2300      	movs	r3, #0
 800a56e:	4604      	mov	r4, r0
 800a570:	460d      	mov	r5, r1
 800a572:	f7f6 faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a576:	2800      	cmp	r0, #0
 800a578:	f43f aebb 	beq.w	800a2f2 <_dtoa_r+0x472>
 800a57c:	e6f0      	b.n	800a360 <_dtoa_r+0x4e0>
 800a57e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a580:	2a00      	cmp	r2, #0
 800a582:	f000 80db 	beq.w	800a73c <_dtoa_r+0x8bc>
 800a586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a588:	2a01      	cmp	r2, #1
 800a58a:	f300 80bf 	bgt.w	800a70c <_dtoa_r+0x88c>
 800a58e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a590:	2a00      	cmp	r2, #0
 800a592:	f000 80b7 	beq.w	800a704 <_dtoa_r+0x884>
 800a596:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a59a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a59c:	4646      	mov	r6, r8
 800a59e:	9a08      	ldr	r2, [sp, #32]
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	441a      	add	r2, r3
 800a5a4:	4658      	mov	r0, fp
 800a5a6:	4498      	add	r8, r3
 800a5a8:	9208      	str	r2, [sp, #32]
 800a5aa:	f000 fc21 	bl	800adf0 <__i2b>
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	b15e      	cbz	r6, 800a5ca <_dtoa_r+0x74a>
 800a5b2:	9b08      	ldr	r3, [sp, #32]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	dd08      	ble.n	800a5ca <_dtoa_r+0x74a>
 800a5b8:	42b3      	cmp	r3, r6
 800a5ba:	9a08      	ldr	r2, [sp, #32]
 800a5bc:	bfa8      	it	ge
 800a5be:	4633      	movge	r3, r6
 800a5c0:	eba8 0803 	sub.w	r8, r8, r3
 800a5c4:	1af6      	subs	r6, r6, r3
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	9308      	str	r3, [sp, #32]
 800a5ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5cc:	b1f3      	cbz	r3, 800a60c <_dtoa_r+0x78c>
 800a5ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 80b7 	beq.w	800a744 <_dtoa_r+0x8c4>
 800a5d6:	b18c      	cbz	r4, 800a5fc <_dtoa_r+0x77c>
 800a5d8:	4629      	mov	r1, r5
 800a5da:	4622      	mov	r2, r4
 800a5dc:	4658      	mov	r0, fp
 800a5de:	f000 fcc7 	bl	800af70 <__pow5mult>
 800a5e2:	464a      	mov	r2, r9
 800a5e4:	4601      	mov	r1, r0
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	4658      	mov	r0, fp
 800a5ea:	f000 fc17 	bl	800ae1c <__multiply>
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	9004      	str	r0, [sp, #16]
 800a5f2:	4658      	mov	r0, fp
 800a5f4:	f000 fb48 	bl	800ac88 <_Bfree>
 800a5f8:	9b04      	ldr	r3, [sp, #16]
 800a5fa:	4699      	mov	r9, r3
 800a5fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5fe:	1b1a      	subs	r2, r3, r4
 800a600:	d004      	beq.n	800a60c <_dtoa_r+0x78c>
 800a602:	4649      	mov	r1, r9
 800a604:	4658      	mov	r0, fp
 800a606:	f000 fcb3 	bl	800af70 <__pow5mult>
 800a60a:	4681      	mov	r9, r0
 800a60c:	2101      	movs	r1, #1
 800a60e:	4658      	mov	r0, fp
 800a610:	f000 fbee 	bl	800adf0 <__i2b>
 800a614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a616:	4604      	mov	r4, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 81cf 	beq.w	800a9bc <_dtoa_r+0xb3c>
 800a61e:	461a      	mov	r2, r3
 800a620:	4601      	mov	r1, r0
 800a622:	4658      	mov	r0, fp
 800a624:	f000 fca4 	bl	800af70 <__pow5mult>
 800a628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	4604      	mov	r4, r0
 800a62e:	f300 8095 	bgt.w	800a75c <_dtoa_r+0x8dc>
 800a632:	9b02      	ldr	r3, [sp, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	f040 8087 	bne.w	800a748 <_dtoa_r+0x8c8>
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a640:	2b00      	cmp	r3, #0
 800a642:	f040 8089 	bne.w	800a758 <_dtoa_r+0x8d8>
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a64c:	0d1b      	lsrs	r3, r3, #20
 800a64e:	051b      	lsls	r3, r3, #20
 800a650:	b12b      	cbz	r3, 800a65e <_dtoa_r+0x7de>
 800a652:	9b08      	ldr	r3, [sp, #32]
 800a654:	3301      	adds	r3, #1
 800a656:	9308      	str	r3, [sp, #32]
 800a658:	f108 0801 	add.w	r8, r8, #1
 800a65c:	2301      	movs	r3, #1
 800a65e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 81b0 	beq.w	800a9c8 <_dtoa_r+0xb48>
 800a668:	6923      	ldr	r3, [r4, #16]
 800a66a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a66e:	6918      	ldr	r0, [r3, #16]
 800a670:	f000 fb72 	bl	800ad58 <__hi0bits>
 800a674:	f1c0 0020 	rsb	r0, r0, #32
 800a678:	9b08      	ldr	r3, [sp, #32]
 800a67a:	4418      	add	r0, r3
 800a67c:	f010 001f 	ands.w	r0, r0, #31
 800a680:	d077      	beq.n	800a772 <_dtoa_r+0x8f2>
 800a682:	f1c0 0320 	rsb	r3, r0, #32
 800a686:	2b04      	cmp	r3, #4
 800a688:	dd6b      	ble.n	800a762 <_dtoa_r+0x8e2>
 800a68a:	9b08      	ldr	r3, [sp, #32]
 800a68c:	f1c0 001c 	rsb	r0, r0, #28
 800a690:	4403      	add	r3, r0
 800a692:	4480      	add	r8, r0
 800a694:	4406      	add	r6, r0
 800a696:	9308      	str	r3, [sp, #32]
 800a698:	f1b8 0f00 	cmp.w	r8, #0
 800a69c:	dd05      	ble.n	800a6aa <_dtoa_r+0x82a>
 800a69e:	4649      	mov	r1, r9
 800a6a0:	4642      	mov	r2, r8
 800a6a2:	4658      	mov	r0, fp
 800a6a4:	f000 fcbe 	bl	800b024 <__lshift>
 800a6a8:	4681      	mov	r9, r0
 800a6aa:	9b08      	ldr	r3, [sp, #32]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	dd05      	ble.n	800a6bc <_dtoa_r+0x83c>
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	4658      	mov	r0, fp
 800a6b6:	f000 fcb5 	bl	800b024 <__lshift>
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d059      	beq.n	800a776 <_dtoa_r+0x8f6>
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	4648      	mov	r0, r9
 800a6c6:	f000 fd19 	bl	800b0fc <__mcmp>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	da53      	bge.n	800a776 <_dtoa_r+0x8f6>
 800a6ce:	1e7b      	subs	r3, r7, #1
 800a6d0:	9304      	str	r3, [sp, #16]
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	220a      	movs	r2, #10
 800a6d8:	4658      	mov	r0, fp
 800a6da:	f000 faf7 	bl	800accc <__multadd>
 800a6de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6e0:	4681      	mov	r9, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f000 8172 	beq.w	800a9cc <_dtoa_r+0xb4c>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	220a      	movs	r2, #10
 800a6ee:	4658      	mov	r0, fp
 800a6f0:	f000 faec 	bl	800accc <__multadd>
 800a6f4:	9b00      	ldr	r3, [sp, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	dc67      	bgt.n	800a7cc <_dtoa_r+0x94c>
 800a6fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	dc41      	bgt.n	800a786 <_dtoa_r+0x906>
 800a702:	e063      	b.n	800a7cc <_dtoa_r+0x94c>
 800a704:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a706:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a70a:	e746      	b.n	800a59a <_dtoa_r+0x71a>
 800a70c:	9b07      	ldr	r3, [sp, #28]
 800a70e:	1e5c      	subs	r4, r3, #1
 800a710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a712:	42a3      	cmp	r3, r4
 800a714:	bfbf      	itttt	lt
 800a716:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a718:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a71a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a71c:	1ae3      	sublt	r3, r4, r3
 800a71e:	bfb4      	ite	lt
 800a720:	18d2      	addlt	r2, r2, r3
 800a722:	1b1c      	subge	r4, r3, r4
 800a724:	9b07      	ldr	r3, [sp, #28]
 800a726:	bfbc      	itt	lt
 800a728:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a72a:	2400      	movlt	r4, #0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfb5      	itete	lt
 800a730:	eba8 0603 	sublt.w	r6, r8, r3
 800a734:	9b07      	ldrge	r3, [sp, #28]
 800a736:	2300      	movlt	r3, #0
 800a738:	4646      	movge	r6, r8
 800a73a:	e730      	b.n	800a59e <_dtoa_r+0x71e>
 800a73c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a73e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a740:	4646      	mov	r6, r8
 800a742:	e735      	b.n	800a5b0 <_dtoa_r+0x730>
 800a744:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a746:	e75c      	b.n	800a602 <_dtoa_r+0x782>
 800a748:	2300      	movs	r3, #0
 800a74a:	e788      	b.n	800a65e <_dtoa_r+0x7de>
 800a74c:	3fe00000 	.word	0x3fe00000
 800a750:	40240000 	.word	0x40240000
 800a754:	40140000 	.word	0x40140000
 800a758:	9b02      	ldr	r3, [sp, #8]
 800a75a:	e780      	b.n	800a65e <_dtoa_r+0x7de>
 800a75c:	2300      	movs	r3, #0
 800a75e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a760:	e782      	b.n	800a668 <_dtoa_r+0x7e8>
 800a762:	d099      	beq.n	800a698 <_dtoa_r+0x818>
 800a764:	9a08      	ldr	r2, [sp, #32]
 800a766:	331c      	adds	r3, #28
 800a768:	441a      	add	r2, r3
 800a76a:	4498      	add	r8, r3
 800a76c:	441e      	add	r6, r3
 800a76e:	9208      	str	r2, [sp, #32]
 800a770:	e792      	b.n	800a698 <_dtoa_r+0x818>
 800a772:	4603      	mov	r3, r0
 800a774:	e7f6      	b.n	800a764 <_dtoa_r+0x8e4>
 800a776:	9b07      	ldr	r3, [sp, #28]
 800a778:	9704      	str	r7, [sp, #16]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	dc20      	bgt.n	800a7c0 <_dtoa_r+0x940>
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a782:	2b02      	cmp	r3, #2
 800a784:	dd1e      	ble.n	800a7c4 <_dtoa_r+0x944>
 800a786:	9b00      	ldr	r3, [sp, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f47f aec0 	bne.w	800a50e <_dtoa_r+0x68e>
 800a78e:	4621      	mov	r1, r4
 800a790:	2205      	movs	r2, #5
 800a792:	4658      	mov	r0, fp
 800a794:	f000 fa9a 	bl	800accc <__multadd>
 800a798:	4601      	mov	r1, r0
 800a79a:	4604      	mov	r4, r0
 800a79c:	4648      	mov	r0, r9
 800a79e:	f000 fcad 	bl	800b0fc <__mcmp>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	f77f aeb3 	ble.w	800a50e <_dtoa_r+0x68e>
 800a7a8:	4656      	mov	r6, sl
 800a7aa:	2331      	movs	r3, #49	@ 0x31
 800a7ac:	f806 3b01 	strb.w	r3, [r6], #1
 800a7b0:	9b04      	ldr	r3, [sp, #16]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	e6ae      	b.n	800a516 <_dtoa_r+0x696>
 800a7b8:	9c07      	ldr	r4, [sp, #28]
 800a7ba:	9704      	str	r7, [sp, #16]
 800a7bc:	4625      	mov	r5, r4
 800a7be:	e7f3      	b.n	800a7a8 <_dtoa_r+0x928>
 800a7c0:	9b07      	ldr	r3, [sp, #28]
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 8104 	beq.w	800a9d4 <_dtoa_r+0xb54>
 800a7cc:	2e00      	cmp	r6, #0
 800a7ce:	dd05      	ble.n	800a7dc <_dtoa_r+0x95c>
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4632      	mov	r2, r6
 800a7d4:	4658      	mov	r0, fp
 800a7d6:	f000 fc25 	bl	800b024 <__lshift>
 800a7da:	4605      	mov	r5, r0
 800a7dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d05a      	beq.n	800a898 <_dtoa_r+0xa18>
 800a7e2:	6869      	ldr	r1, [r5, #4]
 800a7e4:	4658      	mov	r0, fp
 800a7e6:	f000 fa0f 	bl	800ac08 <_Balloc>
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	b928      	cbnz	r0, 800a7fa <_dtoa_r+0x97a>
 800a7ee:	4b84      	ldr	r3, [pc, #528]	@ (800aa00 <_dtoa_r+0xb80>)
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a7f6:	f7ff bb5a 	b.w	8009eae <_dtoa_r+0x2e>
 800a7fa:	692a      	ldr	r2, [r5, #16]
 800a7fc:	3202      	adds	r2, #2
 800a7fe:	0092      	lsls	r2, r2, #2
 800a800:	f105 010c 	add.w	r1, r5, #12
 800a804:	300c      	adds	r0, #12
 800a806:	f001 f803 	bl	800b810 <memcpy>
 800a80a:	2201      	movs	r2, #1
 800a80c:	4631      	mov	r1, r6
 800a80e:	4658      	mov	r0, fp
 800a810:	f000 fc08 	bl	800b024 <__lshift>
 800a814:	f10a 0301 	add.w	r3, sl, #1
 800a818:	9307      	str	r3, [sp, #28]
 800a81a:	9b00      	ldr	r3, [sp, #0]
 800a81c:	4453      	add	r3, sl
 800a81e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a820:	9b02      	ldr	r3, [sp, #8]
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	462f      	mov	r7, r5
 800a828:	930a      	str	r3, [sp, #40]	@ 0x28
 800a82a:	4605      	mov	r5, r0
 800a82c:	9b07      	ldr	r3, [sp, #28]
 800a82e:	4621      	mov	r1, r4
 800a830:	3b01      	subs	r3, #1
 800a832:	4648      	mov	r0, r9
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	f7ff fa9a 	bl	8009d6e <quorem>
 800a83a:	4639      	mov	r1, r7
 800a83c:	9002      	str	r0, [sp, #8]
 800a83e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a842:	4648      	mov	r0, r9
 800a844:	f000 fc5a 	bl	800b0fc <__mcmp>
 800a848:	462a      	mov	r2, r5
 800a84a:	9008      	str	r0, [sp, #32]
 800a84c:	4621      	mov	r1, r4
 800a84e:	4658      	mov	r0, fp
 800a850:	f000 fc70 	bl	800b134 <__mdiff>
 800a854:	68c2      	ldr	r2, [r0, #12]
 800a856:	4606      	mov	r6, r0
 800a858:	bb02      	cbnz	r2, 800a89c <_dtoa_r+0xa1c>
 800a85a:	4601      	mov	r1, r0
 800a85c:	4648      	mov	r0, r9
 800a85e:	f000 fc4d 	bl	800b0fc <__mcmp>
 800a862:	4602      	mov	r2, r0
 800a864:	4631      	mov	r1, r6
 800a866:	4658      	mov	r0, fp
 800a868:	920e      	str	r2, [sp, #56]	@ 0x38
 800a86a:	f000 fa0d 	bl	800ac88 <_Bfree>
 800a86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a870:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a872:	9e07      	ldr	r6, [sp, #28]
 800a874:	ea43 0102 	orr.w	r1, r3, r2
 800a878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a87a:	4319      	orrs	r1, r3
 800a87c:	d110      	bne.n	800a8a0 <_dtoa_r+0xa20>
 800a87e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a882:	d029      	beq.n	800a8d8 <_dtoa_r+0xa58>
 800a884:	9b08      	ldr	r3, [sp, #32]
 800a886:	2b00      	cmp	r3, #0
 800a888:	dd02      	ble.n	800a890 <_dtoa_r+0xa10>
 800a88a:	9b02      	ldr	r3, [sp, #8]
 800a88c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a890:	9b00      	ldr	r3, [sp, #0]
 800a892:	f883 8000 	strb.w	r8, [r3]
 800a896:	e63f      	b.n	800a518 <_dtoa_r+0x698>
 800a898:	4628      	mov	r0, r5
 800a89a:	e7bb      	b.n	800a814 <_dtoa_r+0x994>
 800a89c:	2201      	movs	r2, #1
 800a89e:	e7e1      	b.n	800a864 <_dtoa_r+0x9e4>
 800a8a0:	9b08      	ldr	r3, [sp, #32]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	db04      	blt.n	800a8b0 <_dtoa_r+0xa30>
 800a8a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a8a8:	430b      	orrs	r3, r1
 800a8aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8ac:	430b      	orrs	r3, r1
 800a8ae:	d120      	bne.n	800a8f2 <_dtoa_r+0xa72>
 800a8b0:	2a00      	cmp	r2, #0
 800a8b2:	dded      	ble.n	800a890 <_dtoa_r+0xa10>
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	4658      	mov	r0, fp
 800a8ba:	f000 fbb3 	bl	800b024 <__lshift>
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4681      	mov	r9, r0
 800a8c2:	f000 fc1b 	bl	800b0fc <__mcmp>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	dc03      	bgt.n	800a8d2 <_dtoa_r+0xa52>
 800a8ca:	d1e1      	bne.n	800a890 <_dtoa_r+0xa10>
 800a8cc:	f018 0f01 	tst.w	r8, #1
 800a8d0:	d0de      	beq.n	800a890 <_dtoa_r+0xa10>
 800a8d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8d6:	d1d8      	bne.n	800a88a <_dtoa_r+0xa0a>
 800a8d8:	9a00      	ldr	r2, [sp, #0]
 800a8da:	2339      	movs	r3, #57	@ 0x39
 800a8dc:	7013      	strb	r3, [r2, #0]
 800a8de:	4633      	mov	r3, r6
 800a8e0:	461e      	mov	r6, r3
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a8e8:	2a39      	cmp	r2, #57	@ 0x39
 800a8ea:	d052      	beq.n	800a992 <_dtoa_r+0xb12>
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	701a      	strb	r2, [r3, #0]
 800a8f0:	e612      	b.n	800a518 <_dtoa_r+0x698>
 800a8f2:	2a00      	cmp	r2, #0
 800a8f4:	dd07      	ble.n	800a906 <_dtoa_r+0xa86>
 800a8f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8fa:	d0ed      	beq.n	800a8d8 <_dtoa_r+0xa58>
 800a8fc:	9a00      	ldr	r2, [sp, #0]
 800a8fe:	f108 0301 	add.w	r3, r8, #1
 800a902:	7013      	strb	r3, [r2, #0]
 800a904:	e608      	b.n	800a518 <_dtoa_r+0x698>
 800a906:	9b07      	ldr	r3, [sp, #28]
 800a908:	9a07      	ldr	r2, [sp, #28]
 800a90a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a90e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a910:	4293      	cmp	r3, r2
 800a912:	d028      	beq.n	800a966 <_dtoa_r+0xae6>
 800a914:	4649      	mov	r1, r9
 800a916:	2300      	movs	r3, #0
 800a918:	220a      	movs	r2, #10
 800a91a:	4658      	mov	r0, fp
 800a91c:	f000 f9d6 	bl	800accc <__multadd>
 800a920:	42af      	cmp	r7, r5
 800a922:	4681      	mov	r9, r0
 800a924:	f04f 0300 	mov.w	r3, #0
 800a928:	f04f 020a 	mov.w	r2, #10
 800a92c:	4639      	mov	r1, r7
 800a92e:	4658      	mov	r0, fp
 800a930:	d107      	bne.n	800a942 <_dtoa_r+0xac2>
 800a932:	f000 f9cb 	bl	800accc <__multadd>
 800a936:	4607      	mov	r7, r0
 800a938:	4605      	mov	r5, r0
 800a93a:	9b07      	ldr	r3, [sp, #28]
 800a93c:	3301      	adds	r3, #1
 800a93e:	9307      	str	r3, [sp, #28]
 800a940:	e774      	b.n	800a82c <_dtoa_r+0x9ac>
 800a942:	f000 f9c3 	bl	800accc <__multadd>
 800a946:	4629      	mov	r1, r5
 800a948:	4607      	mov	r7, r0
 800a94a:	2300      	movs	r3, #0
 800a94c:	220a      	movs	r2, #10
 800a94e:	4658      	mov	r0, fp
 800a950:	f000 f9bc 	bl	800accc <__multadd>
 800a954:	4605      	mov	r5, r0
 800a956:	e7f0      	b.n	800a93a <_dtoa_r+0xaba>
 800a958:	9b00      	ldr	r3, [sp, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	bfcc      	ite	gt
 800a95e:	461e      	movgt	r6, r3
 800a960:	2601      	movle	r6, #1
 800a962:	4456      	add	r6, sl
 800a964:	2700      	movs	r7, #0
 800a966:	4649      	mov	r1, r9
 800a968:	2201      	movs	r2, #1
 800a96a:	4658      	mov	r0, fp
 800a96c:	f000 fb5a 	bl	800b024 <__lshift>
 800a970:	4621      	mov	r1, r4
 800a972:	4681      	mov	r9, r0
 800a974:	f000 fbc2 	bl	800b0fc <__mcmp>
 800a978:	2800      	cmp	r0, #0
 800a97a:	dcb0      	bgt.n	800a8de <_dtoa_r+0xa5e>
 800a97c:	d102      	bne.n	800a984 <_dtoa_r+0xb04>
 800a97e:	f018 0f01 	tst.w	r8, #1
 800a982:	d1ac      	bne.n	800a8de <_dtoa_r+0xa5e>
 800a984:	4633      	mov	r3, r6
 800a986:	461e      	mov	r6, r3
 800a988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a98c:	2a30      	cmp	r2, #48	@ 0x30
 800a98e:	d0fa      	beq.n	800a986 <_dtoa_r+0xb06>
 800a990:	e5c2      	b.n	800a518 <_dtoa_r+0x698>
 800a992:	459a      	cmp	sl, r3
 800a994:	d1a4      	bne.n	800a8e0 <_dtoa_r+0xa60>
 800a996:	9b04      	ldr	r3, [sp, #16]
 800a998:	3301      	adds	r3, #1
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	2331      	movs	r3, #49	@ 0x31
 800a99e:	f88a 3000 	strb.w	r3, [sl]
 800a9a2:	e5b9      	b.n	800a518 <_dtoa_r+0x698>
 800a9a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aa04 <_dtoa_r+0xb84>
 800a9aa:	b11b      	cbz	r3, 800a9b4 <_dtoa_r+0xb34>
 800a9ac:	f10a 0308 	add.w	r3, sl, #8
 800a9b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a9b2:	6013      	str	r3, [r2, #0]
 800a9b4:	4650      	mov	r0, sl
 800a9b6:	b019      	add	sp, #100	@ 0x64
 800a9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	f77f ae37 	ble.w	800a632 <_dtoa_r+0x7b2>
 800a9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	e655      	b.n	800a678 <_dtoa_r+0x7f8>
 800a9cc:	9b00      	ldr	r3, [sp, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f77f aed6 	ble.w	800a780 <_dtoa_r+0x900>
 800a9d4:	4656      	mov	r6, sl
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	4648      	mov	r0, r9
 800a9da:	f7ff f9c8 	bl	8009d6e <quorem>
 800a9de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a9e2:	f806 8b01 	strb.w	r8, [r6], #1
 800a9e6:	9b00      	ldr	r3, [sp, #0]
 800a9e8:	eba6 020a 	sub.w	r2, r6, sl
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	ddb3      	ble.n	800a958 <_dtoa_r+0xad8>
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	220a      	movs	r2, #10
 800a9f6:	4658      	mov	r0, fp
 800a9f8:	f000 f968 	bl	800accc <__multadd>
 800a9fc:	4681      	mov	r9, r0
 800a9fe:	e7ea      	b.n	800a9d6 <_dtoa_r+0xb56>
 800aa00:	0800bb50 	.word	0x0800bb50
 800aa04:	0800bad4 	.word	0x0800bad4

0800aa08 <_free_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	2900      	cmp	r1, #0
 800aa0e:	d041      	beq.n	800aa94 <_free_r+0x8c>
 800aa10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa14:	1f0c      	subs	r4, r1, #4
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bfb8      	it	lt
 800aa1a:	18e4      	addlt	r4, r4, r3
 800aa1c:	f000 f8e8 	bl	800abf0 <__malloc_lock>
 800aa20:	4a1d      	ldr	r2, [pc, #116]	@ (800aa98 <_free_r+0x90>)
 800aa22:	6813      	ldr	r3, [r2, #0]
 800aa24:	b933      	cbnz	r3, 800aa34 <_free_r+0x2c>
 800aa26:	6063      	str	r3, [r4, #4]
 800aa28:	6014      	str	r4, [r2, #0]
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa30:	f000 b8e4 	b.w	800abfc <__malloc_unlock>
 800aa34:	42a3      	cmp	r3, r4
 800aa36:	d908      	bls.n	800aa4a <_free_r+0x42>
 800aa38:	6820      	ldr	r0, [r4, #0]
 800aa3a:	1821      	adds	r1, r4, r0
 800aa3c:	428b      	cmp	r3, r1
 800aa3e:	bf01      	itttt	eq
 800aa40:	6819      	ldreq	r1, [r3, #0]
 800aa42:	685b      	ldreq	r3, [r3, #4]
 800aa44:	1809      	addeq	r1, r1, r0
 800aa46:	6021      	streq	r1, [r4, #0]
 800aa48:	e7ed      	b.n	800aa26 <_free_r+0x1e>
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	b10b      	cbz	r3, 800aa54 <_free_r+0x4c>
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	d9fa      	bls.n	800aa4a <_free_r+0x42>
 800aa54:	6811      	ldr	r1, [r2, #0]
 800aa56:	1850      	adds	r0, r2, r1
 800aa58:	42a0      	cmp	r0, r4
 800aa5a:	d10b      	bne.n	800aa74 <_free_r+0x6c>
 800aa5c:	6820      	ldr	r0, [r4, #0]
 800aa5e:	4401      	add	r1, r0
 800aa60:	1850      	adds	r0, r2, r1
 800aa62:	4283      	cmp	r3, r0
 800aa64:	6011      	str	r1, [r2, #0]
 800aa66:	d1e0      	bne.n	800aa2a <_free_r+0x22>
 800aa68:	6818      	ldr	r0, [r3, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	6053      	str	r3, [r2, #4]
 800aa6e:	4408      	add	r0, r1
 800aa70:	6010      	str	r0, [r2, #0]
 800aa72:	e7da      	b.n	800aa2a <_free_r+0x22>
 800aa74:	d902      	bls.n	800aa7c <_free_r+0x74>
 800aa76:	230c      	movs	r3, #12
 800aa78:	602b      	str	r3, [r5, #0]
 800aa7a:	e7d6      	b.n	800aa2a <_free_r+0x22>
 800aa7c:	6820      	ldr	r0, [r4, #0]
 800aa7e:	1821      	adds	r1, r4, r0
 800aa80:	428b      	cmp	r3, r1
 800aa82:	bf04      	itt	eq
 800aa84:	6819      	ldreq	r1, [r3, #0]
 800aa86:	685b      	ldreq	r3, [r3, #4]
 800aa88:	6063      	str	r3, [r4, #4]
 800aa8a:	bf04      	itt	eq
 800aa8c:	1809      	addeq	r1, r1, r0
 800aa8e:	6021      	streq	r1, [r4, #0]
 800aa90:	6054      	str	r4, [r2, #4]
 800aa92:	e7ca      	b.n	800aa2a <_free_r+0x22>
 800aa94:	bd38      	pop	{r3, r4, r5, pc}
 800aa96:	bf00      	nop
 800aa98:	20001918 	.word	0x20001918

0800aa9c <malloc>:
 800aa9c:	4b02      	ldr	r3, [pc, #8]	@ (800aaa8 <malloc+0xc>)
 800aa9e:	4601      	mov	r1, r0
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	f000 b825 	b.w	800aaf0 <_malloc_r>
 800aaa6:	bf00      	nop
 800aaa8:	20000038 	.word	0x20000038

0800aaac <sbrk_aligned>:
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	4e0f      	ldr	r6, [pc, #60]	@ (800aaec <sbrk_aligned+0x40>)
 800aab0:	460c      	mov	r4, r1
 800aab2:	6831      	ldr	r1, [r6, #0]
 800aab4:	4605      	mov	r5, r0
 800aab6:	b911      	cbnz	r1, 800aabe <sbrk_aligned+0x12>
 800aab8:	f000 fe9a 	bl	800b7f0 <_sbrk_r>
 800aabc:	6030      	str	r0, [r6, #0]
 800aabe:	4621      	mov	r1, r4
 800aac0:	4628      	mov	r0, r5
 800aac2:	f000 fe95 	bl	800b7f0 <_sbrk_r>
 800aac6:	1c43      	adds	r3, r0, #1
 800aac8:	d103      	bne.n	800aad2 <sbrk_aligned+0x26>
 800aaca:	f04f 34ff 	mov.w	r4, #4294967295
 800aace:	4620      	mov	r0, r4
 800aad0:	bd70      	pop	{r4, r5, r6, pc}
 800aad2:	1cc4      	adds	r4, r0, #3
 800aad4:	f024 0403 	bic.w	r4, r4, #3
 800aad8:	42a0      	cmp	r0, r4
 800aada:	d0f8      	beq.n	800aace <sbrk_aligned+0x22>
 800aadc:	1a21      	subs	r1, r4, r0
 800aade:	4628      	mov	r0, r5
 800aae0:	f000 fe86 	bl	800b7f0 <_sbrk_r>
 800aae4:	3001      	adds	r0, #1
 800aae6:	d1f2      	bne.n	800aace <sbrk_aligned+0x22>
 800aae8:	e7ef      	b.n	800aaca <sbrk_aligned+0x1e>
 800aaea:	bf00      	nop
 800aaec:	20001914 	.word	0x20001914

0800aaf0 <_malloc_r>:
 800aaf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf4:	1ccd      	adds	r5, r1, #3
 800aaf6:	f025 0503 	bic.w	r5, r5, #3
 800aafa:	3508      	adds	r5, #8
 800aafc:	2d0c      	cmp	r5, #12
 800aafe:	bf38      	it	cc
 800ab00:	250c      	movcc	r5, #12
 800ab02:	2d00      	cmp	r5, #0
 800ab04:	4606      	mov	r6, r0
 800ab06:	db01      	blt.n	800ab0c <_malloc_r+0x1c>
 800ab08:	42a9      	cmp	r1, r5
 800ab0a:	d904      	bls.n	800ab16 <_malloc_r+0x26>
 800ab0c:	230c      	movs	r3, #12
 800ab0e:	6033      	str	r3, [r6, #0]
 800ab10:	2000      	movs	r0, #0
 800ab12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abec <_malloc_r+0xfc>
 800ab1a:	f000 f869 	bl	800abf0 <__malloc_lock>
 800ab1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab22:	461c      	mov	r4, r3
 800ab24:	bb44      	cbnz	r4, 800ab78 <_malloc_r+0x88>
 800ab26:	4629      	mov	r1, r5
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f7ff ffbf 	bl	800aaac <sbrk_aligned>
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	4604      	mov	r4, r0
 800ab32:	d158      	bne.n	800abe6 <_malloc_r+0xf6>
 800ab34:	f8d8 4000 	ldr.w	r4, [r8]
 800ab38:	4627      	mov	r7, r4
 800ab3a:	2f00      	cmp	r7, #0
 800ab3c:	d143      	bne.n	800abc6 <_malloc_r+0xd6>
 800ab3e:	2c00      	cmp	r4, #0
 800ab40:	d04b      	beq.n	800abda <_malloc_r+0xea>
 800ab42:	6823      	ldr	r3, [r4, #0]
 800ab44:	4639      	mov	r1, r7
 800ab46:	4630      	mov	r0, r6
 800ab48:	eb04 0903 	add.w	r9, r4, r3
 800ab4c:	f000 fe50 	bl	800b7f0 <_sbrk_r>
 800ab50:	4581      	cmp	r9, r0
 800ab52:	d142      	bne.n	800abda <_malloc_r+0xea>
 800ab54:	6821      	ldr	r1, [r4, #0]
 800ab56:	1a6d      	subs	r5, r5, r1
 800ab58:	4629      	mov	r1, r5
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7ff ffa6 	bl	800aaac <sbrk_aligned>
 800ab60:	3001      	adds	r0, #1
 800ab62:	d03a      	beq.n	800abda <_malloc_r+0xea>
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	442b      	add	r3, r5
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab6e:	685a      	ldr	r2, [r3, #4]
 800ab70:	bb62      	cbnz	r2, 800abcc <_malloc_r+0xdc>
 800ab72:	f8c8 7000 	str.w	r7, [r8]
 800ab76:	e00f      	b.n	800ab98 <_malloc_r+0xa8>
 800ab78:	6822      	ldr	r2, [r4, #0]
 800ab7a:	1b52      	subs	r2, r2, r5
 800ab7c:	d420      	bmi.n	800abc0 <_malloc_r+0xd0>
 800ab7e:	2a0b      	cmp	r2, #11
 800ab80:	d917      	bls.n	800abb2 <_malloc_r+0xc2>
 800ab82:	1961      	adds	r1, r4, r5
 800ab84:	42a3      	cmp	r3, r4
 800ab86:	6025      	str	r5, [r4, #0]
 800ab88:	bf18      	it	ne
 800ab8a:	6059      	strne	r1, [r3, #4]
 800ab8c:	6863      	ldr	r3, [r4, #4]
 800ab8e:	bf08      	it	eq
 800ab90:	f8c8 1000 	streq.w	r1, [r8]
 800ab94:	5162      	str	r2, [r4, r5]
 800ab96:	604b      	str	r3, [r1, #4]
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f000 f82f 	bl	800abfc <__malloc_unlock>
 800ab9e:	f104 000b 	add.w	r0, r4, #11
 800aba2:	1d23      	adds	r3, r4, #4
 800aba4:	f020 0007 	bic.w	r0, r0, #7
 800aba8:	1ac2      	subs	r2, r0, r3
 800abaa:	bf1c      	itt	ne
 800abac:	1a1b      	subne	r3, r3, r0
 800abae:	50a3      	strne	r3, [r4, r2]
 800abb0:	e7af      	b.n	800ab12 <_malloc_r+0x22>
 800abb2:	6862      	ldr	r2, [r4, #4]
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	bf0c      	ite	eq
 800abb8:	f8c8 2000 	streq.w	r2, [r8]
 800abbc:	605a      	strne	r2, [r3, #4]
 800abbe:	e7eb      	b.n	800ab98 <_malloc_r+0xa8>
 800abc0:	4623      	mov	r3, r4
 800abc2:	6864      	ldr	r4, [r4, #4]
 800abc4:	e7ae      	b.n	800ab24 <_malloc_r+0x34>
 800abc6:	463c      	mov	r4, r7
 800abc8:	687f      	ldr	r7, [r7, #4]
 800abca:	e7b6      	b.n	800ab3a <_malloc_r+0x4a>
 800abcc:	461a      	mov	r2, r3
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	d1fb      	bne.n	800abcc <_malloc_r+0xdc>
 800abd4:	2300      	movs	r3, #0
 800abd6:	6053      	str	r3, [r2, #4]
 800abd8:	e7de      	b.n	800ab98 <_malloc_r+0xa8>
 800abda:	230c      	movs	r3, #12
 800abdc:	6033      	str	r3, [r6, #0]
 800abde:	4630      	mov	r0, r6
 800abe0:	f000 f80c 	bl	800abfc <__malloc_unlock>
 800abe4:	e794      	b.n	800ab10 <_malloc_r+0x20>
 800abe6:	6005      	str	r5, [r0, #0]
 800abe8:	e7d6      	b.n	800ab98 <_malloc_r+0xa8>
 800abea:	bf00      	nop
 800abec:	20001918 	.word	0x20001918

0800abf0 <__malloc_lock>:
 800abf0:	4801      	ldr	r0, [pc, #4]	@ (800abf8 <__malloc_lock+0x8>)
 800abf2:	f7ff b8b2 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 800abf6:	bf00      	nop
 800abf8:	20001910 	.word	0x20001910

0800abfc <__malloc_unlock>:
 800abfc:	4801      	ldr	r0, [pc, #4]	@ (800ac04 <__malloc_unlock+0x8>)
 800abfe:	f7ff b8ad 	b.w	8009d5c <__retarget_lock_release_recursive>
 800ac02:	bf00      	nop
 800ac04:	20001910 	.word	0x20001910

0800ac08 <_Balloc>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	69c6      	ldr	r6, [r0, #28]
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	460d      	mov	r5, r1
 800ac10:	b976      	cbnz	r6, 800ac30 <_Balloc+0x28>
 800ac12:	2010      	movs	r0, #16
 800ac14:	f7ff ff42 	bl	800aa9c <malloc>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	61e0      	str	r0, [r4, #28]
 800ac1c:	b920      	cbnz	r0, 800ac28 <_Balloc+0x20>
 800ac1e:	4b18      	ldr	r3, [pc, #96]	@ (800ac80 <_Balloc+0x78>)
 800ac20:	4818      	ldr	r0, [pc, #96]	@ (800ac84 <_Balloc+0x7c>)
 800ac22:	216b      	movs	r1, #107	@ 0x6b
 800ac24:	f000 fe02 	bl	800b82c <__assert_func>
 800ac28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac2c:	6006      	str	r6, [r0, #0]
 800ac2e:	60c6      	str	r6, [r0, #12]
 800ac30:	69e6      	ldr	r6, [r4, #28]
 800ac32:	68f3      	ldr	r3, [r6, #12]
 800ac34:	b183      	cbz	r3, 800ac58 <_Balloc+0x50>
 800ac36:	69e3      	ldr	r3, [r4, #28]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac3e:	b9b8      	cbnz	r0, 800ac70 <_Balloc+0x68>
 800ac40:	2101      	movs	r1, #1
 800ac42:	fa01 f605 	lsl.w	r6, r1, r5
 800ac46:	1d72      	adds	r2, r6, #5
 800ac48:	0092      	lsls	r2, r2, #2
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 fe0c 	bl	800b868 <_calloc_r>
 800ac50:	b160      	cbz	r0, 800ac6c <_Balloc+0x64>
 800ac52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac56:	e00e      	b.n	800ac76 <_Balloc+0x6e>
 800ac58:	2221      	movs	r2, #33	@ 0x21
 800ac5a:	2104      	movs	r1, #4
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f000 fe03 	bl	800b868 <_calloc_r>
 800ac62:	69e3      	ldr	r3, [r4, #28]
 800ac64:	60f0      	str	r0, [r6, #12]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1e4      	bne.n	800ac36 <_Balloc+0x2e>
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	bd70      	pop	{r4, r5, r6, pc}
 800ac70:	6802      	ldr	r2, [r0, #0]
 800ac72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac76:	2300      	movs	r3, #0
 800ac78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac7c:	e7f7      	b.n	800ac6e <_Balloc+0x66>
 800ac7e:	bf00      	nop
 800ac80:	0800bae1 	.word	0x0800bae1
 800ac84:	0800bb61 	.word	0x0800bb61

0800ac88 <_Bfree>:
 800ac88:	b570      	push	{r4, r5, r6, lr}
 800ac8a:	69c6      	ldr	r6, [r0, #28]
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	b976      	cbnz	r6, 800acb0 <_Bfree+0x28>
 800ac92:	2010      	movs	r0, #16
 800ac94:	f7ff ff02 	bl	800aa9c <malloc>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	61e8      	str	r0, [r5, #28]
 800ac9c:	b920      	cbnz	r0, 800aca8 <_Bfree+0x20>
 800ac9e:	4b09      	ldr	r3, [pc, #36]	@ (800acc4 <_Bfree+0x3c>)
 800aca0:	4809      	ldr	r0, [pc, #36]	@ (800acc8 <_Bfree+0x40>)
 800aca2:	218f      	movs	r1, #143	@ 0x8f
 800aca4:	f000 fdc2 	bl	800b82c <__assert_func>
 800aca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acac:	6006      	str	r6, [r0, #0]
 800acae:	60c6      	str	r6, [r0, #12]
 800acb0:	b13c      	cbz	r4, 800acc2 <_Bfree+0x3a>
 800acb2:	69eb      	ldr	r3, [r5, #28]
 800acb4:	6862      	ldr	r2, [r4, #4]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800acbc:	6021      	str	r1, [r4, #0]
 800acbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acc2:	bd70      	pop	{r4, r5, r6, pc}
 800acc4:	0800bae1 	.word	0x0800bae1
 800acc8:	0800bb61 	.word	0x0800bb61

0800accc <__multadd>:
 800accc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd0:	690d      	ldr	r5, [r1, #16]
 800acd2:	4607      	mov	r7, r0
 800acd4:	460c      	mov	r4, r1
 800acd6:	461e      	mov	r6, r3
 800acd8:	f101 0c14 	add.w	ip, r1, #20
 800acdc:	2000      	movs	r0, #0
 800acde:	f8dc 3000 	ldr.w	r3, [ip]
 800ace2:	b299      	uxth	r1, r3
 800ace4:	fb02 6101 	mla	r1, r2, r1, r6
 800ace8:	0c1e      	lsrs	r6, r3, #16
 800acea:	0c0b      	lsrs	r3, r1, #16
 800acec:	fb02 3306 	mla	r3, r2, r6, r3
 800acf0:	b289      	uxth	r1, r1
 800acf2:	3001      	adds	r0, #1
 800acf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800acf8:	4285      	cmp	r5, r0
 800acfa:	f84c 1b04 	str.w	r1, [ip], #4
 800acfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad02:	dcec      	bgt.n	800acde <__multadd+0x12>
 800ad04:	b30e      	cbz	r6, 800ad4a <__multadd+0x7e>
 800ad06:	68a3      	ldr	r3, [r4, #8]
 800ad08:	42ab      	cmp	r3, r5
 800ad0a:	dc19      	bgt.n	800ad40 <__multadd+0x74>
 800ad0c:	6861      	ldr	r1, [r4, #4]
 800ad0e:	4638      	mov	r0, r7
 800ad10:	3101      	adds	r1, #1
 800ad12:	f7ff ff79 	bl	800ac08 <_Balloc>
 800ad16:	4680      	mov	r8, r0
 800ad18:	b928      	cbnz	r0, 800ad26 <__multadd+0x5a>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ad50 <__multadd+0x84>)
 800ad1e:	480d      	ldr	r0, [pc, #52]	@ (800ad54 <__multadd+0x88>)
 800ad20:	21ba      	movs	r1, #186	@ 0xba
 800ad22:	f000 fd83 	bl	800b82c <__assert_func>
 800ad26:	6922      	ldr	r2, [r4, #16]
 800ad28:	3202      	adds	r2, #2
 800ad2a:	f104 010c 	add.w	r1, r4, #12
 800ad2e:	0092      	lsls	r2, r2, #2
 800ad30:	300c      	adds	r0, #12
 800ad32:	f000 fd6d 	bl	800b810 <memcpy>
 800ad36:	4621      	mov	r1, r4
 800ad38:	4638      	mov	r0, r7
 800ad3a:	f7ff ffa5 	bl	800ac88 <_Bfree>
 800ad3e:	4644      	mov	r4, r8
 800ad40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad44:	3501      	adds	r5, #1
 800ad46:	615e      	str	r6, [r3, #20]
 800ad48:	6125      	str	r5, [r4, #16]
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad50:	0800bb50 	.word	0x0800bb50
 800ad54:	0800bb61 	.word	0x0800bb61

0800ad58 <__hi0bits>:
 800ad58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	bf36      	itet	cc
 800ad60:	0403      	lslcc	r3, r0, #16
 800ad62:	2000      	movcs	r0, #0
 800ad64:	2010      	movcc	r0, #16
 800ad66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad6a:	bf3c      	itt	cc
 800ad6c:	021b      	lslcc	r3, r3, #8
 800ad6e:	3008      	addcc	r0, #8
 800ad70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad74:	bf3c      	itt	cc
 800ad76:	011b      	lslcc	r3, r3, #4
 800ad78:	3004      	addcc	r0, #4
 800ad7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad7e:	bf3c      	itt	cc
 800ad80:	009b      	lslcc	r3, r3, #2
 800ad82:	3002      	addcc	r0, #2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	db05      	blt.n	800ad94 <__hi0bits+0x3c>
 800ad88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ad8c:	f100 0001 	add.w	r0, r0, #1
 800ad90:	bf08      	it	eq
 800ad92:	2020      	moveq	r0, #32
 800ad94:	4770      	bx	lr

0800ad96 <__lo0bits>:
 800ad96:	6803      	ldr	r3, [r0, #0]
 800ad98:	4602      	mov	r2, r0
 800ad9a:	f013 0007 	ands.w	r0, r3, #7
 800ad9e:	d00b      	beq.n	800adb8 <__lo0bits+0x22>
 800ada0:	07d9      	lsls	r1, r3, #31
 800ada2:	d421      	bmi.n	800ade8 <__lo0bits+0x52>
 800ada4:	0798      	lsls	r0, r3, #30
 800ada6:	bf49      	itett	mi
 800ada8:	085b      	lsrmi	r3, r3, #1
 800adaa:	089b      	lsrpl	r3, r3, #2
 800adac:	2001      	movmi	r0, #1
 800adae:	6013      	strmi	r3, [r2, #0]
 800adb0:	bf5c      	itt	pl
 800adb2:	6013      	strpl	r3, [r2, #0]
 800adb4:	2002      	movpl	r0, #2
 800adb6:	4770      	bx	lr
 800adb8:	b299      	uxth	r1, r3
 800adba:	b909      	cbnz	r1, 800adc0 <__lo0bits+0x2a>
 800adbc:	0c1b      	lsrs	r3, r3, #16
 800adbe:	2010      	movs	r0, #16
 800adc0:	b2d9      	uxtb	r1, r3
 800adc2:	b909      	cbnz	r1, 800adc8 <__lo0bits+0x32>
 800adc4:	3008      	adds	r0, #8
 800adc6:	0a1b      	lsrs	r3, r3, #8
 800adc8:	0719      	lsls	r1, r3, #28
 800adca:	bf04      	itt	eq
 800adcc:	091b      	lsreq	r3, r3, #4
 800adce:	3004      	addeq	r0, #4
 800add0:	0799      	lsls	r1, r3, #30
 800add2:	bf04      	itt	eq
 800add4:	089b      	lsreq	r3, r3, #2
 800add6:	3002      	addeq	r0, #2
 800add8:	07d9      	lsls	r1, r3, #31
 800adda:	d403      	bmi.n	800ade4 <__lo0bits+0x4e>
 800addc:	085b      	lsrs	r3, r3, #1
 800adde:	f100 0001 	add.w	r0, r0, #1
 800ade2:	d003      	beq.n	800adec <__lo0bits+0x56>
 800ade4:	6013      	str	r3, [r2, #0]
 800ade6:	4770      	bx	lr
 800ade8:	2000      	movs	r0, #0
 800adea:	4770      	bx	lr
 800adec:	2020      	movs	r0, #32
 800adee:	4770      	bx	lr

0800adf0 <__i2b>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	460c      	mov	r4, r1
 800adf4:	2101      	movs	r1, #1
 800adf6:	f7ff ff07 	bl	800ac08 <_Balloc>
 800adfa:	4602      	mov	r2, r0
 800adfc:	b928      	cbnz	r0, 800ae0a <__i2b+0x1a>
 800adfe:	4b05      	ldr	r3, [pc, #20]	@ (800ae14 <__i2b+0x24>)
 800ae00:	4805      	ldr	r0, [pc, #20]	@ (800ae18 <__i2b+0x28>)
 800ae02:	f240 1145 	movw	r1, #325	@ 0x145
 800ae06:	f000 fd11 	bl	800b82c <__assert_func>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	6144      	str	r4, [r0, #20]
 800ae0e:	6103      	str	r3, [r0, #16]
 800ae10:	bd10      	pop	{r4, pc}
 800ae12:	bf00      	nop
 800ae14:	0800bb50 	.word	0x0800bb50
 800ae18:	0800bb61 	.word	0x0800bb61

0800ae1c <__multiply>:
 800ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae20:	4614      	mov	r4, r2
 800ae22:	690a      	ldr	r2, [r1, #16]
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	bfa8      	it	ge
 800ae2a:	4623      	movge	r3, r4
 800ae2c:	460f      	mov	r7, r1
 800ae2e:	bfa4      	itt	ge
 800ae30:	460c      	movge	r4, r1
 800ae32:	461f      	movge	r7, r3
 800ae34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ae38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ae3c:	68a3      	ldr	r3, [r4, #8]
 800ae3e:	6861      	ldr	r1, [r4, #4]
 800ae40:	eb0a 0609 	add.w	r6, sl, r9
 800ae44:	42b3      	cmp	r3, r6
 800ae46:	b085      	sub	sp, #20
 800ae48:	bfb8      	it	lt
 800ae4a:	3101      	addlt	r1, #1
 800ae4c:	f7ff fedc 	bl	800ac08 <_Balloc>
 800ae50:	b930      	cbnz	r0, 800ae60 <__multiply+0x44>
 800ae52:	4602      	mov	r2, r0
 800ae54:	4b44      	ldr	r3, [pc, #272]	@ (800af68 <__multiply+0x14c>)
 800ae56:	4845      	ldr	r0, [pc, #276]	@ (800af6c <__multiply+0x150>)
 800ae58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ae5c:	f000 fce6 	bl	800b82c <__assert_func>
 800ae60:	f100 0514 	add.w	r5, r0, #20
 800ae64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae68:	462b      	mov	r3, r5
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	4543      	cmp	r3, r8
 800ae6e:	d321      	bcc.n	800aeb4 <__multiply+0x98>
 800ae70:	f107 0114 	add.w	r1, r7, #20
 800ae74:	f104 0214 	add.w	r2, r4, #20
 800ae78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ae7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ae80:	9302      	str	r3, [sp, #8]
 800ae82:	1b13      	subs	r3, r2, r4
 800ae84:	3b15      	subs	r3, #21
 800ae86:	f023 0303 	bic.w	r3, r3, #3
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	f104 0715 	add.w	r7, r4, #21
 800ae90:	42ba      	cmp	r2, r7
 800ae92:	bf38      	it	cc
 800ae94:	2304      	movcc	r3, #4
 800ae96:	9301      	str	r3, [sp, #4]
 800ae98:	9b02      	ldr	r3, [sp, #8]
 800ae9a:	9103      	str	r1, [sp, #12]
 800ae9c:	428b      	cmp	r3, r1
 800ae9e:	d80c      	bhi.n	800aeba <__multiply+0x9e>
 800aea0:	2e00      	cmp	r6, #0
 800aea2:	dd03      	ble.n	800aeac <__multiply+0x90>
 800aea4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d05b      	beq.n	800af64 <__multiply+0x148>
 800aeac:	6106      	str	r6, [r0, #16]
 800aeae:	b005      	add	sp, #20
 800aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb4:	f843 2b04 	str.w	r2, [r3], #4
 800aeb8:	e7d8      	b.n	800ae6c <__multiply+0x50>
 800aeba:	f8b1 a000 	ldrh.w	sl, [r1]
 800aebe:	f1ba 0f00 	cmp.w	sl, #0
 800aec2:	d024      	beq.n	800af0e <__multiply+0xf2>
 800aec4:	f104 0e14 	add.w	lr, r4, #20
 800aec8:	46a9      	mov	r9, r5
 800aeca:	f04f 0c00 	mov.w	ip, #0
 800aece:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aed2:	f8d9 3000 	ldr.w	r3, [r9]
 800aed6:	fa1f fb87 	uxth.w	fp, r7
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	fb0a 330b 	mla	r3, sl, fp, r3
 800aee0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aee4:	f8d9 7000 	ldr.w	r7, [r9]
 800aee8:	4463      	add	r3, ip
 800aeea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aeee:	fb0a c70b 	mla	r7, sl, fp, ip
 800aef2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aefc:	4572      	cmp	r2, lr
 800aefe:	f849 3b04 	str.w	r3, [r9], #4
 800af02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af06:	d8e2      	bhi.n	800aece <__multiply+0xb2>
 800af08:	9b01      	ldr	r3, [sp, #4]
 800af0a:	f845 c003 	str.w	ip, [r5, r3]
 800af0e:	9b03      	ldr	r3, [sp, #12]
 800af10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af14:	3104      	adds	r1, #4
 800af16:	f1b9 0f00 	cmp.w	r9, #0
 800af1a:	d021      	beq.n	800af60 <__multiply+0x144>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	f104 0c14 	add.w	ip, r4, #20
 800af22:	46ae      	mov	lr, r5
 800af24:	f04f 0a00 	mov.w	sl, #0
 800af28:	f8bc b000 	ldrh.w	fp, [ip]
 800af2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800af30:	fb09 770b 	mla	r7, r9, fp, r7
 800af34:	4457      	add	r7, sl
 800af36:	b29b      	uxth	r3, r3
 800af38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af3c:	f84e 3b04 	str.w	r3, [lr], #4
 800af40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af48:	f8be 3000 	ldrh.w	r3, [lr]
 800af4c:	fb09 330a 	mla	r3, r9, sl, r3
 800af50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800af54:	4562      	cmp	r2, ip
 800af56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af5a:	d8e5      	bhi.n	800af28 <__multiply+0x10c>
 800af5c:	9f01      	ldr	r7, [sp, #4]
 800af5e:	51eb      	str	r3, [r5, r7]
 800af60:	3504      	adds	r5, #4
 800af62:	e799      	b.n	800ae98 <__multiply+0x7c>
 800af64:	3e01      	subs	r6, #1
 800af66:	e79b      	b.n	800aea0 <__multiply+0x84>
 800af68:	0800bb50 	.word	0x0800bb50
 800af6c:	0800bb61 	.word	0x0800bb61

0800af70 <__pow5mult>:
 800af70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af74:	4615      	mov	r5, r2
 800af76:	f012 0203 	ands.w	r2, r2, #3
 800af7a:	4607      	mov	r7, r0
 800af7c:	460e      	mov	r6, r1
 800af7e:	d007      	beq.n	800af90 <__pow5mult+0x20>
 800af80:	4c25      	ldr	r4, [pc, #148]	@ (800b018 <__pow5mult+0xa8>)
 800af82:	3a01      	subs	r2, #1
 800af84:	2300      	movs	r3, #0
 800af86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af8a:	f7ff fe9f 	bl	800accc <__multadd>
 800af8e:	4606      	mov	r6, r0
 800af90:	10ad      	asrs	r5, r5, #2
 800af92:	d03d      	beq.n	800b010 <__pow5mult+0xa0>
 800af94:	69fc      	ldr	r4, [r7, #28]
 800af96:	b97c      	cbnz	r4, 800afb8 <__pow5mult+0x48>
 800af98:	2010      	movs	r0, #16
 800af9a:	f7ff fd7f 	bl	800aa9c <malloc>
 800af9e:	4602      	mov	r2, r0
 800afa0:	61f8      	str	r0, [r7, #28]
 800afa2:	b928      	cbnz	r0, 800afb0 <__pow5mult+0x40>
 800afa4:	4b1d      	ldr	r3, [pc, #116]	@ (800b01c <__pow5mult+0xac>)
 800afa6:	481e      	ldr	r0, [pc, #120]	@ (800b020 <__pow5mult+0xb0>)
 800afa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800afac:	f000 fc3e 	bl	800b82c <__assert_func>
 800afb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afb4:	6004      	str	r4, [r0, #0]
 800afb6:	60c4      	str	r4, [r0, #12]
 800afb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800afbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afc0:	b94c      	cbnz	r4, 800afd6 <__pow5mult+0x66>
 800afc2:	f240 2171 	movw	r1, #625	@ 0x271
 800afc6:	4638      	mov	r0, r7
 800afc8:	f7ff ff12 	bl	800adf0 <__i2b>
 800afcc:	2300      	movs	r3, #0
 800afce:	f8c8 0008 	str.w	r0, [r8, #8]
 800afd2:	4604      	mov	r4, r0
 800afd4:	6003      	str	r3, [r0, #0]
 800afd6:	f04f 0900 	mov.w	r9, #0
 800afda:	07eb      	lsls	r3, r5, #31
 800afdc:	d50a      	bpl.n	800aff4 <__pow5mult+0x84>
 800afde:	4631      	mov	r1, r6
 800afe0:	4622      	mov	r2, r4
 800afe2:	4638      	mov	r0, r7
 800afe4:	f7ff ff1a 	bl	800ae1c <__multiply>
 800afe8:	4631      	mov	r1, r6
 800afea:	4680      	mov	r8, r0
 800afec:	4638      	mov	r0, r7
 800afee:	f7ff fe4b 	bl	800ac88 <_Bfree>
 800aff2:	4646      	mov	r6, r8
 800aff4:	106d      	asrs	r5, r5, #1
 800aff6:	d00b      	beq.n	800b010 <__pow5mult+0xa0>
 800aff8:	6820      	ldr	r0, [r4, #0]
 800affa:	b938      	cbnz	r0, 800b00c <__pow5mult+0x9c>
 800affc:	4622      	mov	r2, r4
 800affe:	4621      	mov	r1, r4
 800b000:	4638      	mov	r0, r7
 800b002:	f7ff ff0b 	bl	800ae1c <__multiply>
 800b006:	6020      	str	r0, [r4, #0]
 800b008:	f8c0 9000 	str.w	r9, [r0]
 800b00c:	4604      	mov	r4, r0
 800b00e:	e7e4      	b.n	800afda <__pow5mult+0x6a>
 800b010:	4630      	mov	r0, r6
 800b012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b016:	bf00      	nop
 800b018:	0800bbbc 	.word	0x0800bbbc
 800b01c:	0800bae1 	.word	0x0800bae1
 800b020:	0800bb61 	.word	0x0800bb61

0800b024 <__lshift>:
 800b024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b028:	460c      	mov	r4, r1
 800b02a:	6849      	ldr	r1, [r1, #4]
 800b02c:	6923      	ldr	r3, [r4, #16]
 800b02e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b032:	68a3      	ldr	r3, [r4, #8]
 800b034:	4607      	mov	r7, r0
 800b036:	4691      	mov	r9, r2
 800b038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b03c:	f108 0601 	add.w	r6, r8, #1
 800b040:	42b3      	cmp	r3, r6
 800b042:	db0b      	blt.n	800b05c <__lshift+0x38>
 800b044:	4638      	mov	r0, r7
 800b046:	f7ff fddf 	bl	800ac08 <_Balloc>
 800b04a:	4605      	mov	r5, r0
 800b04c:	b948      	cbnz	r0, 800b062 <__lshift+0x3e>
 800b04e:	4602      	mov	r2, r0
 800b050:	4b28      	ldr	r3, [pc, #160]	@ (800b0f4 <__lshift+0xd0>)
 800b052:	4829      	ldr	r0, [pc, #164]	@ (800b0f8 <__lshift+0xd4>)
 800b054:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b058:	f000 fbe8 	bl	800b82c <__assert_func>
 800b05c:	3101      	adds	r1, #1
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	e7ee      	b.n	800b040 <__lshift+0x1c>
 800b062:	2300      	movs	r3, #0
 800b064:	f100 0114 	add.w	r1, r0, #20
 800b068:	f100 0210 	add.w	r2, r0, #16
 800b06c:	4618      	mov	r0, r3
 800b06e:	4553      	cmp	r3, sl
 800b070:	db33      	blt.n	800b0da <__lshift+0xb6>
 800b072:	6920      	ldr	r0, [r4, #16]
 800b074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b078:	f104 0314 	add.w	r3, r4, #20
 800b07c:	f019 091f 	ands.w	r9, r9, #31
 800b080:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b084:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b088:	d02b      	beq.n	800b0e2 <__lshift+0xbe>
 800b08a:	f1c9 0e20 	rsb	lr, r9, #32
 800b08e:	468a      	mov	sl, r1
 800b090:	2200      	movs	r2, #0
 800b092:	6818      	ldr	r0, [r3, #0]
 800b094:	fa00 f009 	lsl.w	r0, r0, r9
 800b098:	4310      	orrs	r0, r2
 800b09a:	f84a 0b04 	str.w	r0, [sl], #4
 800b09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0a2:	459c      	cmp	ip, r3
 800b0a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b0a8:	d8f3      	bhi.n	800b092 <__lshift+0x6e>
 800b0aa:	ebac 0304 	sub.w	r3, ip, r4
 800b0ae:	3b15      	subs	r3, #21
 800b0b0:	f023 0303 	bic.w	r3, r3, #3
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	f104 0015 	add.w	r0, r4, #21
 800b0ba:	4584      	cmp	ip, r0
 800b0bc:	bf38      	it	cc
 800b0be:	2304      	movcc	r3, #4
 800b0c0:	50ca      	str	r2, [r1, r3]
 800b0c2:	b10a      	cbz	r2, 800b0c8 <__lshift+0xa4>
 800b0c4:	f108 0602 	add.w	r6, r8, #2
 800b0c8:	3e01      	subs	r6, #1
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	612e      	str	r6, [r5, #16]
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	f7ff fdda 	bl	800ac88 <_Bfree>
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0da:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0de:	3301      	adds	r3, #1
 800b0e0:	e7c5      	b.n	800b06e <__lshift+0x4a>
 800b0e2:	3904      	subs	r1, #4
 800b0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0ec:	459c      	cmp	ip, r3
 800b0ee:	d8f9      	bhi.n	800b0e4 <__lshift+0xc0>
 800b0f0:	e7ea      	b.n	800b0c8 <__lshift+0xa4>
 800b0f2:	bf00      	nop
 800b0f4:	0800bb50 	.word	0x0800bb50
 800b0f8:	0800bb61 	.word	0x0800bb61

0800b0fc <__mcmp>:
 800b0fc:	690a      	ldr	r2, [r1, #16]
 800b0fe:	4603      	mov	r3, r0
 800b100:	6900      	ldr	r0, [r0, #16]
 800b102:	1a80      	subs	r0, r0, r2
 800b104:	b530      	push	{r4, r5, lr}
 800b106:	d10e      	bne.n	800b126 <__mcmp+0x2a>
 800b108:	3314      	adds	r3, #20
 800b10a:	3114      	adds	r1, #20
 800b10c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b110:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b114:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b118:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b11c:	4295      	cmp	r5, r2
 800b11e:	d003      	beq.n	800b128 <__mcmp+0x2c>
 800b120:	d205      	bcs.n	800b12e <__mcmp+0x32>
 800b122:	f04f 30ff 	mov.w	r0, #4294967295
 800b126:	bd30      	pop	{r4, r5, pc}
 800b128:	42a3      	cmp	r3, r4
 800b12a:	d3f3      	bcc.n	800b114 <__mcmp+0x18>
 800b12c:	e7fb      	b.n	800b126 <__mcmp+0x2a>
 800b12e:	2001      	movs	r0, #1
 800b130:	e7f9      	b.n	800b126 <__mcmp+0x2a>
	...

0800b134 <__mdiff>:
 800b134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b138:	4689      	mov	r9, r1
 800b13a:	4606      	mov	r6, r0
 800b13c:	4611      	mov	r1, r2
 800b13e:	4648      	mov	r0, r9
 800b140:	4614      	mov	r4, r2
 800b142:	f7ff ffdb 	bl	800b0fc <__mcmp>
 800b146:	1e05      	subs	r5, r0, #0
 800b148:	d112      	bne.n	800b170 <__mdiff+0x3c>
 800b14a:	4629      	mov	r1, r5
 800b14c:	4630      	mov	r0, r6
 800b14e:	f7ff fd5b 	bl	800ac08 <_Balloc>
 800b152:	4602      	mov	r2, r0
 800b154:	b928      	cbnz	r0, 800b162 <__mdiff+0x2e>
 800b156:	4b3f      	ldr	r3, [pc, #252]	@ (800b254 <__mdiff+0x120>)
 800b158:	f240 2137 	movw	r1, #567	@ 0x237
 800b15c:	483e      	ldr	r0, [pc, #248]	@ (800b258 <__mdiff+0x124>)
 800b15e:	f000 fb65 	bl	800b82c <__assert_func>
 800b162:	2301      	movs	r3, #1
 800b164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b168:	4610      	mov	r0, r2
 800b16a:	b003      	add	sp, #12
 800b16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b170:	bfbc      	itt	lt
 800b172:	464b      	movlt	r3, r9
 800b174:	46a1      	movlt	r9, r4
 800b176:	4630      	mov	r0, r6
 800b178:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b17c:	bfba      	itte	lt
 800b17e:	461c      	movlt	r4, r3
 800b180:	2501      	movlt	r5, #1
 800b182:	2500      	movge	r5, #0
 800b184:	f7ff fd40 	bl	800ac08 <_Balloc>
 800b188:	4602      	mov	r2, r0
 800b18a:	b918      	cbnz	r0, 800b194 <__mdiff+0x60>
 800b18c:	4b31      	ldr	r3, [pc, #196]	@ (800b254 <__mdiff+0x120>)
 800b18e:	f240 2145 	movw	r1, #581	@ 0x245
 800b192:	e7e3      	b.n	800b15c <__mdiff+0x28>
 800b194:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b198:	6926      	ldr	r6, [r4, #16]
 800b19a:	60c5      	str	r5, [r0, #12]
 800b19c:	f109 0310 	add.w	r3, r9, #16
 800b1a0:	f109 0514 	add.w	r5, r9, #20
 800b1a4:	f104 0e14 	add.w	lr, r4, #20
 800b1a8:	f100 0b14 	add.w	fp, r0, #20
 800b1ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b1b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b1b4:	9301      	str	r3, [sp, #4]
 800b1b6:	46d9      	mov	r9, fp
 800b1b8:	f04f 0c00 	mov.w	ip, #0
 800b1bc:	9b01      	ldr	r3, [sp, #4]
 800b1be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b1c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	fa1f f38a 	uxth.w	r3, sl
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	b283      	uxth	r3, r0
 800b1d0:	1acb      	subs	r3, r1, r3
 800b1d2:	0c00      	lsrs	r0, r0, #16
 800b1d4:	4463      	add	r3, ip
 800b1d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b1da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b1e4:	4576      	cmp	r6, lr
 800b1e6:	f849 3b04 	str.w	r3, [r9], #4
 800b1ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1ee:	d8e5      	bhi.n	800b1bc <__mdiff+0x88>
 800b1f0:	1b33      	subs	r3, r6, r4
 800b1f2:	3b15      	subs	r3, #21
 800b1f4:	f023 0303 	bic.w	r3, r3, #3
 800b1f8:	3415      	adds	r4, #21
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	42a6      	cmp	r6, r4
 800b1fe:	bf38      	it	cc
 800b200:	2304      	movcc	r3, #4
 800b202:	441d      	add	r5, r3
 800b204:	445b      	add	r3, fp
 800b206:	461e      	mov	r6, r3
 800b208:	462c      	mov	r4, r5
 800b20a:	4544      	cmp	r4, r8
 800b20c:	d30e      	bcc.n	800b22c <__mdiff+0xf8>
 800b20e:	f108 0103 	add.w	r1, r8, #3
 800b212:	1b49      	subs	r1, r1, r5
 800b214:	f021 0103 	bic.w	r1, r1, #3
 800b218:	3d03      	subs	r5, #3
 800b21a:	45a8      	cmp	r8, r5
 800b21c:	bf38      	it	cc
 800b21e:	2100      	movcc	r1, #0
 800b220:	440b      	add	r3, r1
 800b222:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b226:	b191      	cbz	r1, 800b24e <__mdiff+0x11a>
 800b228:	6117      	str	r7, [r2, #16]
 800b22a:	e79d      	b.n	800b168 <__mdiff+0x34>
 800b22c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b230:	46e6      	mov	lr, ip
 800b232:	0c08      	lsrs	r0, r1, #16
 800b234:	fa1c fc81 	uxtah	ip, ip, r1
 800b238:	4471      	add	r1, lr
 800b23a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b23e:	b289      	uxth	r1, r1
 800b240:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b244:	f846 1b04 	str.w	r1, [r6], #4
 800b248:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b24c:	e7dd      	b.n	800b20a <__mdiff+0xd6>
 800b24e:	3f01      	subs	r7, #1
 800b250:	e7e7      	b.n	800b222 <__mdiff+0xee>
 800b252:	bf00      	nop
 800b254:	0800bb50 	.word	0x0800bb50
 800b258:	0800bb61 	.word	0x0800bb61

0800b25c <__d2b>:
 800b25c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b260:	460f      	mov	r7, r1
 800b262:	2101      	movs	r1, #1
 800b264:	ec59 8b10 	vmov	r8, r9, d0
 800b268:	4616      	mov	r6, r2
 800b26a:	f7ff fccd 	bl	800ac08 <_Balloc>
 800b26e:	4604      	mov	r4, r0
 800b270:	b930      	cbnz	r0, 800b280 <__d2b+0x24>
 800b272:	4602      	mov	r2, r0
 800b274:	4b23      	ldr	r3, [pc, #140]	@ (800b304 <__d2b+0xa8>)
 800b276:	4824      	ldr	r0, [pc, #144]	@ (800b308 <__d2b+0xac>)
 800b278:	f240 310f 	movw	r1, #783	@ 0x30f
 800b27c:	f000 fad6 	bl	800b82c <__assert_func>
 800b280:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b284:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b288:	b10d      	cbz	r5, 800b28e <__d2b+0x32>
 800b28a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b28e:	9301      	str	r3, [sp, #4]
 800b290:	f1b8 0300 	subs.w	r3, r8, #0
 800b294:	d023      	beq.n	800b2de <__d2b+0x82>
 800b296:	4668      	mov	r0, sp
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	f7ff fd7c 	bl	800ad96 <__lo0bits>
 800b29e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2a2:	b1d0      	cbz	r0, 800b2da <__d2b+0x7e>
 800b2a4:	f1c0 0320 	rsb	r3, r0, #32
 800b2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	40c2      	lsrs	r2, r0
 800b2b0:	6163      	str	r3, [r4, #20]
 800b2b2:	9201      	str	r2, [sp, #4]
 800b2b4:	9b01      	ldr	r3, [sp, #4]
 800b2b6:	61a3      	str	r3, [r4, #24]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bf0c      	ite	eq
 800b2bc:	2201      	moveq	r2, #1
 800b2be:	2202      	movne	r2, #2
 800b2c0:	6122      	str	r2, [r4, #16]
 800b2c2:	b1a5      	cbz	r5, 800b2ee <__d2b+0x92>
 800b2c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b2c8:	4405      	add	r5, r0
 800b2ca:	603d      	str	r5, [r7, #0]
 800b2cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b2d0:	6030      	str	r0, [r6, #0]
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	b003      	add	sp, #12
 800b2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2da:	6161      	str	r1, [r4, #20]
 800b2dc:	e7ea      	b.n	800b2b4 <__d2b+0x58>
 800b2de:	a801      	add	r0, sp, #4
 800b2e0:	f7ff fd59 	bl	800ad96 <__lo0bits>
 800b2e4:	9b01      	ldr	r3, [sp, #4]
 800b2e6:	6163      	str	r3, [r4, #20]
 800b2e8:	3020      	adds	r0, #32
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	e7e8      	b.n	800b2c0 <__d2b+0x64>
 800b2ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b2f6:	6038      	str	r0, [r7, #0]
 800b2f8:	6918      	ldr	r0, [r3, #16]
 800b2fa:	f7ff fd2d 	bl	800ad58 <__hi0bits>
 800b2fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b302:	e7e5      	b.n	800b2d0 <__d2b+0x74>
 800b304:	0800bb50 	.word	0x0800bb50
 800b308:	0800bb61 	.word	0x0800bb61

0800b30c <__sfputc_r>:
 800b30c:	6893      	ldr	r3, [r2, #8]
 800b30e:	3b01      	subs	r3, #1
 800b310:	2b00      	cmp	r3, #0
 800b312:	b410      	push	{r4}
 800b314:	6093      	str	r3, [r2, #8]
 800b316:	da08      	bge.n	800b32a <__sfputc_r+0x1e>
 800b318:	6994      	ldr	r4, [r2, #24]
 800b31a:	42a3      	cmp	r3, r4
 800b31c:	db01      	blt.n	800b322 <__sfputc_r+0x16>
 800b31e:	290a      	cmp	r1, #10
 800b320:	d103      	bne.n	800b32a <__sfputc_r+0x1e>
 800b322:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b326:	f7fe bc06 	b.w	8009b36 <__swbuf_r>
 800b32a:	6813      	ldr	r3, [r2, #0]
 800b32c:	1c58      	adds	r0, r3, #1
 800b32e:	6010      	str	r0, [r2, #0]
 800b330:	7019      	strb	r1, [r3, #0]
 800b332:	4608      	mov	r0, r1
 800b334:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <__sfputs_r>:
 800b33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33c:	4606      	mov	r6, r0
 800b33e:	460f      	mov	r7, r1
 800b340:	4614      	mov	r4, r2
 800b342:	18d5      	adds	r5, r2, r3
 800b344:	42ac      	cmp	r4, r5
 800b346:	d101      	bne.n	800b34c <__sfputs_r+0x12>
 800b348:	2000      	movs	r0, #0
 800b34a:	e007      	b.n	800b35c <__sfputs_r+0x22>
 800b34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b350:	463a      	mov	r2, r7
 800b352:	4630      	mov	r0, r6
 800b354:	f7ff ffda 	bl	800b30c <__sfputc_r>
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	d1f3      	bne.n	800b344 <__sfputs_r+0xa>
 800b35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b360 <_vfiprintf_r>:
 800b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b364:	460d      	mov	r5, r1
 800b366:	b09d      	sub	sp, #116	@ 0x74
 800b368:	4614      	mov	r4, r2
 800b36a:	4698      	mov	r8, r3
 800b36c:	4606      	mov	r6, r0
 800b36e:	b118      	cbz	r0, 800b378 <_vfiprintf_r+0x18>
 800b370:	6a03      	ldr	r3, [r0, #32]
 800b372:	b90b      	cbnz	r3, 800b378 <_vfiprintf_r+0x18>
 800b374:	f7fe faf6 	bl	8009964 <__sinit>
 800b378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b37a:	07d9      	lsls	r1, r3, #31
 800b37c:	d405      	bmi.n	800b38a <_vfiprintf_r+0x2a>
 800b37e:	89ab      	ldrh	r3, [r5, #12]
 800b380:	059a      	lsls	r2, r3, #22
 800b382:	d402      	bmi.n	800b38a <_vfiprintf_r+0x2a>
 800b384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b386:	f7fe fce8 	bl	8009d5a <__retarget_lock_acquire_recursive>
 800b38a:	89ab      	ldrh	r3, [r5, #12]
 800b38c:	071b      	lsls	r3, r3, #28
 800b38e:	d501      	bpl.n	800b394 <_vfiprintf_r+0x34>
 800b390:	692b      	ldr	r3, [r5, #16]
 800b392:	b99b      	cbnz	r3, 800b3bc <_vfiprintf_r+0x5c>
 800b394:	4629      	mov	r1, r5
 800b396:	4630      	mov	r0, r6
 800b398:	f7fe fc0c 	bl	8009bb4 <__swsetup_r>
 800b39c:	b170      	cbz	r0, 800b3bc <_vfiprintf_r+0x5c>
 800b39e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3a0:	07dc      	lsls	r4, r3, #31
 800b3a2:	d504      	bpl.n	800b3ae <_vfiprintf_r+0x4e>
 800b3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a8:	b01d      	add	sp, #116	@ 0x74
 800b3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ae:	89ab      	ldrh	r3, [r5, #12]
 800b3b0:	0598      	lsls	r0, r3, #22
 800b3b2:	d4f7      	bmi.n	800b3a4 <_vfiprintf_r+0x44>
 800b3b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3b6:	f7fe fcd1 	bl	8009d5c <__retarget_lock_release_recursive>
 800b3ba:	e7f3      	b.n	800b3a4 <_vfiprintf_r+0x44>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3c0:	2320      	movs	r3, #32
 800b3c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3ca:	2330      	movs	r3, #48	@ 0x30
 800b3cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b57c <_vfiprintf_r+0x21c>
 800b3d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3d4:	f04f 0901 	mov.w	r9, #1
 800b3d8:	4623      	mov	r3, r4
 800b3da:	469a      	mov	sl, r3
 800b3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3e0:	b10a      	cbz	r2, 800b3e6 <_vfiprintf_r+0x86>
 800b3e2:	2a25      	cmp	r2, #37	@ 0x25
 800b3e4:	d1f9      	bne.n	800b3da <_vfiprintf_r+0x7a>
 800b3e6:	ebba 0b04 	subs.w	fp, sl, r4
 800b3ea:	d00b      	beq.n	800b404 <_vfiprintf_r+0xa4>
 800b3ec:	465b      	mov	r3, fp
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f7ff ffa1 	bl	800b33a <__sfputs_r>
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	f000 80a7 	beq.w	800b54c <_vfiprintf_r+0x1ec>
 800b3fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b400:	445a      	add	r2, fp
 800b402:	9209      	str	r2, [sp, #36]	@ 0x24
 800b404:	f89a 3000 	ldrb.w	r3, [sl]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 809f 	beq.w	800b54c <_vfiprintf_r+0x1ec>
 800b40e:	2300      	movs	r3, #0
 800b410:	f04f 32ff 	mov.w	r2, #4294967295
 800b414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b418:	f10a 0a01 	add.w	sl, sl, #1
 800b41c:	9304      	str	r3, [sp, #16]
 800b41e:	9307      	str	r3, [sp, #28]
 800b420:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b424:	931a      	str	r3, [sp, #104]	@ 0x68
 800b426:	4654      	mov	r4, sl
 800b428:	2205      	movs	r2, #5
 800b42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b42e:	4853      	ldr	r0, [pc, #332]	@ (800b57c <_vfiprintf_r+0x21c>)
 800b430:	f7f4 fece 	bl	80001d0 <memchr>
 800b434:	9a04      	ldr	r2, [sp, #16]
 800b436:	b9d8      	cbnz	r0, 800b470 <_vfiprintf_r+0x110>
 800b438:	06d1      	lsls	r1, r2, #27
 800b43a:	bf44      	itt	mi
 800b43c:	2320      	movmi	r3, #32
 800b43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b442:	0713      	lsls	r3, r2, #28
 800b444:	bf44      	itt	mi
 800b446:	232b      	movmi	r3, #43	@ 0x2b
 800b448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b44c:	f89a 3000 	ldrb.w	r3, [sl]
 800b450:	2b2a      	cmp	r3, #42	@ 0x2a
 800b452:	d015      	beq.n	800b480 <_vfiprintf_r+0x120>
 800b454:	9a07      	ldr	r2, [sp, #28]
 800b456:	4654      	mov	r4, sl
 800b458:	2000      	movs	r0, #0
 800b45a:	f04f 0c0a 	mov.w	ip, #10
 800b45e:	4621      	mov	r1, r4
 800b460:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b464:	3b30      	subs	r3, #48	@ 0x30
 800b466:	2b09      	cmp	r3, #9
 800b468:	d94b      	bls.n	800b502 <_vfiprintf_r+0x1a2>
 800b46a:	b1b0      	cbz	r0, 800b49a <_vfiprintf_r+0x13a>
 800b46c:	9207      	str	r2, [sp, #28]
 800b46e:	e014      	b.n	800b49a <_vfiprintf_r+0x13a>
 800b470:	eba0 0308 	sub.w	r3, r0, r8
 800b474:	fa09 f303 	lsl.w	r3, r9, r3
 800b478:	4313      	orrs	r3, r2
 800b47a:	9304      	str	r3, [sp, #16]
 800b47c:	46a2      	mov	sl, r4
 800b47e:	e7d2      	b.n	800b426 <_vfiprintf_r+0xc6>
 800b480:	9b03      	ldr	r3, [sp, #12]
 800b482:	1d19      	adds	r1, r3, #4
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	9103      	str	r1, [sp, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	bfbb      	ittet	lt
 800b48c:	425b      	neglt	r3, r3
 800b48e:	f042 0202 	orrlt.w	r2, r2, #2
 800b492:	9307      	strge	r3, [sp, #28]
 800b494:	9307      	strlt	r3, [sp, #28]
 800b496:	bfb8      	it	lt
 800b498:	9204      	strlt	r2, [sp, #16]
 800b49a:	7823      	ldrb	r3, [r4, #0]
 800b49c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b49e:	d10a      	bne.n	800b4b6 <_vfiprintf_r+0x156>
 800b4a0:	7863      	ldrb	r3, [r4, #1]
 800b4a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4a4:	d132      	bne.n	800b50c <_vfiprintf_r+0x1ac>
 800b4a6:	9b03      	ldr	r3, [sp, #12]
 800b4a8:	1d1a      	adds	r2, r3, #4
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	9203      	str	r2, [sp, #12]
 800b4ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4b2:	3402      	adds	r4, #2
 800b4b4:	9305      	str	r3, [sp, #20]
 800b4b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b58c <_vfiprintf_r+0x22c>
 800b4ba:	7821      	ldrb	r1, [r4, #0]
 800b4bc:	2203      	movs	r2, #3
 800b4be:	4650      	mov	r0, sl
 800b4c0:	f7f4 fe86 	bl	80001d0 <memchr>
 800b4c4:	b138      	cbz	r0, 800b4d6 <_vfiprintf_r+0x176>
 800b4c6:	9b04      	ldr	r3, [sp, #16]
 800b4c8:	eba0 000a 	sub.w	r0, r0, sl
 800b4cc:	2240      	movs	r2, #64	@ 0x40
 800b4ce:	4082      	lsls	r2, r0
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	3401      	adds	r4, #1
 800b4d4:	9304      	str	r3, [sp, #16]
 800b4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4da:	4829      	ldr	r0, [pc, #164]	@ (800b580 <_vfiprintf_r+0x220>)
 800b4dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4e0:	2206      	movs	r2, #6
 800b4e2:	f7f4 fe75 	bl	80001d0 <memchr>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d03f      	beq.n	800b56a <_vfiprintf_r+0x20a>
 800b4ea:	4b26      	ldr	r3, [pc, #152]	@ (800b584 <_vfiprintf_r+0x224>)
 800b4ec:	bb1b      	cbnz	r3, 800b536 <_vfiprintf_r+0x1d6>
 800b4ee:	9b03      	ldr	r3, [sp, #12]
 800b4f0:	3307      	adds	r3, #7
 800b4f2:	f023 0307 	bic.w	r3, r3, #7
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	9303      	str	r3, [sp, #12]
 800b4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4fc:	443b      	add	r3, r7
 800b4fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b500:	e76a      	b.n	800b3d8 <_vfiprintf_r+0x78>
 800b502:	fb0c 3202 	mla	r2, ip, r2, r3
 800b506:	460c      	mov	r4, r1
 800b508:	2001      	movs	r0, #1
 800b50a:	e7a8      	b.n	800b45e <_vfiprintf_r+0xfe>
 800b50c:	2300      	movs	r3, #0
 800b50e:	3401      	adds	r4, #1
 800b510:	9305      	str	r3, [sp, #20]
 800b512:	4619      	mov	r1, r3
 800b514:	f04f 0c0a 	mov.w	ip, #10
 800b518:	4620      	mov	r0, r4
 800b51a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b51e:	3a30      	subs	r2, #48	@ 0x30
 800b520:	2a09      	cmp	r2, #9
 800b522:	d903      	bls.n	800b52c <_vfiprintf_r+0x1cc>
 800b524:	2b00      	cmp	r3, #0
 800b526:	d0c6      	beq.n	800b4b6 <_vfiprintf_r+0x156>
 800b528:	9105      	str	r1, [sp, #20]
 800b52a:	e7c4      	b.n	800b4b6 <_vfiprintf_r+0x156>
 800b52c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b530:	4604      	mov	r4, r0
 800b532:	2301      	movs	r3, #1
 800b534:	e7f0      	b.n	800b518 <_vfiprintf_r+0x1b8>
 800b536:	ab03      	add	r3, sp, #12
 800b538:	9300      	str	r3, [sp, #0]
 800b53a:	462a      	mov	r2, r5
 800b53c:	4b12      	ldr	r3, [pc, #72]	@ (800b588 <_vfiprintf_r+0x228>)
 800b53e:	a904      	add	r1, sp, #16
 800b540:	4630      	mov	r0, r6
 800b542:	f7fd fdcb 	bl	80090dc <_printf_float>
 800b546:	4607      	mov	r7, r0
 800b548:	1c78      	adds	r0, r7, #1
 800b54a:	d1d6      	bne.n	800b4fa <_vfiprintf_r+0x19a>
 800b54c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b54e:	07d9      	lsls	r1, r3, #31
 800b550:	d405      	bmi.n	800b55e <_vfiprintf_r+0x1fe>
 800b552:	89ab      	ldrh	r3, [r5, #12]
 800b554:	059a      	lsls	r2, r3, #22
 800b556:	d402      	bmi.n	800b55e <_vfiprintf_r+0x1fe>
 800b558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b55a:	f7fe fbff 	bl	8009d5c <__retarget_lock_release_recursive>
 800b55e:	89ab      	ldrh	r3, [r5, #12]
 800b560:	065b      	lsls	r3, r3, #25
 800b562:	f53f af1f 	bmi.w	800b3a4 <_vfiprintf_r+0x44>
 800b566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b568:	e71e      	b.n	800b3a8 <_vfiprintf_r+0x48>
 800b56a:	ab03      	add	r3, sp, #12
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	462a      	mov	r2, r5
 800b570:	4b05      	ldr	r3, [pc, #20]	@ (800b588 <_vfiprintf_r+0x228>)
 800b572:	a904      	add	r1, sp, #16
 800b574:	4630      	mov	r0, r6
 800b576:	f7fe f849 	bl	800960c <_printf_i>
 800b57a:	e7e4      	b.n	800b546 <_vfiprintf_r+0x1e6>
 800b57c:	0800bcb8 	.word	0x0800bcb8
 800b580:	0800bcc2 	.word	0x0800bcc2
 800b584:	080090dd 	.word	0x080090dd
 800b588:	0800b33b 	.word	0x0800b33b
 800b58c:	0800bcbe 	.word	0x0800bcbe

0800b590 <__sflush_r>:
 800b590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b598:	0716      	lsls	r6, r2, #28
 800b59a:	4605      	mov	r5, r0
 800b59c:	460c      	mov	r4, r1
 800b59e:	d454      	bmi.n	800b64a <__sflush_r+0xba>
 800b5a0:	684b      	ldr	r3, [r1, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	dc02      	bgt.n	800b5ac <__sflush_r+0x1c>
 800b5a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	dd48      	ble.n	800b63e <__sflush_r+0xae>
 800b5ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5ae:	2e00      	cmp	r6, #0
 800b5b0:	d045      	beq.n	800b63e <__sflush_r+0xae>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b5b8:	682f      	ldr	r7, [r5, #0]
 800b5ba:	6a21      	ldr	r1, [r4, #32]
 800b5bc:	602b      	str	r3, [r5, #0]
 800b5be:	d030      	beq.n	800b622 <__sflush_r+0x92>
 800b5c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	0759      	lsls	r1, r3, #29
 800b5c6:	d505      	bpl.n	800b5d4 <__sflush_r+0x44>
 800b5c8:	6863      	ldr	r3, [r4, #4]
 800b5ca:	1ad2      	subs	r2, r2, r3
 800b5cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5ce:	b10b      	cbz	r3, 800b5d4 <__sflush_r+0x44>
 800b5d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5d2:	1ad2      	subs	r2, r2, r3
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5d8:	6a21      	ldr	r1, [r4, #32]
 800b5da:	4628      	mov	r0, r5
 800b5dc:	47b0      	blx	r6
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	d106      	bne.n	800b5f2 <__sflush_r+0x62>
 800b5e4:	6829      	ldr	r1, [r5, #0]
 800b5e6:	291d      	cmp	r1, #29
 800b5e8:	d82b      	bhi.n	800b642 <__sflush_r+0xb2>
 800b5ea:	4a2a      	ldr	r2, [pc, #168]	@ (800b694 <__sflush_r+0x104>)
 800b5ec:	410a      	asrs	r2, r1
 800b5ee:	07d6      	lsls	r6, r2, #31
 800b5f0:	d427      	bmi.n	800b642 <__sflush_r+0xb2>
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	6062      	str	r2, [r4, #4]
 800b5f6:	04d9      	lsls	r1, r3, #19
 800b5f8:	6922      	ldr	r2, [r4, #16]
 800b5fa:	6022      	str	r2, [r4, #0]
 800b5fc:	d504      	bpl.n	800b608 <__sflush_r+0x78>
 800b5fe:	1c42      	adds	r2, r0, #1
 800b600:	d101      	bne.n	800b606 <__sflush_r+0x76>
 800b602:	682b      	ldr	r3, [r5, #0]
 800b604:	b903      	cbnz	r3, 800b608 <__sflush_r+0x78>
 800b606:	6560      	str	r0, [r4, #84]	@ 0x54
 800b608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b60a:	602f      	str	r7, [r5, #0]
 800b60c:	b1b9      	cbz	r1, 800b63e <__sflush_r+0xae>
 800b60e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b612:	4299      	cmp	r1, r3
 800b614:	d002      	beq.n	800b61c <__sflush_r+0x8c>
 800b616:	4628      	mov	r0, r5
 800b618:	f7ff f9f6 	bl	800aa08 <_free_r>
 800b61c:	2300      	movs	r3, #0
 800b61e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b620:	e00d      	b.n	800b63e <__sflush_r+0xae>
 800b622:	2301      	movs	r3, #1
 800b624:	4628      	mov	r0, r5
 800b626:	47b0      	blx	r6
 800b628:	4602      	mov	r2, r0
 800b62a:	1c50      	adds	r0, r2, #1
 800b62c:	d1c9      	bne.n	800b5c2 <__sflush_r+0x32>
 800b62e:	682b      	ldr	r3, [r5, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d0c6      	beq.n	800b5c2 <__sflush_r+0x32>
 800b634:	2b1d      	cmp	r3, #29
 800b636:	d001      	beq.n	800b63c <__sflush_r+0xac>
 800b638:	2b16      	cmp	r3, #22
 800b63a:	d11e      	bne.n	800b67a <__sflush_r+0xea>
 800b63c:	602f      	str	r7, [r5, #0]
 800b63e:	2000      	movs	r0, #0
 800b640:	e022      	b.n	800b688 <__sflush_r+0xf8>
 800b642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b646:	b21b      	sxth	r3, r3
 800b648:	e01b      	b.n	800b682 <__sflush_r+0xf2>
 800b64a:	690f      	ldr	r7, [r1, #16]
 800b64c:	2f00      	cmp	r7, #0
 800b64e:	d0f6      	beq.n	800b63e <__sflush_r+0xae>
 800b650:	0793      	lsls	r3, r2, #30
 800b652:	680e      	ldr	r6, [r1, #0]
 800b654:	bf08      	it	eq
 800b656:	694b      	ldreq	r3, [r1, #20]
 800b658:	600f      	str	r7, [r1, #0]
 800b65a:	bf18      	it	ne
 800b65c:	2300      	movne	r3, #0
 800b65e:	eba6 0807 	sub.w	r8, r6, r7
 800b662:	608b      	str	r3, [r1, #8]
 800b664:	f1b8 0f00 	cmp.w	r8, #0
 800b668:	dde9      	ble.n	800b63e <__sflush_r+0xae>
 800b66a:	6a21      	ldr	r1, [r4, #32]
 800b66c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b66e:	4643      	mov	r3, r8
 800b670:	463a      	mov	r2, r7
 800b672:	4628      	mov	r0, r5
 800b674:	47b0      	blx	r6
 800b676:	2800      	cmp	r0, #0
 800b678:	dc08      	bgt.n	800b68c <__sflush_r+0xfc>
 800b67a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b67e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b682:	81a3      	strh	r3, [r4, #12]
 800b684:	f04f 30ff 	mov.w	r0, #4294967295
 800b688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b68c:	4407      	add	r7, r0
 800b68e:	eba8 0800 	sub.w	r8, r8, r0
 800b692:	e7e7      	b.n	800b664 <__sflush_r+0xd4>
 800b694:	dfbffffe 	.word	0xdfbffffe

0800b698 <_fflush_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	690b      	ldr	r3, [r1, #16]
 800b69c:	4605      	mov	r5, r0
 800b69e:	460c      	mov	r4, r1
 800b6a0:	b913      	cbnz	r3, 800b6a8 <_fflush_r+0x10>
 800b6a2:	2500      	movs	r5, #0
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	bd38      	pop	{r3, r4, r5, pc}
 800b6a8:	b118      	cbz	r0, 800b6b2 <_fflush_r+0x1a>
 800b6aa:	6a03      	ldr	r3, [r0, #32]
 800b6ac:	b90b      	cbnz	r3, 800b6b2 <_fflush_r+0x1a>
 800b6ae:	f7fe f959 	bl	8009964 <__sinit>
 800b6b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d0f3      	beq.n	800b6a2 <_fflush_r+0xa>
 800b6ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6bc:	07d0      	lsls	r0, r2, #31
 800b6be:	d404      	bmi.n	800b6ca <_fflush_r+0x32>
 800b6c0:	0599      	lsls	r1, r3, #22
 800b6c2:	d402      	bmi.n	800b6ca <_fflush_r+0x32>
 800b6c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6c6:	f7fe fb48 	bl	8009d5a <__retarget_lock_acquire_recursive>
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	f7ff ff5f 	bl	800b590 <__sflush_r>
 800b6d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6d4:	07da      	lsls	r2, r3, #31
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	d4e4      	bmi.n	800b6a4 <_fflush_r+0xc>
 800b6da:	89a3      	ldrh	r3, [r4, #12]
 800b6dc:	059b      	lsls	r3, r3, #22
 800b6de:	d4e1      	bmi.n	800b6a4 <_fflush_r+0xc>
 800b6e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6e2:	f7fe fb3b 	bl	8009d5c <__retarget_lock_release_recursive>
 800b6e6:	e7dd      	b.n	800b6a4 <_fflush_r+0xc>

0800b6e8 <__swhatbuf_r>:
 800b6e8:	b570      	push	{r4, r5, r6, lr}
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f0:	2900      	cmp	r1, #0
 800b6f2:	b096      	sub	sp, #88	@ 0x58
 800b6f4:	4615      	mov	r5, r2
 800b6f6:	461e      	mov	r6, r3
 800b6f8:	da0d      	bge.n	800b716 <__swhatbuf_r+0x2e>
 800b6fa:	89a3      	ldrh	r3, [r4, #12]
 800b6fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b700:	f04f 0100 	mov.w	r1, #0
 800b704:	bf14      	ite	ne
 800b706:	2340      	movne	r3, #64	@ 0x40
 800b708:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b70c:	2000      	movs	r0, #0
 800b70e:	6031      	str	r1, [r6, #0]
 800b710:	602b      	str	r3, [r5, #0]
 800b712:	b016      	add	sp, #88	@ 0x58
 800b714:	bd70      	pop	{r4, r5, r6, pc}
 800b716:	466a      	mov	r2, sp
 800b718:	f000 f848 	bl	800b7ac <_fstat_r>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	dbec      	blt.n	800b6fa <__swhatbuf_r+0x12>
 800b720:	9901      	ldr	r1, [sp, #4]
 800b722:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b726:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b72a:	4259      	negs	r1, r3
 800b72c:	4159      	adcs	r1, r3
 800b72e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b732:	e7eb      	b.n	800b70c <__swhatbuf_r+0x24>

0800b734 <__smakebuf_r>:
 800b734:	898b      	ldrh	r3, [r1, #12]
 800b736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b738:	079d      	lsls	r5, r3, #30
 800b73a:	4606      	mov	r6, r0
 800b73c:	460c      	mov	r4, r1
 800b73e:	d507      	bpl.n	800b750 <__smakebuf_r+0x1c>
 800b740:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	6123      	str	r3, [r4, #16]
 800b748:	2301      	movs	r3, #1
 800b74a:	6163      	str	r3, [r4, #20]
 800b74c:	b003      	add	sp, #12
 800b74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b750:	ab01      	add	r3, sp, #4
 800b752:	466a      	mov	r2, sp
 800b754:	f7ff ffc8 	bl	800b6e8 <__swhatbuf_r>
 800b758:	9f00      	ldr	r7, [sp, #0]
 800b75a:	4605      	mov	r5, r0
 800b75c:	4639      	mov	r1, r7
 800b75e:	4630      	mov	r0, r6
 800b760:	f7ff f9c6 	bl	800aaf0 <_malloc_r>
 800b764:	b948      	cbnz	r0, 800b77a <__smakebuf_r+0x46>
 800b766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b76a:	059a      	lsls	r2, r3, #22
 800b76c:	d4ee      	bmi.n	800b74c <__smakebuf_r+0x18>
 800b76e:	f023 0303 	bic.w	r3, r3, #3
 800b772:	f043 0302 	orr.w	r3, r3, #2
 800b776:	81a3      	strh	r3, [r4, #12]
 800b778:	e7e2      	b.n	800b740 <__smakebuf_r+0xc>
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	6020      	str	r0, [r4, #0]
 800b77e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b782:	81a3      	strh	r3, [r4, #12]
 800b784:	9b01      	ldr	r3, [sp, #4]
 800b786:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b78a:	b15b      	cbz	r3, 800b7a4 <__smakebuf_r+0x70>
 800b78c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b790:	4630      	mov	r0, r6
 800b792:	f000 f81d 	bl	800b7d0 <_isatty_r>
 800b796:	b128      	cbz	r0, 800b7a4 <__smakebuf_r+0x70>
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	f023 0303 	bic.w	r3, r3, #3
 800b79e:	f043 0301 	orr.w	r3, r3, #1
 800b7a2:	81a3      	strh	r3, [r4, #12]
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	431d      	orrs	r5, r3
 800b7a8:	81a5      	strh	r5, [r4, #12]
 800b7aa:	e7cf      	b.n	800b74c <__smakebuf_r+0x18>

0800b7ac <_fstat_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d07      	ldr	r5, [pc, #28]	@ (800b7cc <_fstat_r+0x20>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	602b      	str	r3, [r5, #0]
 800b7ba:	f7f7 fd19 	bl	80031f0 <_fstat>
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	d102      	bne.n	800b7c8 <_fstat_r+0x1c>
 800b7c2:	682b      	ldr	r3, [r5, #0]
 800b7c4:	b103      	cbz	r3, 800b7c8 <_fstat_r+0x1c>
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ca:	bf00      	nop
 800b7cc:	2000190c 	.word	0x2000190c

0800b7d0 <_isatty_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4d06      	ldr	r5, [pc, #24]	@ (800b7ec <_isatty_r+0x1c>)
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	4608      	mov	r0, r1
 800b7da:	602b      	str	r3, [r5, #0]
 800b7dc:	f7f7 fd18 	bl	8003210 <_isatty>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_isatty_r+0x1a>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_isatty_r+0x1a>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	2000190c 	.word	0x2000190c

0800b7f0 <_sbrk_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d06      	ldr	r5, [pc, #24]	@ (800b80c <_sbrk_r+0x1c>)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	602b      	str	r3, [r5, #0]
 800b7fc:	f7f7 fd20 	bl	8003240 <_sbrk>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_sbrk_r+0x1a>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_sbrk_r+0x1a>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	2000190c 	.word	0x2000190c

0800b810 <memcpy>:
 800b810:	440a      	add	r2, r1
 800b812:	4291      	cmp	r1, r2
 800b814:	f100 33ff 	add.w	r3, r0, #4294967295
 800b818:	d100      	bne.n	800b81c <memcpy+0xc>
 800b81a:	4770      	bx	lr
 800b81c:	b510      	push	{r4, lr}
 800b81e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b822:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b826:	4291      	cmp	r1, r2
 800b828:	d1f9      	bne.n	800b81e <memcpy+0xe>
 800b82a:	bd10      	pop	{r4, pc}

0800b82c <__assert_func>:
 800b82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b82e:	4614      	mov	r4, r2
 800b830:	461a      	mov	r2, r3
 800b832:	4b09      	ldr	r3, [pc, #36]	@ (800b858 <__assert_func+0x2c>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4605      	mov	r5, r0
 800b838:	68d8      	ldr	r0, [r3, #12]
 800b83a:	b954      	cbnz	r4, 800b852 <__assert_func+0x26>
 800b83c:	4b07      	ldr	r3, [pc, #28]	@ (800b85c <__assert_func+0x30>)
 800b83e:	461c      	mov	r4, r3
 800b840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b844:	9100      	str	r1, [sp, #0]
 800b846:	462b      	mov	r3, r5
 800b848:	4905      	ldr	r1, [pc, #20]	@ (800b860 <__assert_func+0x34>)
 800b84a:	f000 f841 	bl	800b8d0 <fiprintf>
 800b84e:	f000 f851 	bl	800b8f4 <abort>
 800b852:	4b04      	ldr	r3, [pc, #16]	@ (800b864 <__assert_func+0x38>)
 800b854:	e7f4      	b.n	800b840 <__assert_func+0x14>
 800b856:	bf00      	nop
 800b858:	20000038 	.word	0x20000038
 800b85c:	0800bd0e 	.word	0x0800bd0e
 800b860:	0800bce0 	.word	0x0800bce0
 800b864:	0800bcd3 	.word	0x0800bcd3

0800b868 <_calloc_r>:
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	fba1 5402 	umull	r5, r4, r1, r2
 800b86e:	b93c      	cbnz	r4, 800b880 <_calloc_r+0x18>
 800b870:	4629      	mov	r1, r5
 800b872:	f7ff f93d 	bl	800aaf0 <_malloc_r>
 800b876:	4606      	mov	r6, r0
 800b878:	b928      	cbnz	r0, 800b886 <_calloc_r+0x1e>
 800b87a:	2600      	movs	r6, #0
 800b87c:	4630      	mov	r0, r6
 800b87e:	bd70      	pop	{r4, r5, r6, pc}
 800b880:	220c      	movs	r2, #12
 800b882:	6002      	str	r2, [r0, #0]
 800b884:	e7f9      	b.n	800b87a <_calloc_r+0x12>
 800b886:	462a      	mov	r2, r5
 800b888:	4621      	mov	r1, r4
 800b88a:	f7fe f9e9 	bl	8009c60 <memset>
 800b88e:	e7f5      	b.n	800b87c <_calloc_r+0x14>

0800b890 <__ascii_mbtowc>:
 800b890:	b082      	sub	sp, #8
 800b892:	b901      	cbnz	r1, 800b896 <__ascii_mbtowc+0x6>
 800b894:	a901      	add	r1, sp, #4
 800b896:	b142      	cbz	r2, 800b8aa <__ascii_mbtowc+0x1a>
 800b898:	b14b      	cbz	r3, 800b8ae <__ascii_mbtowc+0x1e>
 800b89a:	7813      	ldrb	r3, [r2, #0]
 800b89c:	600b      	str	r3, [r1, #0]
 800b89e:	7812      	ldrb	r2, [r2, #0]
 800b8a0:	1e10      	subs	r0, r2, #0
 800b8a2:	bf18      	it	ne
 800b8a4:	2001      	movne	r0, #1
 800b8a6:	b002      	add	sp, #8
 800b8a8:	4770      	bx	lr
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	e7fb      	b.n	800b8a6 <__ascii_mbtowc+0x16>
 800b8ae:	f06f 0001 	mvn.w	r0, #1
 800b8b2:	e7f8      	b.n	800b8a6 <__ascii_mbtowc+0x16>

0800b8b4 <__ascii_wctomb>:
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	4608      	mov	r0, r1
 800b8b8:	b141      	cbz	r1, 800b8cc <__ascii_wctomb+0x18>
 800b8ba:	2aff      	cmp	r2, #255	@ 0xff
 800b8bc:	d904      	bls.n	800b8c8 <__ascii_wctomb+0x14>
 800b8be:	228a      	movs	r2, #138	@ 0x8a
 800b8c0:	601a      	str	r2, [r3, #0]
 800b8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c6:	4770      	bx	lr
 800b8c8:	700a      	strb	r2, [r1, #0]
 800b8ca:	2001      	movs	r0, #1
 800b8cc:	4770      	bx	lr
	...

0800b8d0 <fiprintf>:
 800b8d0:	b40e      	push	{r1, r2, r3}
 800b8d2:	b503      	push	{r0, r1, lr}
 800b8d4:	4601      	mov	r1, r0
 800b8d6:	ab03      	add	r3, sp, #12
 800b8d8:	4805      	ldr	r0, [pc, #20]	@ (800b8f0 <fiprintf+0x20>)
 800b8da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8de:	6800      	ldr	r0, [r0, #0]
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	f7ff fd3d 	bl	800b360 <_vfiprintf_r>
 800b8e6:	b002      	add	sp, #8
 800b8e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8ec:	b003      	add	sp, #12
 800b8ee:	4770      	bx	lr
 800b8f0:	20000038 	.word	0x20000038

0800b8f4 <abort>:
 800b8f4:	b508      	push	{r3, lr}
 800b8f6:	2006      	movs	r0, #6
 800b8f8:	f000 f82c 	bl	800b954 <raise>
 800b8fc:	2001      	movs	r0, #1
 800b8fe:	f7f7 fc43 	bl	8003188 <_exit>

0800b902 <_raise_r>:
 800b902:	291f      	cmp	r1, #31
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4605      	mov	r5, r0
 800b908:	460c      	mov	r4, r1
 800b90a:	d904      	bls.n	800b916 <_raise_r+0x14>
 800b90c:	2316      	movs	r3, #22
 800b90e:	6003      	str	r3, [r0, #0]
 800b910:	f04f 30ff 	mov.w	r0, #4294967295
 800b914:	bd38      	pop	{r3, r4, r5, pc}
 800b916:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b918:	b112      	cbz	r2, 800b920 <_raise_r+0x1e>
 800b91a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b91e:	b94b      	cbnz	r3, 800b934 <_raise_r+0x32>
 800b920:	4628      	mov	r0, r5
 800b922:	f000 f831 	bl	800b988 <_getpid_r>
 800b926:	4622      	mov	r2, r4
 800b928:	4601      	mov	r1, r0
 800b92a:	4628      	mov	r0, r5
 800b92c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b930:	f000 b818 	b.w	800b964 <_kill_r>
 800b934:	2b01      	cmp	r3, #1
 800b936:	d00a      	beq.n	800b94e <_raise_r+0x4c>
 800b938:	1c59      	adds	r1, r3, #1
 800b93a:	d103      	bne.n	800b944 <_raise_r+0x42>
 800b93c:	2316      	movs	r3, #22
 800b93e:	6003      	str	r3, [r0, #0]
 800b940:	2001      	movs	r0, #1
 800b942:	e7e7      	b.n	800b914 <_raise_r+0x12>
 800b944:	2100      	movs	r1, #0
 800b946:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b94a:	4620      	mov	r0, r4
 800b94c:	4798      	blx	r3
 800b94e:	2000      	movs	r0, #0
 800b950:	e7e0      	b.n	800b914 <_raise_r+0x12>
	...

0800b954 <raise>:
 800b954:	4b02      	ldr	r3, [pc, #8]	@ (800b960 <raise+0xc>)
 800b956:	4601      	mov	r1, r0
 800b958:	6818      	ldr	r0, [r3, #0]
 800b95a:	f7ff bfd2 	b.w	800b902 <_raise_r>
 800b95e:	bf00      	nop
 800b960:	20000038 	.word	0x20000038

0800b964 <_kill_r>:
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	4d07      	ldr	r5, [pc, #28]	@ (800b984 <_kill_r+0x20>)
 800b968:	2300      	movs	r3, #0
 800b96a:	4604      	mov	r4, r0
 800b96c:	4608      	mov	r0, r1
 800b96e:	4611      	mov	r1, r2
 800b970:	602b      	str	r3, [r5, #0]
 800b972:	f7f7 fbf9 	bl	8003168 <_kill>
 800b976:	1c43      	adds	r3, r0, #1
 800b978:	d102      	bne.n	800b980 <_kill_r+0x1c>
 800b97a:	682b      	ldr	r3, [r5, #0]
 800b97c:	b103      	cbz	r3, 800b980 <_kill_r+0x1c>
 800b97e:	6023      	str	r3, [r4, #0]
 800b980:	bd38      	pop	{r3, r4, r5, pc}
 800b982:	bf00      	nop
 800b984:	2000190c 	.word	0x2000190c

0800b988 <_getpid_r>:
 800b988:	f7f7 bbe6 	b.w	8003158 <_getpid>

0800b98c <_init>:
 800b98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98e:	bf00      	nop
 800b990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b992:	bc08      	pop	{r3}
 800b994:	469e      	mov	lr, r3
 800b996:	4770      	bx	lr

0800b998 <_fini>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	bf00      	nop
 800b99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99e:	bc08      	pop	{r3}
 800b9a0:	469e      	mov	lr, r3
 800b9a2:	4770      	bx	lr
