/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.1 */

#ifndef PB_DCCL_NANOPB_DCCL_OPTION_EXTENSIONS_PB_H_INCLUDED
#define PB_DCCL_NANOPB_DCCL_OPTION_EXTENSIONS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _dccl_DCCLFieldOptions_Conditions {
    pb_callback_t required_if;
    pb_callback_t omit_if;
    pb_callback_t only_if;
    pb_callback_t min;
    pb_callback_t max;
} dccl_DCCLFieldOptions_Conditions;

typedef struct _dccl_DCCLFieldOptions_Units {
    pb_callback_t base_dimensions;
    pb_callback_t derived_dimensions;
    pb_callback_t system;
    bool has_relative_temperature;
    bool relative_temperature;
    pb_callback_t unit;
    pb_callback_t prefix;
} dccl_DCCLFieldOptions_Units;

typedef struct _dccl_DCCLMessageOptions {
    bool has_id;
    int32_t id;
    bool has_max_bytes;
    uint32_t max_bytes;
    pb_callback_t codec;
    pb_callback_t codec_group;
    bool has_codec_version;
    int32_t codec_version;
    bool has_omit_id;
    bool omit_id;
    pb_callback_t unit_system;
} dccl_DCCLMessageOptions;

typedef struct _dccl_DCCLFieldOptions {
    pb_callback_t codec;
    bool has_omit;
    bool omit;
    bool has_in_head;
    bool in_head;
    bool has_precision;
    int32_t precision;
    bool has_min;
    double min;
    bool has_max;
    double max;
    bool has_num_days;
    uint32_t num_days;
    pb_callback_t static_value;
    bool has_max_length;
    uint32_t max_length;
    bool has_max_repeat;
    uint32_t max_repeat;
    bool has_packed_enum;
    bool packed_enum;
    bool has_resolution;
    double resolution;
    bool has_min_repeat;
    uint32_t min_repeat;
    pb_callback_t description;
    bool has_units;
    dccl_DCCLFieldOptions_Units units;
    bool has_dynamic_conditions;
    dccl_DCCLFieldOptions_Conditions dynamic_conditions;
    pb_extension_t *extensions;
} dccl_DCCLFieldOptions;


/* Extensions */
extern const pb_extension_type_t dccl_field; /* field type: dccl_DCCLFieldOptions field; */
extern const pb_extension_type_t dccl_msg; /* field type: dccl_DCCLMessageOptions msg; */

/* Initializer values for message structs */
#define dccl_DCCLFieldOptions_init_default       {{{NULL}, NULL}, false, false, false, false, false, 0, false, 0, false, 0, false, 1u, {{NULL}, NULL}, false, 0, false, 0, false, true, false, 1, false, 0u, {{NULL}, NULL}, false, dccl_DCCLFieldOptions_Units_init_default, false, dccl_DCCLFieldOptions_Conditions_init_default, NULL}
#define dccl_DCCLFieldOptions_Units_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, false, {{NULL}, NULL}, {{NULL}, NULL}}
#define dccl_DCCLFieldOptions_Conditions_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define dccl_DCCLMessageOptions_init_default     {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, false, {{NULL}, NULL}}
#define dccl_DCCLFieldOptions_init_zero          {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, dccl_DCCLFieldOptions_Units_init_zero, false, dccl_DCCLFieldOptions_Conditions_init_zero, NULL}
#define dccl_DCCLFieldOptions_Units_init_zero    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define dccl_DCCLFieldOptions_Conditions_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define dccl_DCCLMessageOptions_init_zero        {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define dccl_DCCLFieldOptions_Conditions_required_if_tag 1
#define dccl_DCCLFieldOptions_Conditions_omit_if_tag 2
#define dccl_DCCLFieldOptions_Conditions_only_if_tag 3
#define dccl_DCCLFieldOptions_Conditions_min_tag 10
#define dccl_DCCLFieldOptions_Conditions_max_tag 11
#define dccl_DCCLFieldOptions_Units_base_dimensions_tag 1
#define dccl_DCCLFieldOptions_Units_derived_dimensions_tag 2
#define dccl_DCCLFieldOptions_Units_system_tag   3
#define dccl_DCCLFieldOptions_Units_relative_temperature_tag 4
#define dccl_DCCLFieldOptions_Units_unit_tag     5
#define dccl_DCCLFieldOptions_Units_prefix_tag   6
#define dccl_DCCLMessageOptions_id_tag           1
#define dccl_DCCLMessageOptions_max_bytes_tag    2
#define dccl_DCCLMessageOptions_codec_tag        3
#define dccl_DCCLMessageOptions_codec_group_tag  4
#define dccl_DCCLMessageOptions_codec_version_tag 5
#define dccl_DCCLMessageOptions_omit_id_tag      10
#define dccl_DCCLMessageOptions_unit_system_tag  30
#define dccl_DCCLFieldOptions_codec_tag          1
#define dccl_DCCLFieldOptions_omit_tag           2
#define dccl_DCCLFieldOptions_in_head_tag        3
#define dccl_DCCLFieldOptions_precision_tag      4
#define dccl_DCCLFieldOptions_resolution_tag     12
#define dccl_DCCLFieldOptions_min_tag            5
#define dccl_DCCLFieldOptions_max_tag            6
#define dccl_DCCLFieldOptions_num_days_tag       7
#define dccl_DCCLFieldOptions_static_value_tag   8
#define dccl_DCCLFieldOptions_max_length_tag     9
#define dccl_DCCLFieldOptions_max_repeat_tag     10
#define dccl_DCCLFieldOptions_min_repeat_tag     13
#define dccl_DCCLFieldOptions_packed_enum_tag    11
#define dccl_DCCLFieldOptions_description_tag    20
#define dccl_DCCLFieldOptions_units_tag          30
#define dccl_DCCLFieldOptions_dynamic_conditions_tag 40
#define dccl_field_tag                           1012
#define dccl_msg_tag                             1012

/* Struct field encoding specification for nanopb */
#define dccl_DCCLFieldOptions_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   codec,             1) \
X(a, STATIC,   OPTIONAL, BOOL,     omit,              2) \
X(a, STATIC,   OPTIONAL, BOOL,     in_head,           3) \
X(a, STATIC,   OPTIONAL, INT32,    precision,         4) \
X(a, STATIC,   OPTIONAL, DOUBLE,   min,               5) \
X(a, STATIC,   OPTIONAL, DOUBLE,   max,               6) \
X(a, STATIC,   OPTIONAL, UINT32,   num_days,          7) \
X(a, CALLBACK, OPTIONAL, STRING,   static_value,      8) \
X(a, STATIC,   OPTIONAL, UINT32,   max_length,        9) \
X(a, STATIC,   OPTIONAL, UINT32,   max_repeat,       10) \
X(a, STATIC,   OPTIONAL, BOOL,     packed_enum,      11) \
X(a, STATIC,   OPTIONAL, DOUBLE,   resolution,       12) \
X(a, STATIC,   OPTIONAL, UINT32,   min_repeat,       13) \
X(a, CALLBACK, OPTIONAL, STRING,   description,      20) \
X(a, STATIC,   OPTIONAL, MESSAGE,  units,            30) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dynamic_conditions,  40) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define dccl_DCCLFieldOptions_CALLBACK pb_default_field_callback
#define dccl_DCCLFieldOptions_DEFAULT (const pb_byte_t*)"\x10\x00\x18\x00\x20\x00\x38\x01\x58\x01\x61\x00\x00\x00\x00\x00\x00\xf0\x3f\x68\x00\x00"
#define dccl_DCCLFieldOptions_units_MSGTYPE dccl_DCCLFieldOptions_Units
#define dccl_DCCLFieldOptions_dynamic_conditions_MSGTYPE dccl_DCCLFieldOptions_Conditions

#define dccl_DCCLFieldOptions_Units_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   base_dimensions,   1) \
X(a, CALLBACK, OPTIONAL, STRING,   derived_dimensions,   2) \
X(a, CALLBACK, OPTIONAL, STRING,   system,            3) \
X(a, STATIC,   OPTIONAL, BOOL,     relative_temperature,   4) \
X(a, CALLBACK, OPTIONAL, STRING,   unit,              5) \
X(a, CALLBACK, OPTIONAL, STRING,   prefix,            6)
#define dccl_DCCLFieldOptions_Units_CALLBACK pb_default_field_callback
#define dccl_DCCLFieldOptions_Units_DEFAULT (const pb_byte_t*)"\x20\x00\x00"

#define dccl_DCCLFieldOptions_Conditions_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   required_if,       1) \
X(a, CALLBACK, OPTIONAL, STRING,   omit_if,           2) \
X(a, CALLBACK, OPTIONAL, STRING,   only_if,           3) \
X(a, CALLBACK, OPTIONAL, STRING,   min,              10) \
X(a, CALLBACK, OPTIONAL, STRING,   max,              11)
#define dccl_DCCLFieldOptions_Conditions_CALLBACK pb_default_field_callback
#define dccl_DCCLFieldOptions_Conditions_DEFAULT NULL

#define dccl_DCCLMessageOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    id,                1) \
X(a, STATIC,   OPTIONAL, UINT32,   max_bytes,         2) \
X(a, CALLBACK, OPTIONAL, STRING,   codec,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   codec_group,       4) \
X(a, STATIC,   OPTIONAL, INT32,    codec_version,     5) \
X(a, STATIC,   OPTIONAL, BOOL,     omit_id,          10) \
X(a, CALLBACK, OPTIONAL, STRING,   unit_system,      30)
#define dccl_DCCLMessageOptions_CALLBACK pb_default_field_callback
#define dccl_DCCLMessageOptions_DEFAULT (const pb_byte_t*)"\x50\x00\x00"

extern const pb_msgdesc_t dccl_DCCLFieldOptions_msg;
extern const pb_msgdesc_t dccl_DCCLFieldOptions_Units_msg;
extern const pb_msgdesc_t dccl_DCCLFieldOptions_Conditions_msg;
extern const pb_msgdesc_t dccl_DCCLMessageOptions_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define dccl_DCCLFieldOptions_fields &dccl_DCCLFieldOptions_msg
#define dccl_DCCLFieldOptions_Units_fields &dccl_DCCLFieldOptions_Units_msg
#define dccl_DCCLFieldOptions_Conditions_fields &dccl_DCCLFieldOptions_Conditions_msg
#define dccl_DCCLMessageOptions_fields &dccl_DCCLMessageOptions_msg

/* Maximum encoded size of messages (where known) */
/* dccl_DCCLFieldOptions_size depends on runtime parameters */
/* dccl_DCCLFieldOptions_Units_size depends on runtime parameters */
/* dccl_DCCLFieldOptions_Conditions_size depends on runtime parameters */
/* dccl_DCCLMessageOptions_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
