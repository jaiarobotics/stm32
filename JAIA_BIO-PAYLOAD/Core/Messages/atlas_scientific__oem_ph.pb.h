/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_ATLAS_SCIENTIFIC__OEM_PH_PB_H_INCLUDED
#define PB_ATLAS_SCIENTIFIC__OEM_PH_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _AtlasScientificOEMpH {
    bool has_ph;
    double ph;
} AtlasScientificOEMpH;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define AtlasScientificOEMpH_init_default        {false, 0}
#define AtlasScientificOEMpH_init_zero           {false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define AtlasScientificOEMpH_ph_tag              1

/* Struct field encoding specification for nanopb */
#define AtlasScientificOEMpH_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, DOUBLE,   ph,                1)
#define AtlasScientificOEMpH_CALLBACK NULL
#define AtlasScientificOEMpH_DEFAULT NULL

extern const pb_msgdesc_t AtlasScientificOEMpH_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define AtlasScientificOEMpH_fields &AtlasScientificOEMpH_msg

/* Maximum encoded size of messages (where known) */
#define ATLAS_SCIENTIFIC__OEM_PH_PB_H_MAX_SIZE   AtlasScientificOEMpH_size
#define AtlasScientificOEMpH_size                9

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
