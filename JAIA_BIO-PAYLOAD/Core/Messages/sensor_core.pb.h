/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_SENSOR_CORE_PB_H_INCLUDED
#define PB_SENSOR_CORE_PB_H_INCLUDED
#include "pb.h"
#include "atlas_scientific__oem_ec.pb.h"
#include "atlas_scientific__oem_do.pb.h"
#include "atlas_scientific__oem_ph.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _SensorData {
    pb_size_t which_data;
    union _SensorData_data {
        AtlasScientificOEMEC oem_ec;
        AtlasScientificOEMpH oem_ph;
        AtlasScientificOEMDO oem_do;
    } data;
} SensorData;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define SensorData_init_default                  {0, {AtlasScientificOEMEC_init_default}}
#define SensorData_init_zero                     {0, {AtlasScientificOEMEC_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define SensorData_oem_ec_tag                    12
#define SensorData_oem_ph_tag                    14
#define SensorData_oem_do_tag                    15

/* Struct field encoding specification for nanopb */
#define SensorData_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,oem_ec,data.oem_ec),  12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,oem_ph,data.oem_ph),  14) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,oem_do,data.oem_do),  15)
#define SensorData_CALLBACK NULL
#define SensorData_DEFAULT NULL
#define SensorData_data_oem_ec_MSGTYPE AtlasScientificOEMEC
#define SensorData_data_oem_ph_MSGTYPE AtlasScientificOEMpH
#define SensorData_data_oem_do_MSGTYPE AtlasScientificOEMDO

extern const pb_msgdesc_t SensorData_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SensorData_fields &SensorData_msg

/* Maximum encoded size of messages (where known) */
#if defined(AtlasScientificOEMEC_size) && defined(AtlasScientificOEMpH_size) && defined(AtlasScientificOEMDO_size)
union SensorData_data_size_union {char f12[(6 + AtlasScientificOEMEC_size)]; char f14[(6 + AtlasScientificOEMpH_size)]; char f15[(6 + AtlasScientificOEMDO_size)];};
#endif
#if defined(AtlasScientificOEMEC_size) && defined(AtlasScientificOEMpH_size) && defined(AtlasScientificOEMDO_size)
#define SENSOR_CORE_PB_H_MAX_SIZE                SensorData_size
#define SensorData_size                          (0 + sizeof(union SensorData_data_size_union))
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
