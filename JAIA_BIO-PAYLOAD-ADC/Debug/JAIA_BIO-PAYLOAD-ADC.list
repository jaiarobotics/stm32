
JAIA_BIO-PAYLOAD-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800cd08  0800cd08  0000dd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1d0  0800d1d0  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1d0  0800d1d0  0000e1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1d8  0800d1d8  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1d8  0800d1d8  0000e1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d1dc  0800d1dc  0000e1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d1e0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ramfunc      00000000  200001d4  200001d4  0000f1d4  2**0
                  CONTENTS
 10 .bss          00001984  200001d4  0800d3b4  0000f1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001b58  0800d3b4  0000fb58  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef92  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000403d  00000000  00000000  0002e196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c30  00000000  00000000  000321d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015f6  00000000  00000000  00033e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028949  00000000  00000000  000353fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002266a  00000000  00000000  0005dd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5866  00000000  00000000  000803b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00175c17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008aa4  00000000  00000000  00175c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0017e700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ccec 	.word	0x0800ccec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800ccec 	.word	0x0800ccec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <getPressure>:
{
  sDepth.fluidDensity = density;
}

float getPressure(float conversion)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a01 	vstr	s0, [r7, #4]
  if ( sDepth.model == MS5837_02BA )
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <getPressure+0x5c>)
 8000f84:	7a1b      	ldrb	r3, [r3, #8]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10e      	bne.n	8000fa8 <getPressure+0x30>
  {
    return P*conversion/100.0f;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <getPressure+0x60>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f9e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000fdc <getPressure+0x64>
 8000fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa6:	e00d      	b.n	8000fc4 <getPressure+0x4c>
  }
  else
  {
    return P*conversion/10.0f;
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <getPressure+0x60>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fbc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
  }
}
 8000fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200001f0 	.word	0x200001f0
 8000fd8:	20000220 	.word	0x20000220
 8000fdc:	42c80000 	.word	0x42c80000

08000fe0 <getDepth>:
// The average atmospheric pressure of 101300 pascal is used for the calcuation, but atmospheric pressure varies
// If the atmospheric pressure is not 101300 at the time of reading, the depth reported will be offset
// In order to calculate the correct depth, the actual atmospheric pressure should be measured once in air, and
// that value should subtracted for subsequent depth calculations.
float getDepth(void)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  return (getPressure(Pa) - 101300) / (sDepth.fluidDensity * 9.80665);
 8000fe4:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8001048 <getDepth+0x68>
 8000fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fec:	f7ff ffc4 	bl	8000f78 <getPressure>
 8000ff0:	eef0 7a40 	vmov.f32	s15, s0
 8000ff4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800104c <getDepth+0x6c>
 8000ff8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ffc:	ee17 0a90 	vmov	r0, s15
 8001000:	f7ff faa2 	bl	8000548 <__aeabi_f2d>
 8001004:	4604      	mov	r4, r0
 8001006:	460d      	mov	r5, r1
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <getDepth+0x70>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa89 	bl	8000524 <__aeabi_i2d>
 8001012:	a30b      	add	r3, pc, #44	@ (adr r3, 8001040 <getDepth+0x60>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff faee 	bl	80005f8 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4620      	mov	r0, r4
 8001022:	4629      	mov	r1, r5
 8001024:	f7ff fc12 	bl	800084c <__aeabi_ddiv>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f7ff fdda 	bl	8000be8 <__aeabi_d2f>
 8001034:	4603      	mov	r3, r0
 8001036:	ee07 3a90 	vmov	s15, r3
}
 800103a:	eeb0 0a67 	vmov.f32	s0, s15
 800103e:	bdb0      	pop	{r4, r5, r7, pc}
 8001040:	3a92a305 	.word	0x3a92a305
 8001044:	40239d01 	.word	0x40239d01
 8001048:	42c80000 	.word	0x42c80000
 800104c:	47c5da00 	.word	0x47c5da00
 8001050:	200001f0 	.word	0x200001f0

08001054 <readMS5837>:
{
  return (1 - pow((getPressure(1.0f)/1013.25), 0.190284)) * 145366.45 * 0.3048;
}

int readMS5837(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af02      	add	r7, sp, #8
  uint8_t cmd;
  uint8_t data[3];

  // Check that _i2cPort is not NULL (i.e. has the user forgoten to call .init or .begin?)
  if (sDepth.pi2c == NULL)
 800105a:	4b3f      	ldr	r3, [pc, #252]	@ (8001158 <readMS5837+0x104>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <readMS5837+0x12>
  {
    return 1;
 8001062:	2301      	movs	r3, #1
 8001064:	e073      	b.n	800114e <readMS5837+0xfa>
  }

  // Request D1 conversion
  cmd = MS5837_CONVERT_D1_8192;
 8001066:	234a      	movs	r3, #74	@ 0x4a
 8001068:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Master_Transmit(sDepth.pi2c, MS5837_ADDR << 1, &cmd, 1, HAL_MAX_DELAY);
 800106a:	4b3b      	ldr	r3, [pc, #236]	@ (8001158 <readMS5837+0x104>)
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	2376      	movs	r3, #118	@ 0x76
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	b299      	uxth	r1, r3
 8001074:	1dfa      	adds	r2, r7, #7
 8001076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	f004 fe67 	bl	8005d50 <HAL_I2C_Master_Transmit>

  // Delay for conversion time (20ms)
  HAL_Delay(20);
 8001082:	2014      	movs	r0, #20
 8001084:	f002 fbaa 	bl	80037dc <HAL_Delay>

  // Request ADC read command
  cmd = MS5837_ADC_READ;
 8001088:	2300      	movs	r3, #0
 800108a:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Master_Transmit(sDepth.pi2c, MS5837_ADDR << 1, &cmd, 1, HAL_MAX_DELAY);
 800108c:	4b32      	ldr	r3, [pc, #200]	@ (8001158 <readMS5837+0x104>)
 800108e:	6858      	ldr	r0, [r3, #4]
 8001090:	2376      	movs	r3, #118	@ 0x76
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	b299      	uxth	r1, r3
 8001096:	1dfa      	adds	r2, r7, #7
 8001098:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	f004 fe56 	bl	8005d50 <HAL_I2C_Master_Transmit>

  delay_us_nop(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f000 fd97 	bl	8001bd8 <delay_us_nop>

  // Read 3 bytes from the sensor
  HAL_I2C_Master_Receive(sDepth.pi2c, MS5837_ADDR << 1, data, 3, HAL_MAX_DELAY);
 80010aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001158 <readMS5837+0x104>)
 80010ac:	6858      	ldr	r0, [r3, #4]
 80010ae:	2376      	movs	r3, #118	@ 0x76
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	b299      	uxth	r1, r3
 80010b4:	1d3a      	adds	r2, r7, #4
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2303      	movs	r3, #3
 80010be:	f004 ff5f 	bl	8005f80 <HAL_I2C_Master_Receive>

  delay_us_nop(10);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f000 fd88 	bl	8001bd8 <delay_us_nop>

  // Combine the received bytes into a 24-bit value
  D1_pres = ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | data[2];
 80010c8:	793b      	ldrb	r3, [r7, #4]
 80010ca:	041a      	lsls	r2, r3, #16
 80010cc:	797b      	ldrb	r3, [r7, #5]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	4313      	orrs	r3, r2
 80010d2:	79ba      	ldrb	r2, [r7, #6]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	4a21      	ldr	r2, [pc, #132]	@ (800115c <readMS5837+0x108>)
 80010d8:	6013      	str	r3, [r2, #0]

  // Request D2 conversion
  cmd = MS5837_CONVERT_D2_8192;
 80010da:	235a      	movs	r3, #90	@ 0x5a
 80010dc:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Master_Transmit(sDepth.pi2c, MS5837_ADDR << 1, &cmd, 1, HAL_MAX_DELAY);
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <readMS5837+0x104>)
 80010e0:	6858      	ldr	r0, [r3, #4]
 80010e2:	2376      	movs	r3, #118	@ 0x76
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	b299      	uxth	r1, r3
 80010e8:	1dfa      	adds	r2, r7, #7
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	f004 fe2d 	bl	8005d50 <HAL_I2C_Master_Transmit>

  // Delay for conversion time (20ms)
  HAL_Delay(20);
 80010f6:	2014      	movs	r0, #20
 80010f8:	f002 fb70 	bl	80037dc <HAL_Delay>

  // Request ADC read command
  cmd = MS5837_ADC_READ;
 80010fc:	2300      	movs	r3, #0
 80010fe:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Master_Transmit(sDepth.pi2c, MS5837_ADDR << 1, &cmd, 1, HAL_MAX_DELAY);
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <readMS5837+0x104>)
 8001102:	6858      	ldr	r0, [r3, #4]
 8001104:	2376      	movs	r3, #118	@ 0x76
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	b299      	uxth	r1, r3
 800110a:	1dfa      	adds	r2, r7, #7
 800110c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	f004 fe1c 	bl	8005d50 <HAL_I2C_Master_Transmit>

  delay_us_nop(10);
 8001118:	200a      	movs	r0, #10
 800111a:	f000 fd5d 	bl	8001bd8 <delay_us_nop>

  // Read 3 bytes from the sensor
  HAL_I2C_Master_Receive(sDepth.pi2c, MS5837_ADDR << 1, data, 3, HAL_MAX_DELAY);
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <readMS5837+0x104>)
 8001120:	6858      	ldr	r0, [r3, #4]
 8001122:	2376      	movs	r3, #118	@ 0x76
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	b299      	uxth	r1, r3
 8001128:	1d3a      	adds	r2, r7, #4
 800112a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2303      	movs	r3, #3
 8001132:	f004 ff25 	bl	8005f80 <HAL_I2C_Master_Receive>

  // Combine the received bytes into a 24-bit value
  D2_temp = ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | data[2];
 8001136:	793b      	ldrb	r3, [r7, #4]
 8001138:	041a      	lsls	r2, r3, #16
 800113a:	797b      	ldrb	r3, [r7, #5]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	4313      	orrs	r3, r2
 8001140:	79ba      	ldrb	r2, [r7, #6]
 8001142:	4313      	orrs	r3, r2
 8001144:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <readMS5837+0x10c>)
 8001146:	6013      	str	r3, [r2, #0]

  calculate();
 8001148:	f000 f80c 	bl	8001164 <calculate>

  return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001f0 	.word	0x200001f0
 800115c:	20000214 	.word	0x20000214
 8001160:	20000218 	.word	0x20000218

08001164 <calculate>:

void calculate() {
 8001164:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001168:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 800116c:	af00      	add	r7, sp, #0

  // Given C1-C6 and D1, D2, calculated TEMP and P
  // Do conversion first and then second order temp compensation

  int32_t dT = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
  int64_t SENS = 0;
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
  int64_t OFF = 0;
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220

  int32_t SENSi = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  int32_t OFFi = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  int32_t Ti = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

  int64_t OFF2 = 0;
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
  int64_t SENS2 = 0;
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200

  // Terms called
  dT = D2_temp - ((uint32_t) (C[5]) * 256l);
 80011b6:	4b95      	ldr	r3, [pc, #596]	@ (800140c <calculate+0x2a8>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b95      	ldr	r3, [pc, #596]	@ (8001410 <calculate+0x2ac>)
 80011bc:	895b      	ldrh	r3, [r3, #10]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

  if ( sDepth.model == MS5837_02BA )
 80011c6:	4b93      	ldr	r3, [pc, #588]	@ (8001414 <calculate+0x2b0>)
 80011c8:	7a1b      	ldrb	r3, [r3, #8]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	f040 812a 	bne.w	8001424 <calculate+0x2c0>
  {
    SENS = (int64_t)(C[1])*65536l+((int64_t)(C[3])*dT)/128l;
 80011d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001410 <calculate+0x2ac>)
 80011d2:	885b      	ldrh	r3, [r3, #2]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	2200      	movs	r2, #0
 80011d8:	4698      	mov	r8, r3
 80011da:	4691      	mov	r9, r2
 80011dc:	f04f 0400 	mov.w	r4, #0
 80011e0:	f04f 0500 	mov.w	r5, #0
 80011e4:	ea4f 4509 	mov.w	r5, r9, lsl #16
 80011e8:	ea45 4518 	orr.w	r5, r5, r8, lsr #16
 80011ec:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80011f0:	4b87      	ldr	r3, [pc, #540]	@ (8001410 <calculate+0x2ac>)
 80011f2:	88db      	ldrh	r3, [r3, #6]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	2200      	movs	r2, #0
 80011f8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80011fc:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8001200:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001204:	17da      	asrs	r2, r3, #31
 8001206:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800120a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800120e:	e9d7 8968 	ldrd	r8, r9, [r7, #416]	@ 0x1a0
 8001212:	464b      	mov	r3, r9
 8001214:	e9d7 ab66 	ldrd	sl, fp, [r7, #408]	@ 0x198
 8001218:	4652      	mov	r2, sl
 800121a:	fb02 f203 	mul.w	r2, r2, r3
 800121e:	465b      	mov	r3, fp
 8001220:	4641      	mov	r1, r8
 8001222:	fb01 f303 	mul.w	r3, r1, r3
 8001226:	4413      	add	r3, r2
 8001228:	4642      	mov	r2, r8
 800122a:	4651      	mov	r1, sl
 800122c:	fba2 1201 	umull	r1, r2, r2, r1
 8001230:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8001234:	460a      	mov	r2, r1
 8001236:	f8c7 21f8 	str.w	r2, [r7, #504]	@ 0x1f8
 800123a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800123e:	4413      	add	r3, r2
 8001240:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8001244:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8001248:	2b00      	cmp	r3, #0
 800124a:	da09      	bge.n	8001260 <calculate+0xfc>
 800124c:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8001250:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8001254:	f143 0300 	adc.w	r3, r3, #0
 8001258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800125c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001260:	f04f 0000 	mov.w	r0, #0
 8001264:	f04f 0100 	mov.w	r1, #0
 8001268:	09d0      	lsrs	r0, r2, #7
 800126a:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800126e:	11d9      	asrs	r1, r3, #7
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	18a1      	adds	r1, r4, r2
 8001276:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 800127a:	eb45 0303 	adc.w	r3, r5, r3
 800127e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001282:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8001286:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
    OFF = (int64_t)(C[2])*131072l+((int64_t)(C[4])*dT)/64l;
 800128a:	4b61      	ldr	r3, [pc, #388]	@ (8001410 <calculate+0x2ac>)
 800128c:	889b      	ldrh	r3, [r3, #4]
 800128e:	b29b      	uxth	r3, r3
 8001290:	2200      	movs	r2, #0
 8001292:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8001296:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 800129a:	f04f 0400 	mov.w	r4, #0
 800129e:	f04f 0500 	mov.w	r5, #0
 80012a2:	e9d7 1264 	ldrd	r1, r2, [r7, #400]	@ 0x190
 80012a6:	4613      	mov	r3, r2
 80012a8:	045d      	lsls	r5, r3, #17
 80012aa:	460b      	mov	r3, r1
 80012ac:	ea45 35d3 	orr.w	r5, r5, r3, lsr #15
 80012b0:	460b      	mov	r3, r1
 80012b2:	045c      	lsls	r4, r3, #17
 80012b4:	4b56      	ldr	r3, [pc, #344]	@ (8001410 <calculate+0x2ac>)
 80012b6:	891b      	ldrh	r3, [r3, #8]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	2200      	movs	r2, #0
 80012bc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80012c0:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 80012c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80012c8:	17da      	asrs	r2, r3, #31
 80012ca:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80012ce:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80012d2:	e9d7 8962 	ldrd	r8, r9, [r7, #392]	@ 0x188
 80012d6:	464b      	mov	r3, r9
 80012d8:	e9d7 ab60 	ldrd	sl, fp, [r7, #384]	@ 0x180
 80012dc:	4652      	mov	r2, sl
 80012de:	fb02 f203 	mul.w	r2, r2, r3
 80012e2:	465b      	mov	r3, fp
 80012e4:	4641      	mov	r1, r8
 80012e6:	fb01 f303 	mul.w	r3, r1, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	4642      	mov	r2, r8
 80012ee:	4651      	mov	r1, sl
 80012f0:	fba2 1201 	umull	r1, r2, r2, r1
 80012f4:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80012f8:	460a      	mov	r2, r1
 80012fa:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 80012fe:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8001302:	4413      	add	r3, r2
 8001304:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8001308:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 800130c:	2b00      	cmp	r3, #0
 800130e:	da09      	bge.n	8001324 <calculate+0x1c0>
 8001310:	f112 013f 	adds.w	r1, r2, #63	@ 0x3f
 8001314:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8001318:	f143 0300 	adc.w	r3, r3, #0
 800131c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001320:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8001324:	f04f 0000 	mov.w	r0, #0
 8001328:	f04f 0100 	mov.w	r1, #0
 800132c:	0990      	lsrs	r0, r2, #6
 800132e:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8001332:	1199      	asrs	r1, r3, #6
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	18a1      	adds	r1, r4, r2
 800133a:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800133e:	eb45 0303 	adc.w	r3, r5, r3
 8001342:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001346:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 800134a:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
    P = (D1_pres*SENS/(2097152l)-OFF)/(32768l);
 800134e:	4b32      	ldr	r3, [pc, #200]	@ (8001418 <calculate+0x2b4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2200      	movs	r2, #0
 8001354:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001358:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800135c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8001360:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	@ 0x178
 8001364:	462a      	mov	r2, r5
 8001366:	fb02 f203 	mul.w	r2, r2, r3
 800136a:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800136e:	4621      	mov	r1, r4
 8001370:	fb01 f303 	mul.w	r3, r1, r3
 8001374:	441a      	add	r2, r3
 8001376:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800137a:	4621      	mov	r1, r4
 800137c:	fba3 1301 	umull	r1, r3, r3, r1
 8001380:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8001384:	460b      	mov	r3, r1
 8001386:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800138a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800138e:	18d3      	adds	r3, r2, r3
 8001390:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8001394:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8001398:	2b00      	cmp	r3, #0
 800139a:	da09      	bge.n	80013b0 <calculate+0x24c>
 800139c:	491f      	ldr	r1, [pc, #124]	@ (800141c <calculate+0x2b8>)
 800139e:	1851      	adds	r1, r2, r1
 80013a0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80013a4:	f143 0300 	adc.w	r3, r3, #0
 80013a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80013ac:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80013b0:	f04f 0000 	mov.w	r0, #0
 80013b4:	f04f 0100 	mov.w	r1, #0
 80013b8:	0d50      	lsrs	r0, r2, #21
 80013ba:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80013be:	1559      	asrs	r1, r3, #21
 80013c0:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 80013c4:	1a84      	subs	r4, r0, r2
 80013c6:	f8c7 4170 	str.w	r4, [r7, #368]	@ 0x170
 80013ca:	eb61 0303 	sbc.w	r3, r1, r3
 80013ce:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80013d2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da0a      	bge.n	80013f0 <calculate+0x28c>
 80013da:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80013de:	1851      	adds	r1, r2, r1
 80013e0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80013e4:	f143 0300 	adc.w	r3, r3, #0
 80013e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80013ec:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013f0:	f04f 0000 	mov.w	r0, #0
 80013f4:	f04f 0100 	mov.w	r1, #0
 80013f8:	0bd0      	lsrs	r0, r2, #15
 80013fa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80013fe:	13d9      	asrs	r1, r3, #15
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <calculate+0x2bc>)
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	e119      	b.n	800163e <calculate+0x4da>
 800140a:	bf00      	nop
 800140c:	20000218 	.word	0x20000218
 8001410:	20000204 	.word	0x20000204
 8001414:	200001f0 	.word	0x200001f0
 8001418:	20000214 	.word	0x20000214
 800141c:	001fffff 	.word	0x001fffff
 8001420:	20000220 	.word	0x20000220
  }
  else
  {
    SENS = (int64_t)(C[1])*32768l+((int64_t)(C[3])*dT)/256l;
 8001424:	4bde      	ldr	r3, [pc, #888]	@ (80017a0 <calculate+0x63c>)
 8001426:	885b      	ldrh	r3, [r3, #2]
 8001428:	b29b      	uxth	r3, r3
 800142a:	2200      	movs	r2, #0
 800142c:	4618      	mov	r0, r3
 800142e:	4611      	mov	r1, r2
 8001430:	f04f 0400 	mov.w	r4, #0
 8001434:	f04f 0500 	mov.w	r5, #0
 8001438:	03cd      	lsls	r5, r1, #15
 800143a:	ea45 4550 	orr.w	r5, r5, r0, lsr #17
 800143e:	03c4      	lsls	r4, r0, #15
 8001440:	4bd7      	ldr	r3, [pc, #860]	@ (80017a0 <calculate+0x63c>)
 8001442:	88db      	ldrh	r3, [r3, #6]
 8001444:	b29b      	uxth	r3, r3
 8001446:	2200      	movs	r2, #0
 8001448:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800144c:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8001450:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001454:	17da      	asrs	r2, r3, #31
 8001456:	469a      	mov	sl, r3
 8001458:	4693      	mov	fp, r2
 800145a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800145e:	460b      	mov	r3, r1
 8001460:	fb0a f203 	mul.w	r2, sl, r3
 8001464:	4603      	mov	r3, r0
 8001466:	fb03 f30b 	mul.w	r3, r3, fp
 800146a:	4413      	add	r3, r2
 800146c:	4602      	mov	r2, r0
 800146e:	fba2 120a 	umull	r1, r2, r2, sl
 8001472:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001476:	460a      	mov	r2, r1
 8001478:	f8c7 21e0 	str.w	r2, [r7, #480]	@ 0x1e0
 800147c:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8001480:	4413      	add	r3, r2
 8001482:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001486:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 800148a:	2b00      	cmp	r3, #0
 800148c:	da09      	bge.n	80014a2 <calculate+0x33e>
 800148e:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001492:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001496:	f143 0300 	adc.w	r3, r3, #0
 800149a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800149e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	0a10      	lsrs	r0, r2, #8
 80014ac:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80014b0:	1219      	asrs	r1, r3, #8
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	18a1      	adds	r1, r4, r2
 80014b8:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80014bc:	eb45 0303 	adc.w	r3, r5, r3
 80014c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80014c4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 80014c8:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
    OFF = (int64_t)(C[2])*65536l+((int64_t)(C[4])*dT)/128l;
 80014cc:	4bb4      	ldr	r3, [pc, #720]	@ (80017a0 <calculate+0x63c>)
 80014ce:	889b      	ldrh	r3, [r3, #4]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	2200      	movs	r2, #0
 80014d4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80014d8:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80014dc:	f04f 0400 	mov.w	r4, #0
 80014e0:	f04f 0500 	mov.w	r5, #0
 80014e4:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 80014e8:	4613      	mov	r3, r2
 80014ea:	041d      	lsls	r5, r3, #16
 80014ec:	460b      	mov	r3, r1
 80014ee:	ea45 4513 	orr.w	r5, r5, r3, lsr #16
 80014f2:	460b      	mov	r3, r1
 80014f4:	041c      	lsls	r4, r3, #16
 80014f6:	4baa      	ldr	r3, [pc, #680]	@ (80017a0 <calculate+0x63c>)
 80014f8:	891b      	ldrh	r3, [r3, #8]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	2200      	movs	r2, #0
 80014fe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001502:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001506:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800150a:	17da      	asrs	r2, r3, #31
 800150c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001510:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8001514:	e9d7 8956 	ldrd	r8, r9, [r7, #344]	@ 0x158
 8001518:	464b      	mov	r3, r9
 800151a:	e9d7 ab54 	ldrd	sl, fp, [r7, #336]	@ 0x150
 800151e:	4652      	mov	r2, sl
 8001520:	fb02 f203 	mul.w	r2, r2, r3
 8001524:	465b      	mov	r3, fp
 8001526:	4641      	mov	r1, r8
 8001528:	fb01 f303 	mul.w	r3, r1, r3
 800152c:	4413      	add	r3, r2
 800152e:	4642      	mov	r2, r8
 8001530:	4651      	mov	r1, sl
 8001532:	fba2 1201 	umull	r1, r2, r2, r1
 8001536:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800153a:	460a      	mov	r2, r1
 800153c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001540:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001544:	4413      	add	r3, r2
 8001546:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800154a:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 800154e:	2b00      	cmp	r3, #0
 8001550:	da09      	bge.n	8001566 <calculate+0x402>
 8001552:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8001556:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800155a:	f143 0300 	adc.w	r3, r3, #0
 800155e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001562:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001566:	f04f 0000 	mov.w	r0, #0
 800156a:	f04f 0100 	mov.w	r1, #0
 800156e:	09d0      	lsrs	r0, r2, #7
 8001570:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001574:	11d9      	asrs	r1, r3, #7
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	18a1      	adds	r1, r4, r2
 800157c:	67b9      	str	r1, [r7, #120]	@ 0x78
 800157e:	eb45 0303 	adc.w	r3, r5, r3
 8001582:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001584:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8001588:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
    P = (D1_pres*SENS/(2097152l)-OFF)/(8192l);
 800158c:	4b85      	ldr	r3, [pc, #532]	@ (80017a4 <calculate+0x640>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2200      	movs	r2, #0
 8001592:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001596:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800159a:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800159e:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 80015a2:	462a      	mov	r2, r5
 80015a4:	fb02 f203 	mul.w	r2, r2, r3
 80015a8:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80015ac:	4621      	mov	r1, r4
 80015ae:	fb01 f303 	mul.w	r3, r1, r3
 80015b2:	441a      	add	r2, r3
 80015b4:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80015b8:	4621      	mov	r1, r4
 80015ba:	fba3 1301 	umull	r1, r3, r3, r1
 80015be:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80015c2:	460b      	mov	r3, r1
 80015c4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80015c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80015cc:	18d3      	adds	r3, r2, r3
 80015ce:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80015d2:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da07      	bge.n	80015ea <calculate+0x486>
 80015da:	4973      	ldr	r1, [pc, #460]	@ (80017a8 <calculate+0x644>)
 80015dc:	1851      	adds	r1, r2, r1
 80015de:	6739      	str	r1, [r7, #112]	@ 0x70
 80015e0:	f143 0300 	adc.w	r3, r3, #0
 80015e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80015e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015ea:	f04f 0000 	mov.w	r0, #0
 80015ee:	f04f 0100 	mov.w	r1, #0
 80015f2:	0d50      	lsrs	r0, r2, #21
 80015f4:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80015f8:	1559      	asrs	r1, r3, #21
 80015fa:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 80015fe:	1a84      	subs	r4, r0, r2
 8001600:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8001604:	eb61 0303 	sbc.w	r3, r1, r3
 8001608:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800160c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001610:	2b00      	cmp	r3, #0
 8001612:	da08      	bge.n	8001626 <calculate+0x4c2>
 8001614:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001618:	1851      	adds	r1, r2, r1
 800161a:	66b9      	str	r1, [r7, #104]	@ 0x68
 800161c:	f143 0300 	adc.w	r3, r3, #0
 8001620:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001622:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001626:	f04f 0000 	mov.w	r0, #0
 800162a:	f04f 0100 	mov.w	r1, #0
 800162e:	0b50      	lsrs	r0, r2, #13
 8001630:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001634:	1359      	asrs	r1, r3, #13
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4b5c      	ldr	r3, [pc, #368]	@ (80017ac <calculate+0x648>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  // Temp conversion
  TEMP = 2000l+(int64_t)(dT)*C[6]/8388608LL;
 800163e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001642:	17da      	asrs	r2, r3, #31
 8001644:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001648:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800164c:	4b54      	ldr	r3, [pc, #336]	@ (80017a0 <calculate+0x63c>)
 800164e:	899b      	ldrh	r3, [r3, #12]
 8001650:	b29b      	uxth	r3, r3
 8001652:	2200      	movs	r2, #0
 8001654:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001658:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 800165c:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8001660:	462b      	mov	r3, r5
 8001662:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8001666:	4642      	mov	r2, r8
 8001668:	fb02 f203 	mul.w	r2, r2, r3
 800166c:	464b      	mov	r3, r9
 800166e:	4621      	mov	r1, r4
 8001670:	fb01 f303 	mul.w	r3, r1, r3
 8001674:	4413      	add	r3, r2
 8001676:	4622      	mov	r2, r4
 8001678:	4641      	mov	r1, r8
 800167a:	fba2 1201 	umull	r1, r2, r2, r1
 800167e:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8001682:	460a      	mov	r2, r1
 8001684:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 8001688:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800168c:	4413      	add	r3, r2
 800168e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8001692:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8001696:	2b00      	cmp	r3, #0
 8001698:	da07      	bge.n	80016aa <calculate+0x546>
 800169a:	4945      	ldr	r1, [pc, #276]	@ (80017b0 <calculate+0x64c>)
 800169c:	1851      	adds	r1, r2, r1
 800169e:	6639      	str	r1, [r7, #96]	@ 0x60
 80016a0:	f143 0300 	adc.w	r3, r3, #0
 80016a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80016a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80016aa:	f04f 0000 	mov.w	r0, #0
 80016ae:	f04f 0100 	mov.w	r1, #0
 80016b2:	0dd0      	lsrs	r0, r2, #23
 80016b4:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 80016b8:	15d9      	asrs	r1, r3, #23
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4613      	mov	r3, r2
 80016c0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b3b      	ldr	r3, [pc, #236]	@ (80017b4 <calculate+0x650>)
 80016c8:	601a      	str	r2, [r3, #0]

  // Second order compensation
  if ( sDepth.model == MS5837_02BA )
 80016ca:	4b3b      	ldr	r3, [pc, #236]	@ (80017b8 <calculate+0x654>)
 80016cc:	7a1b      	ldrb	r3, [r3, #8]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	f040 80a6 	bne.w	8001820 <calculate+0x6bc>
  {
    if((TEMP/100)<20)
 80016d4:	4b37      	ldr	r3, [pc, #220]	@ (80017b4 <calculate+0x650>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80016dc:	f280 817d 	bge.w	80019da <calculate+0x876>
    {
      // Low temp
      Ti = (11*(int64_t)(dT)*(int64_t)(dT))/(34359738368LL);
 80016e0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80016e4:	17da      	asrs	r2, r3, #31
 80016e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80016ea:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80016ee:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80016f2:	17da      	asrs	r2, r3, #31
 80016f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80016f8:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80016fc:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8001700:	462b      	mov	r3, r5
 8001702:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8001706:	4642      	mov	r2, r8
 8001708:	fb02 f203 	mul.w	r2, r2, r3
 800170c:	464b      	mov	r3, r9
 800170e:	4621      	mov	r1, r4
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	4622      	mov	r2, r4
 8001718:	4641      	mov	r1, r8
 800171a:	fba2 1201 	umull	r1, r2, r2, r1
 800171e:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8001722:	460a      	mov	r2, r1
 8001724:	f8c7 21c0 	str.w	r2, [r7, #448]	@ 0x1c0
 8001728:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 800172c:	4413      	add	r3, r2
 800172e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001732:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	@ 0x1c0
 8001736:	4622      	mov	r2, r4
 8001738:	462b      	mov	r3, r5
 800173a:	1891      	adds	r1, r2, r2
 800173c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800173e:	415b      	adcs	r3, r3
 8001740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001742:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001746:	4621      	mov	r1, r4
 8001748:	1851      	adds	r1, r2, r1
 800174a:	6539      	str	r1, [r7, #80]	@ 0x50
 800174c:	4629      	mov	r1, r5
 800174e:	414b      	adcs	r3, r1
 8001750:	657b      	str	r3, [r7, #84]	@ 0x54
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800175e:	4649      	mov	r1, r9
 8001760:	008b      	lsls	r3, r1, #2
 8001762:	4641      	mov	r1, r8
 8001764:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001768:	4641      	mov	r1, r8
 800176a:	008a      	lsls	r2, r1, #2
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	4603      	mov	r3, r0
 8001772:	4622      	mov	r2, r4
 8001774:	1a9b      	subs	r3, r3, r2
 8001776:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800177a:	460b      	mov	r3, r1
 800177c:	462a      	mov	r2, r5
 800177e:	eb63 0302 	sbc.w	r3, r3, r2
 8001782:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001786:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800178a:	2b00      	cmp	r3, #0
 800178c:	da16      	bge.n	80017bc <calculate+0x658>
 800178e:	1e51      	subs	r1, r2, #1
 8001790:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001792:	f143 0307 	adc.w	r3, r3, #7
 8001796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001798:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800179c:	e00e      	b.n	80017bc <calculate+0x658>
 800179e:	bf00      	nop
 80017a0:	20000204 	.word	0x20000204
 80017a4:	20000214 	.word	0x20000214
 80017a8:	001fffff 	.word	0x001fffff
 80017ac:	20000220 	.word	0x20000220
 80017b0:	007fffff 	.word	0x007fffff
 80017b4:	2000021c 	.word	0x2000021c
 80017b8:	200001f0 	.word	0x200001f0
 80017bc:	f04f 0000 	mov.w	r0, #0
 80017c0:	f04f 0100 	mov.w	r1, #0
 80017c4:	10d8      	asrs	r0, r3, #3
 80017c6:	17d9      	asrs	r1, r3, #31
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4613      	mov	r3, r2
 80017ce:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
      OFFi = (31*(TEMP-2000)*(TEMP-2000))/8;
 80017d2:	4bca      	ldr	r3, [pc, #808]	@ (8001afc <calculate+0x998>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80017da:	4bc8      	ldr	r3, [pc, #800]	@ (8001afc <calculate+0x998>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80017e2:	fb03 f202 	mul.w	r2, r3, r2
 80017e6:	4613      	mov	r3, r2
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	da00      	bge.n	80017f2 <calculate+0x68e>
 80017f0:	3307      	adds	r3, #7
 80017f2:	10db      	asrs	r3, r3, #3
 80017f4:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
      SENSi = (63*(TEMP-2000)*(TEMP-2000))/32;
 80017f8:	4bc0      	ldr	r3, [pc, #768]	@ (8001afc <calculate+0x998>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8001800:	4bbe      	ldr	r3, [pc, #760]	@ (8001afc <calculate+0x998>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001808:	fb03 f202 	mul.w	r2, r3, r2
 800180c:	4613      	mov	r3, r2
 800180e:	019b      	lsls	r3, r3, #6
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	da00      	bge.n	8001818 <calculate+0x6b4>
 8001816:	331f      	adds	r3, #31
 8001818:	115b      	asrs	r3, r3, #5
 800181a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800181e:	e0dc      	b.n	80019da <calculate+0x876>
    }
  }
  else
  {
    if((TEMP/100)<20)
 8001820:	4bb6      	ldr	r3, [pc, #728]	@ (8001afc <calculate+0x998>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001828:	f280 809f 	bge.w	800196a <calculate+0x806>
    {
      // Low temp
      Ti = (3 * (int64_t) (dT) * (int64_t) (dT)) / (8589934592LL);
 800182c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001830:	17da      	asrs	r2, r3, #31
 8001832:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001836:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 800183a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800183e:	17da      	asrs	r2, r3, #31
 8001840:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001844:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001848:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 800184c:	462b      	mov	r3, r5
 800184e:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001852:	4642      	mov	r2, r8
 8001854:	fb02 f203 	mul.w	r2, r2, r3
 8001858:	464b      	mov	r3, r9
 800185a:	4621      	mov	r1, r4
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	4622      	mov	r2, r4
 8001864:	4641      	mov	r1, r8
 8001866:	fba2 1201 	umull	r1, r2, r2, r1
 800186a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800186e:	460a      	mov	r2, r1
 8001870:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001874:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001878:	4413      	add	r3, r2
 800187a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800187e:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 8001882:	4622      	mov	r2, r4
 8001884:	462b      	mov	r3, r5
 8001886:	1891      	adds	r1, r2, r2
 8001888:	6439      	str	r1, [r7, #64]	@ 0x40
 800188a:	415b      	adcs	r3, r3
 800188c:	647b      	str	r3, [r7, #68]	@ 0x44
 800188e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001892:	4621      	mov	r1, r4
 8001894:	1851      	adds	r1, r2, r1
 8001896:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 800189a:	4629      	mov	r1, r5
 800189c:	eb43 0101 	adc.w	r1, r3, r1
 80018a0:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80018a4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da06      	bge.n	80018ba <calculate+0x756>
 80018ac:	1e51      	subs	r1, r2, #1
 80018ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80018b0:	f143 0301 	adc.w	r3, r3, #1
 80018b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018ba:	f04f 0000 	mov.w	r0, #0
 80018be:	f04f 0100 	mov.w	r1, #0
 80018c2:	1058      	asrs	r0, r3, #1
 80018c4:	17d9      	asrs	r1, r3, #31
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4613      	mov	r3, r2
 80018cc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
      OFFi = (3 * (TEMP-2000) * (TEMP-2000)) / 2;
 80018d0:	4b8a      	ldr	r3, [pc, #552]	@ (8001afc <calculate+0x998>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80018d8:	4b88      	ldr	r3, [pc, #544]	@ (8001afc <calculate+0x998>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80018e0:	fb03 f202 	mul.w	r2, r3, r2
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	441a      	add	r2, r3
 80018ea:	0fd3      	lsrs	r3, r2, #31
 80018ec:	4413      	add	r3, r2
 80018ee:	105b      	asrs	r3, r3, #1
 80018f0:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
      SENSi = (5 * (TEMP-2000) * (TEMP-2000)) / 8;
 80018f4:	4b81      	ldr	r3, [pc, #516]	@ (8001afc <calculate+0x998>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80018fc:	4b7f      	ldr	r3, [pc, #508]	@ (8001afc <calculate+0x998>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001904:	fb03 f202 	mul.w	r2, r3, r2
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	da00      	bge.n	8001914 <calculate+0x7b0>
 8001912:	3307      	adds	r3, #7
 8001914:	10db      	asrs	r3, r3, #3
 8001916:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c

      if ((TEMP/100)<-15)
 800191a:	4b78      	ldr	r3, [pc, #480]	@ (8001afc <calculate+0x998>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f513 6fc8 	cmn.w	r3, #1600	@ 0x640
 8001922:	dc5a      	bgt.n	80019da <calculate+0x876>
      {
        // Very low temp
        OFFi = OFFi + 7 * (TEMP+1500l) * (TEMP+1500l);
 8001924:	4b75      	ldr	r3, [pc, #468]	@ (8001afc <calculate+0x998>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 800192c:	4b73      	ldr	r3, [pc, #460]	@ (8001afc <calculate+0x998>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001934:	fb03 f202 	mul.w	r2, r3, r2
 8001938:	4613      	mov	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	1a9a      	subs	r2, r3, r2
 800193e:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8001942:	4413      	add	r3, r2
 8001944:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
        SENSi = SENSi + 4 * (TEMP+1500l) * (TEMP+1500l);
 8001948:	4b6c      	ldr	r3, [pc, #432]	@ (8001afc <calculate+0x998>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 8001950:	4b6a      	ldr	r3, [pc, #424]	@ (8001afc <calculate+0x998>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001958:	fb02 f303 	mul.w	r3, r2, r3
 800195c:	009a      	lsls	r2, r3, #2
 800195e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001962:	4413      	add	r3, r2
 8001964:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8001968:	e037      	b.n	80019da <calculate+0x876>
      }
    }
    else if ((TEMP/100)>=20)
 800196a:	4b64      	ldr	r3, [pc, #400]	@ (8001afc <calculate+0x998>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001972:	db32      	blt.n	80019da <calculate+0x876>
    {
      // High temp
      Ti = 2*(dT*dT)/(137438953472LL);
 8001974:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001978:	fb03 f303 	mul.w	r3, r3, r3
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	17da      	asrs	r2, r3, #31
 8001980:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001984:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001988:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 800198c:	2b00      	cmp	r3, #0
 800198e:	da06      	bge.n	800199e <calculate+0x83a>
 8001990:	1e51      	subs	r1, r2, #1
 8001992:	6339      	str	r1, [r7, #48]	@ 0x30
 8001994:	f143 031f 	adc.w	r3, r3, #31
 8001998:	637b      	str	r3, [r7, #52]	@ 0x34
 800199a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800199e:	f04f 0000 	mov.w	r0, #0
 80019a2:	f04f 0100 	mov.w	r1, #0
 80019a6:	1158      	asrs	r0, r3, #5
 80019a8:	17d9      	asrs	r1, r3, #31
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4613      	mov	r3, r2
 80019b0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
      OFFi = (1*(TEMP-2000)*(TEMP-2000))/16;
 80019b4:	4b51      	ldr	r3, [pc, #324]	@ (8001afc <calculate+0x998>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80019bc:	4b4f      	ldr	r3, [pc, #316]	@ (8001afc <calculate+0x998>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da00      	bge.n	80019ce <calculate+0x86a>
 80019cc:	330f      	adds	r3, #15
 80019ce:	111b      	asrs	r3, r3, #4
 80019d0:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
      SENSi = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    }
  }

  // Calculate pressure and temp second order
  OFF2 = OFF - OFFi;
 80019da:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80019de:	17da      	asrs	r2, r3, #31
 80019e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80019e4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80019e8:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 80019ec:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80019f0:	4621      	mov	r1, r4
 80019f2:	1a51      	subs	r1, r2, r1
 80019f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80019f6:	4629      	mov	r1, r5
 80019f8:	eb63 0301 	sbc.w	r3, r3, r1
 80019fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019fe:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001a02:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  SENS2 = SENS - SENSi;
 8001a06:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001a0a:	17da      	asrs	r2, r3, #31
 8001a0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001a10:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001a14:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 8001a18:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	1a51      	subs	r1, r2, r1
 8001a20:	6239      	str	r1, [r7, #32]
 8001a22:	4629      	mov	r1, r5
 8001a24:	eb63 0301 	sbc.w	r3, r3, r1
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a2a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001a2e:	e9c7 3480 	strd	r3, r4, [r7, #512]	@ 0x200
  sDepth.temp = TEMP - Ti;
 8001a32:	4b32      	ldr	r3, [pc, #200]	@ (8001afc <calculate+0x998>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001a3a:	1ad2      	subs	r2, r2, r3
 8001a3c:	4b30      	ldr	r3, [pc, #192]	@ (8001b00 <calculate+0x99c>)
 8001a3e:	611a      	str	r2, [r3, #16]

  if ( sDepth.model == MS5837_02BA )
 8001a40:	4b2f      	ldr	r3, [pc, #188]	@ (8001b00 <calculate+0x99c>)
 8001a42:	7a1b      	ldrb	r3, [r3, #8]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d161      	bne.n	8001b0c <calculate+0x9a8>
  {
    sDepth.pressure = ((D1_pres * SENS2) / 2097152l - OFF2) / 32768l;
 8001a48:	4b2e      	ldr	r3, [pc, #184]	@ (8001b04 <calculate+0x9a0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001a52:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001a56:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a5a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001a5e:	462a      	mov	r2, r5
 8001a60:	fb02 f203 	mul.w	r2, r2, r3
 8001a64:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001a68:	4621      	mov	r1, r4
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8001a74:	4621      	mov	r1, r4
 8001a76:	fba2 1201 	umull	r1, r2, r2, r1
 8001a7a:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8001a7e:	460a      	mov	r2, r1
 8001a80:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 8001a84:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001a88:	4413      	add	r3, r2
 8001a8a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001a8e:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da07      	bge.n	8001aa6 <calculate+0x942>
 8001a96:	491c      	ldr	r1, [pc, #112]	@ (8001b08 <calculate+0x9a4>)
 8001a98:	1851      	adds	r1, r2, r1
 8001a9a:	61b9      	str	r1, [r7, #24]
 8001a9c:	f143 0300 	adc.w	r3, r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	0d50      	lsrs	r0, r2, #21
 8001ab0:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8001ab4:	1559      	asrs	r1, r3, #21
 8001ab6:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001aba:	1a84      	subs	r4, r0, r2
 8001abc:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 8001ac0:	eb61 0303 	sbc.w	r3, r1, r3
 8001ac4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001ac8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da08      	bge.n	8001ae2 <calculate+0x97e>
 8001ad0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001ad4:	1851      	adds	r1, r2, r1
 8001ad6:	6139      	str	r1, [r7, #16]
 8001ad8:	f143 0300 	adc.w	r3, r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ae2:	f04f 0000 	mov.w	r0, #0
 8001ae6:	f04f 0100 	mov.w	r1, #0
 8001aea:	0bd0      	lsrs	r0, r2, #15
 8001aec:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8001af0:	13d9      	asrs	r1, r3, #15
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4b02      	ldr	r3, [pc, #8]	@ (8001b00 <calculate+0x99c>)
 8001af8:	60da      	str	r2, [r3, #12]
  }
  else
  {
      sDepth.pressure = ((D1_pres * SENS2) / 2097152l - OFF2) / 8192l;
  }
}
 8001afa:	e060      	b.n	8001bbe <calculate+0xa5a>
 8001afc:	2000021c 	.word	0x2000021c
 8001b00:	200001f0 	.word	0x200001f0
 8001b04:	20000214 	.word	0x20000214
 8001b08:	001fffff 	.word	0x001fffff
      sDepth.pressure = ((D1_pres * SENS2) / 2097152l - OFF2) / 8192l;
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bcc <calculate+0xa68>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001b16:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001b1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b1e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001b22:	462a      	mov	r2, r5
 8001b24:	fb02 f203 	mul.w	r2, r2, r3
 8001b28:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8001b38:	4621      	mov	r1, r4
 8001b3a:	fba2 1201 	umull	r1, r2, r2, r1
 8001b3e:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8001b42:	460a      	mov	r2, r1
 8001b44:	f8c7 21a8 	str.w	r2, [r7, #424]	@ 0x1a8
 8001b48:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001b52:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	da07      	bge.n	8001b6a <calculate+0xa06>
 8001b5a:	491d      	ldr	r1, [pc, #116]	@ (8001bd0 <calculate+0xa6c>)
 8001b5c:	1851      	adds	r1, r2, r1
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	f143 0300 	adc.w	r3, r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b6a:	f04f 0000 	mov.w	r0, #0
 8001b6e:	f04f 0100 	mov.w	r1, #0
 8001b72:	0d50      	lsrs	r0, r2, #21
 8001b74:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8001b78:	1559      	asrs	r1, r3, #21
 8001b7a:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001b7e:	1a84      	subs	r4, r0, r2
 8001b80:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8001b84:	eb61 0303 	sbc.w	r3, r1, r3
 8001b88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001b8c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da08      	bge.n	8001ba6 <calculate+0xa42>
 8001b94:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001b98:	1851      	adds	r1, r2, r1
 8001b9a:	6039      	str	r1, [r7, #0]
 8001b9c:	f143 0300 	adc.w	r3, r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ba6:	f04f 0000 	mov.w	r0, #0
 8001baa:	f04f 0100 	mov.w	r1, #0
 8001bae:	0b50      	lsrs	r0, r2, #13
 8001bb0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001bb4:	1359      	asrs	r1, r3, #13
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <calculate+0xa70>)
 8001bbc:	60da      	str	r2, [r3, #12]
}
 8001bbe:	bf00      	nop
 8001bc0:	f507 770d 	add.w	r7, r7, #564	@ 0x234
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001bca:	4770      	bx	lr
 8001bcc:	20000214 	.word	0x20000214
 8001bd0:	001fffff 	.word	0x001fffff
 8001bd4:	200001f0 	.word	0x200001f0

08001bd8 <delay_us_nop>:
  return n_rem ^ 0x00;
}

// Rough microsecond delay. Volatile variable to prevent compiler optimizing out in -O3
void delay_us_nop(uint32_t us)
{
 8001bd8:	b5b0      	push	{r4, r5, r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    volatile uint32_t iterations = (us * (SystemCoreClock / 1e6));
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe fc8f 	bl	8000504 <__aeabi_ui2d>
 8001be6:	4604      	mov	r4, r0
 8001be8:	460d      	mov	r5, r1
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <delay_us_nop+0x68>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc88 	bl	8000504 <__aeabi_ui2d>
 8001bf4:	a310      	add	r3, pc, #64	@ (adr r3, 8001c38 <delay_us_nop+0x60>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fe27 	bl	800084c <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4620      	mov	r0, r4
 8001c04:	4629      	mov	r1, r5
 8001c06:	f7fe fcf7 	bl	80005f8 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f7fe ffc9 	bl	8000ba8 <__aeabi_d2uiz>
 8001c16:	4603      	mov	r3, r0
 8001c18:	60fb      	str	r3, [r7, #12]
    while (iterations--)
 8001c1a:	e000      	b.n	8001c1e <delay_us_nop+0x46>
    {
        __NOP();
 8001c1c:	bf00      	nop
    while (iterations--)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	60fa      	str	r2, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f9      	bne.n	8001c1c <delay_us_nop+0x44>
    }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bdb0      	pop	{r4, r5, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	f3af 8000 	nop.w
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	412e8480 	.word	0x412e8480
 8001c40:	20000000 	.word	0x20000000

08001c44 <process_cmd>:
// Command Processing
UART_QUEUE uQueue;
uint8_t msg[128];

void process_cmd(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  if (uQueue.msgCount > 0)
 8001c48:	4b29      	ldr	r3, [pc, #164]	@ (8001cf0 <process_cmd+0xac>)
 8001c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d04b      	beq.n	8001cec <process_cmd+0xa8>
  {
    // First calculate which message we need to process from the queue (0 - 16). wIndex - msgCount
    uQueue.rIndex = uQueue.wIndex - uQueue.msgCount;
 8001c54:	4b26      	ldr	r3, [pc, #152]	@ (8001cf0 <process_cmd+0xac>)
 8001c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c5a:	789a      	ldrb	r2, [r3, #2]
 8001c5c:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <process_cmd+0xac>)
 8001c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	b25a      	sxtb	r2, r3
 8001c6c:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <process_cmd+0xac>)
 8001c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c72:	70da      	strb	r2, [r3, #3]

    uQueue.rIndex = uQueue.rIndex < 0 ? uQueue.rIndex - UART_QUEUE_SIZE : uQueue.rIndex;
 8001c74:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <process_cmd+0xac>)
 8001c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c7a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	da09      	bge.n	8001c96 <process_cmd+0x52>
 8001c82:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <process_cmd+0xac>)
 8001c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c88:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	3b20      	subs	r3, #32
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	e004      	b.n	8001ca0 <process_cmd+0x5c>
 8001c96:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <process_cmd+0xac>)
 8001c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c9c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001ca0:	4a13      	ldr	r2, [pc, #76]	@ (8001cf0 <process_cmd+0xac>)
 8001ca2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ca6:	70d3      	strb	r3, [r2, #3]

    uQueue.msgCount--;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <process_cmd+0xac>)
 8001caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <process_cmd+0xac>)
 8001cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cba:	801a      	strh	r2, [r3, #0]

    printf("Processing Command! : %s\r\n",uQueue.msgQueue[uQueue.rIndex]);
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <process_cmd+0xac>)
 8001cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cc2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001cc6:	01db      	lsls	r3, r3, #7
 8001cc8:	4a09      	ldr	r2, [pc, #36]	@ (8001cf0 <process_cmd+0xac>)
 8001cca:	4413      	add	r3, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4809      	ldr	r0, [pc, #36]	@ (8001cf4 <process_cmd+0xb0>)
 8001cd0:	f008 fe88 	bl	800a9e4 <iprintf>

    strcpy(msg,uQueue.msgQueue[uQueue.rIndex]);
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <process_cmd+0xac>)
 8001cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cda:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001cde:	01db      	lsls	r3, r3, #7
 8001ce0:	4a03      	ldr	r2, [pc, #12]	@ (8001cf0 <process_cmd+0xac>)
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4804      	ldr	r0, [pc, #16]	@ (8001cf8 <process_cmd+0xb4>)
 8001ce8:	f008 ff25 	bl	800ab36 <strcpy>

  }
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000224 	.word	0x20000224
 8001cf4:	0800cd08 	.word	0x0800cd08
 8001cf8:	20001228 	.word	0x20001228

08001cfc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001d14:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001d1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00b      	beq.n	8001d3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d24:	e000      	b.n	8001d28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f9      	beq.n	8001d26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d32:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d52:	f001 fcce 	bl	80036f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d56:	f000 f905 	bl	8001f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5a:	f000 fd63 	bl	8002824 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d5e:	f000 fd3b 	bl	80027d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d62:	f000 f967 	bl	8002034 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d66:	f000 fa2f 	bl	80021c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d6a:	f000 fa6d 	bl	8002248 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001d6e:	f000 faab 	bl	80022c8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001d72:	f000 fcd1 	bl	8002718 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001d76:	f000 fcff 	bl	8002778 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001d7a:	f000 fb2b 	bl	80023d4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001d7e:	f000 fb67 	bl	8002450 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d82:	f000 fbbf 	bl	8002504 <MX_TIM2_Init>
  MX_TIM16_Init();
 8001d86:	f000 fc7d 	bl	8002684 <MX_TIM16_Init>
  MX_CRC_Init();
 8001d8a:	f000 f9fb 	bl	8002184 <MX_CRC_Init>
  MX_IWDG_Init();
 8001d8e:	f000 fadb 	bl	8002348 <MX_IWDG_Init>
  MX_TIM6_Init();
 8001d92:	f000 fc0b 	bl	80025ac <MX_TIM6_Init>
  MX_RTC_Init();
 8001d96:	f000 faf5 	bl	8002384 <MX_RTC_Init>
  MX_TIM7_Init();
 8001d9a:	f000 fc3d 	bl	8002618 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Turn on Atlas Sensors
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	2120      	movs	r1, #32
 8001da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da6:	f003 fee3 	bl	8005b70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001daa:	2201      	movs	r2, #1
 8001dac:	2104      	movs	r1, #4
 8001dae:	485a      	ldr	r0, [pc, #360]	@ (8001f18 <main+0x1cc>)
 8001db0:	f003 fede 	bl	8005b70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8001db4:	2201      	movs	r2, #1
 8001db6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dba:	4857      	ldr	r0, [pc, #348]	@ (8001f18 <main+0x1cc>)
 8001dbc:	f003 fed8 	bl	8005b70 <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8001dc0:	2064      	movs	r0, #100	@ 0x64
 8001dc2:	f001 fd0b 	bl	80037dc <HAL_Delay>

  // Set up UART RX interrupt
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t*)uartrxbuff, sizeof(uartrxbuff));
 8001dc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dca:	4954      	ldr	r1, [pc, #336]	@ (8001f1c <main+0x1d0>)
 8001dcc:	4854      	ldr	r0, [pc, #336]	@ (8001f20 <main+0x1d4>)
 8001dce:	f008 f87b 	bl	8009ec8 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_HT);
 8001dd2:	4b53      	ldr	r3, [pc, #332]	@ (8001f20 <main+0x1d4>)
 8001dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4b51      	ldr	r3, [pc, #324]	@ (8001f20 <main+0x1d4>)
 8001ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0204 	bic.w	r2, r2, #4
 8001de4:	601a      	str	r2, [r3, #0]

  // Calibrate the ADC
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001de6:	217f      	movs	r1, #127	@ 0x7f
 8001de8:	484e      	ldr	r0, [pc, #312]	@ (8001f24 <main+0x1d8>)
 8001dea:	f003 f83b 	bl	8004e64 <HAL_ADCEx_Calibration_Start>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <main+0xb2>
  {
      printf("ADC Calibration Error!\n");
 8001df4:	484c      	ldr	r0, [pc, #304]	@ (8001f28 <main+0x1dc>)
 8001df6:	f008 fe5d 	bl	800aab4 <puts>
      while (1);
 8001dfa:	bf00      	nop
 8001dfc:	e7fd      	b.n	8001dfa <main+0xae>
  }
  else
  {
    printf("ADC Successfully Calibrated!\n");
 8001dfe:	484b      	ldr	r0, [pc, #300]	@ (8001f2c <main+0x1e0>)
 8001e00:	f008 fe58 	bl	800aab4 <puts>
  }

  //HAL_Delay(500);

  // Start the timer for ADC Transfers at 100ms
  HAL_TIM_Base_Start_IT(&htim6);
 8001e04:	484a      	ldr	r0, [pc, #296]	@ (8001f30 <main+0x1e4>)
 8001e06:	f006 f95f 	bl	80080c8 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 5);
 8001e0a:	2205      	movs	r2, #5
 8001e0c:	4949      	ldr	r1, [pc, #292]	@ (8001f34 <main+0x1e8>)
 8001e0e:	4845      	ldr	r0, [pc, #276]	@ (8001f24 <main+0x1d8>)
 8001e10:	f002 f84a 	bl	8003ea8 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int i = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	607b      	str	r3, [r7, #4]
  float fdepth = 0.0;
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]

  while (1)
  {
    HAL_Delay(1);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f001 fcdc 	bl	80037dc <HAL_Delay>

    // 2 Hz loop
    if (i % 500 == 0) 
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4b44      	ldr	r3, [pc, #272]	@ (8001f38 <main+0x1ec>)
 8001e28:	fb83 1302 	smull	r1, r3, r3, r2
 8001e2c:	1159      	asrs	r1, r3, #5
 8001e2e:	17d3      	asrs	r3, r2, #31
 8001e30:	1acb      	subs	r3, r1, r3
 8001e32:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d12b      	bne.n	8001e98 <main+0x14c>
    {
      // LEDs
      HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 8001e40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e44:	483d      	ldr	r0, [pc, #244]	@ (8001f3c <main+0x1f0>)
 8001e46:	f003 feab 	bl	8005ba0 <HAL_GPIO_TogglePin>
      //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_11);
      HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 8001e4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e4e:	483b      	ldr	r0, [pc, #236]	@ (8001f3c <main+0x1f0>)
 8001e50:	f003 fea6 	bl	8005ba0 <HAL_GPIO_TogglePin>
      sprintf(buffer, "ADC Value 1: %d\r\nADC Value 2: %d\r\nADC Value 3: %d\r\nADC Value 4: %d\r\nADC Value 5: %d\r\n\r\n", adc_buffer[0], adc_buffer[1], adc_buffer[2], adc_buffer[3], adc_buffer[4]);
 8001e54:	4b37      	ldr	r3, [pc, #220]	@ (8001f34 <main+0x1e8>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	4b36      	ldr	r3, [pc, #216]	@ (8001f34 <main+0x1e8>)
 8001e5c:	885b      	ldrh	r3, [r3, #2]
 8001e5e:	461c      	mov	r4, r3
 8001e60:	4b34      	ldr	r3, [pc, #208]	@ (8001f34 <main+0x1e8>)
 8001e62:	889b      	ldrh	r3, [r3, #4]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b33      	ldr	r3, [pc, #204]	@ (8001f34 <main+0x1e8>)
 8001e68:	88db      	ldrh	r3, [r3, #6]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4b31      	ldr	r3, [pc, #196]	@ (8001f34 <main+0x1e8>)
 8001e6e:	891b      	ldrh	r3, [r3, #8]
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	9101      	str	r1, [sp, #4]
 8001e74:	9200      	str	r2, [sp, #0]
 8001e76:	4623      	mov	r3, r4
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4931      	ldr	r1, [pc, #196]	@ (8001f40 <main+0x1f4>)
 8001e7c:	4831      	ldr	r0, [pc, #196]	@ (8001f44 <main+0x1f8>)
 8001e7e:	f008 fccf 	bl	800a820 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e82:	4830      	ldr	r0, [pc, #192]	@ (8001f44 <main+0x1f8>)
 8001e84:	f7fe f9f4 	bl	8000270 <strlen>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e90:	492c      	ldr	r1, [pc, #176]	@ (8001f44 <main+0x1f8>)
 8001e92:	4823      	ldr	r0, [pc, #140]	@ (8001f20 <main+0x1d4>)
 8001e94:	f006 fde6 	bl	8008a64 <HAL_UART_Transmit>
    }

    // 5 Hz loop
    if (i % 200 == 0) 
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f48 <main+0x1fc>)
 8001e9c:	fb83 1302 	smull	r1, r3, r3, r2
 8001ea0:	1199      	asrs	r1, r3, #6
 8001ea2:	17d3      	asrs	r3, r2, #31
 8001ea4:	1acb      	subs	r3, r1, r3
 8001ea6:	21c8      	movs	r1, #200	@ 0xc8
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d12e      	bne.n	8001f10 <main+0x1c4>
    {
      // Refresh watchdog
      HAL_IWDG_Refresh(&hiwdg);
 8001eb2:	4826      	ldr	r0, [pc, #152]	@ (8001f4c <main+0x200>)
 8001eb4:	f004 fce8 	bl	8006888 <HAL_IWDG_Refresh>

      // Process any incoming commands on UART
      process_cmd();
 8001eb8:	f7ff fec4 	bl	8001c44 <process_cmd>

      printf("ADC Value 1: %d\n",adc_buffer[0]);
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <main+0x1e8>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4823      	ldr	r0, [pc, #140]	@ (8001f50 <main+0x204>)
 8001ec4:	f008 fd8e 	bl	800a9e4 <iprintf>

      // Process Timed Events
      if (depth_flag)
 8001ec8:	4b22      	ldr	r3, [pc, #136]	@ (8001f54 <main+0x208>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01e      	beq.n	8001f10 <main+0x1c4>
      {
          depth_flag = 0;
 8001ed2:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <main+0x208>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]

          printf("[%d] Reading Depth Sensor...\n",depthCounter);
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <main+0x20c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	481f      	ldr	r0, [pc, #124]	@ (8001f5c <main+0x210>)
 8001ee0:	f008 fd80 	bl	800a9e4 <iprintf>

          // Measure depth sensor
          if (readMS5837() == 0)
 8001ee4:	f7ff f8b6 	bl	8001054 <readMS5837>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10b      	bne.n	8001f06 <main+0x1ba>
          {
            fdepth = getDepth();
 8001eee:	f7ff f877 	bl	8000fe0 <getDepth>
 8001ef2:	ed87 0a00 	vstr	s0, [r7]
            printf("- Depth = %3.3f\n",fdepth);
 8001ef6:	6838      	ldr	r0, [r7, #0]
 8001ef8:	f7fe fb26 	bl	8000548 <__aeabi_f2d>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4817      	ldr	r0, [pc, #92]	@ (8001f60 <main+0x214>)
 8001f02:	f008 fd6f 	bl	800a9e4 <iprintf>
          }

          depthCounter++;
 8001f06:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <main+0x20c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	4a12      	ldr	r2, [pc, #72]	@ (8001f58 <main+0x20c>)
 8001f0e:	6013      	str	r3, [r2, #0]
      }
    }

    i++;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3301      	adds	r3, #1
 8001f14:	607b      	str	r3, [r7, #4]
    HAL_Delay(1);
 8001f16:	e782      	b.n	8001e1e <main+0xd2>
 8001f18:	48000400 	.word	0x48000400
 8001f1c:	200017e0 	.word	0x200017e0
 8001f20:	20001710 	.word	0x20001710
 8001f24:	200012a8 	.word	0x200012a8
 8001f28:	0800cd24 	.word	0x0800cd24
 8001f2c:	0800cd3c 	.word	0x0800cd3c
 8001f30:	200015a4 	.word	0x200015a4
 8001f34:	200018f4 	.word	0x200018f4
 8001f38:	10624dd3 	.word	0x10624dd3
 8001f3c:	48000800 	.word	0x48000800
 8001f40:	0800cd5c 	.word	0x0800cd5c
 8001f44:	20001900 	.word	0x20001900
 8001f48:	51eb851f 	.word	0x51eb851f
 8001f4c:	20001474 	.word	0x20001474
 8001f50:	0800cdb4 	.word	0x0800cdb4
 8001f54:	20001a00 	.word	0x20001a00
 8001f58:	200018e0 	.word	0x200018e0
 8001f5c:	0800cdc8 	.word	0x0800cdc8
 8001f60:	0800cde8 	.word	0x0800cde8

08001f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b096      	sub	sp, #88	@ 0x58
 8001f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	2244      	movs	r2, #68	@ 0x44
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f008 fda6 	bl	800aac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f86:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001f8a:	f004 fcab 	bl	80068e4 <HAL_PWREx_ControlVoltageScaling>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f94:	f000 fde2 	bl	8002b5c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f98:	f004 fc86 	bl	80068a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f9c:	4b24      	ldr	r3, [pc, #144]	@ (8002030 <SystemClock_Config+0xcc>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa2:	4a23      	ldr	r2, [pc, #140]	@ (8002030 <SystemClock_Config+0xcc>)
 8001fa4:	f023 0318 	bic.w	r3, r3, #24
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001fac:	231d      	movs	r3, #29
 8001fae:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fc6:	2360      	movs	r3, #96	@ 0x60
 8001fc8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001fd2:	2305      	movs	r3, #5
 8001fd4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001fd6:	2320      	movs	r3, #32
 8001fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fda:	2307      	movs	r3, #7
 8001fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4618      	mov	r0, r3
 8001fec:	f004 fcd0 	bl	8006990 <HAL_RCC_OscConfig>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ff6:	f000 fdb1 	bl	8002b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ffa:	230f      	movs	r3, #15
 8001ffc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ffe:	2303      	movs	r3, #3
 8002000:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800200e:	463b      	mov	r3, r7
 8002010:	2104      	movs	r1, #4
 8002012:	4618      	mov	r0, r3
 8002014:	f005 f8d0 	bl	80071b8 <HAL_RCC_ClockConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800201e:	f000 fd9d 	bl	8002b5c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002022:	f005 fd37 	bl	8007a94 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002026:	bf00      	nop
 8002028:	3758      	adds	r7, #88	@ 0x58
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000

08002034 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800203a:	463b      	mov	r3, r7
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
 8002048:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800204a:	4b47      	ldr	r3, [pc, #284]	@ (8002168 <MX_ADC1_Init+0x134>)
 800204c:	4a47      	ldr	r2, [pc, #284]	@ (800216c <MX_ADC1_Init+0x138>)
 800204e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002050:	4b45      	ldr	r3, [pc, #276]	@ (8002168 <MX_ADC1_Init+0x134>)
 8002052:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002056:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002058:	4b43      	ldr	r3, [pc, #268]	@ (8002168 <MX_ADC1_Init+0x134>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800205e:	4b42      	ldr	r3, [pc, #264]	@ (8002168 <MX_ADC1_Init+0x134>)
 8002060:	2200      	movs	r2, #0
 8002062:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002064:	4b40      	ldr	r3, [pc, #256]	@ (8002168 <MX_ADC1_Init+0x134>)
 8002066:	2201      	movs	r2, #1
 8002068:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800206a:	4b3f      	ldr	r3, [pc, #252]	@ (8002168 <MX_ADC1_Init+0x134>)
 800206c:	2208      	movs	r2, #8
 800206e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002070:	4b3d      	ldr	r3, [pc, #244]	@ (8002168 <MX_ADC1_Init+0x134>)
 8002072:	2200      	movs	r2, #0
 8002074:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002076:	4b3c      	ldr	r3, [pc, #240]	@ (8002168 <MX_ADC1_Init+0x134>)
 8002078:	2200      	movs	r2, #0
 800207a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 800207c:	4b3a      	ldr	r3, [pc, #232]	@ (8002168 <MX_ADC1_Init+0x134>)
 800207e:	2205      	movs	r2, #5
 8002080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002082:	4b39      	ldr	r3, [pc, #228]	@ (8002168 <MX_ADC1_Init+0x134>)
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800208a:	4b37      	ldr	r3, [pc, #220]	@ (8002168 <MX_ADC1_Init+0x134>)
 800208c:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8002090:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002092:	4b35      	ldr	r3, [pc, #212]	@ (8002168 <MX_ADC1_Init+0x134>)
 8002094:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002098:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800209a:	4b33      	ldr	r3, [pc, #204]	@ (8002168 <MX_ADC1_Init+0x134>)
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020a2:	4b31      	ldr	r3, [pc, #196]	@ (8002168 <MX_ADC1_Init+0x134>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80020a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002168 <MX_ADC1_Init+0x134>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020b0:	482d      	ldr	r0, [pc, #180]	@ (8002168 <MX_ADC1_Init+0x134>)
 80020b2:	f001 fdb7 	bl	8003c24 <HAL_ADC_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80020bc:	f000 fd4e 	bl	8002b5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80020c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <MX_ADC1_Init+0x13c>)
 80020c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020c4:	2306      	movs	r3, #6
 80020c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80020c8:	2306      	movs	r3, #6
 80020ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020cc:	237f      	movs	r3, #127	@ 0x7f
 80020ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020d0:	2304      	movs	r3, #4
 80020d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	4619      	mov	r1, r3
 80020dc:	4822      	ldr	r0, [pc, #136]	@ (8002168 <MX_ADC1_Init+0x134>)
 80020de:	f002 f939 	bl	8004354 <HAL_ADC_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80020e8:	f000 fd38 	bl	8002b5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80020ec:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <MX_ADC1_Init+0x140>)
 80020ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020f0:	230c      	movs	r3, #12
 80020f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f4:	463b      	mov	r3, r7
 80020f6:	4619      	mov	r1, r3
 80020f8:	481b      	ldr	r0, [pc, #108]	@ (8002168 <MX_ADC1_Init+0x134>)
 80020fa:	f002 f92b 	bl	8004354 <HAL_ADC_ConfigChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8002104:	f000 fd2a 	bl	8002b5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <MX_ADC1_Init+0x144>)
 800210a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800210c:	2312      	movs	r3, #18
 800210e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002110:	463b      	mov	r3, r7
 8002112:	4619      	mov	r1, r3
 8002114:	4814      	ldr	r0, [pc, #80]	@ (8002168 <MX_ADC1_Init+0x134>)
 8002116:	f002 f91d 	bl	8004354 <HAL_ADC_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8002120:	f000 fd1c 	bl	8002b5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002124:	4b15      	ldr	r3, [pc, #84]	@ (800217c <MX_ADC1_Init+0x148>)
 8002126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002128:	2318      	movs	r3, #24
 800212a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	4619      	mov	r1, r3
 8002130:	480d      	ldr	r0, [pc, #52]	@ (8002168 <MX_ADC1_Init+0x134>)
 8002132:	f002 f90f 	bl	8004354 <HAL_ADC_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 800213c:	f000 fd0e 	bl	8002b5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002140:	4b0f      	ldr	r3, [pc, #60]	@ (8002180 <MX_ADC1_Init+0x14c>)
 8002142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002148:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800214a:	463b      	mov	r3, r7
 800214c:	4619      	mov	r1, r3
 800214e:	4806      	ldr	r0, [pc, #24]	@ (8002168 <MX_ADC1_Init+0x134>)
 8002150:	f002 f900 	bl	8004354 <HAL_ADC_ConfigChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 800215a:	f000 fcff 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200012a8 	.word	0x200012a8
 800216c:	50040000 	.word	0x50040000
 8002170:	08600004 	.word	0x08600004
 8002174:	0c900008 	.word	0x0c900008
 8002178:	10c00010 	.word	0x10c00010
 800217c:	25b00200 	.word	0x25b00200
 8002180:	36902000 	.word	0x36902000

08002184 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002188:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <MX_CRC_Init+0x3c>)
 800218a:	4a0e      	ldr	r2, [pc, #56]	@ (80021c4 <MX_CRC_Init+0x40>)
 800218c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800218e:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <MX_CRC_Init+0x3c>)
 8002190:	2200      	movs	r2, #0
 8002192:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002194:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <MX_CRC_Init+0x3c>)
 8002196:	2200      	movs	r2, #0
 8002198:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <MX_CRC_Init+0x3c>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80021a0:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <MX_CRC_Init+0x3c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <MX_CRC_Init+0x3c>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80021ac:	4804      	ldr	r0, [pc, #16]	@ (80021c0 <MX_CRC_Init+0x3c>)
 80021ae:	f002 fffd 	bl	80051ac <HAL_CRC_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80021b8:	f000 fcd0 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20001354 	.word	0x20001354
 80021c4:	40023000 	.word	0x40023000

080021c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <MX_I2C1_Init+0x74>)
 80021ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002240 <MX_I2C1_Init+0x78>)
 80021d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80021d2:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <MX_I2C1_Init+0x74>)
 80021d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002244 <MX_I2C1_Init+0x7c>)
 80021d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021d8:	4b18      	ldr	r3, [pc, #96]	@ (800223c <MX_I2C1_Init+0x74>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021de:	4b17      	ldr	r3, [pc, #92]	@ (800223c <MX_I2C1_Init+0x74>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021e4:	4b15      	ldr	r3, [pc, #84]	@ (800223c <MX_I2C1_Init+0x74>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021ea:	4b14      	ldr	r3, [pc, #80]	@ (800223c <MX_I2C1_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <MX_I2C1_Init+0x74>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <MX_I2C1_Init+0x74>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <MX_I2C1_Init+0x74>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002202:	480e      	ldr	r0, [pc, #56]	@ (800223c <MX_I2C1_Init+0x74>)
 8002204:	f003 fd09 	bl	8005c1a <HAL_I2C_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800220e:	f000 fca5 	bl	8002b5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002212:	2100      	movs	r1, #0
 8002214:	4809      	ldr	r0, [pc, #36]	@ (800223c <MX_I2C1_Init+0x74>)
 8002216:	f004 fa4f 	bl	80066b8 <HAL_I2CEx_ConfigAnalogFilter>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002220:	f000 fc9c 	bl	8002b5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002224:	2100      	movs	r1, #0
 8002226:	4805      	ldr	r0, [pc, #20]	@ (800223c <MX_I2C1_Init+0x74>)
 8002228:	f004 fa91 	bl	800674e <HAL_I2CEx_ConfigDigitalFilter>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002232:	f000 fc93 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20001378 	.word	0x20001378
 8002240:	40005400 	.word	0x40005400
 8002244:	10d19ce4 	.word	0x10d19ce4

08002248 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800224c:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <MX_I2C2_Init+0x74>)
 800224e:	4a1c      	ldr	r2, [pc, #112]	@ (80022c0 <MX_I2C2_Init+0x78>)
 8002250:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8002252:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <MX_I2C2_Init+0x74>)
 8002254:	4a1b      	ldr	r2, [pc, #108]	@ (80022c4 <MX_I2C2_Init+0x7c>)
 8002256:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002258:	4b18      	ldr	r3, [pc, #96]	@ (80022bc <MX_I2C2_Init+0x74>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800225e:	4b17      	ldr	r3, [pc, #92]	@ (80022bc <MX_I2C2_Init+0x74>)
 8002260:	2201      	movs	r2, #1
 8002262:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002264:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <MX_I2C2_Init+0x74>)
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800226a:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <MX_I2C2_Init+0x74>)
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002270:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <MX_I2C2_Init+0x74>)
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002276:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <MX_I2C2_Init+0x74>)
 8002278:	2200      	movs	r2, #0
 800227a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800227c:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <MX_I2C2_Init+0x74>)
 800227e:	2200      	movs	r2, #0
 8002280:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002282:	480e      	ldr	r0, [pc, #56]	@ (80022bc <MX_I2C2_Init+0x74>)
 8002284:	f003 fcc9 	bl	8005c1a <HAL_I2C_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800228e:	f000 fc65 	bl	8002b5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002292:	2100      	movs	r1, #0
 8002294:	4809      	ldr	r0, [pc, #36]	@ (80022bc <MX_I2C2_Init+0x74>)
 8002296:	f004 fa0f 	bl	80066b8 <HAL_I2CEx_ConfigAnalogFilter>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80022a0:	f000 fc5c 	bl	8002b5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80022a4:	2100      	movs	r1, #0
 80022a6:	4805      	ldr	r0, [pc, #20]	@ (80022bc <MX_I2C2_Init+0x74>)
 80022a8:	f004 fa51 	bl	800674e <HAL_I2CEx_ConfigDigitalFilter>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80022b2:	f000 fc53 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200013cc 	.word	0x200013cc
 80022c0:	40005800 	.word	0x40005800
 80022c4:	10d19ce4 	.word	0x10d19ce4

080022c8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	@ (800233c <MX_I2C3_Init+0x74>)
 80022ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002340 <MX_I2C3_Init+0x78>)
 80022d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 80022d2:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <MX_I2C3_Init+0x74>)
 80022d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <MX_I2C3_Init+0x7c>)
 80022d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80022d8:	4b18      	ldr	r3, [pc, #96]	@ (800233c <MX_I2C3_Init+0x74>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022de:	4b17      	ldr	r3, [pc, #92]	@ (800233c <MX_I2C3_Init+0x74>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022e4:	4b15      	ldr	r3, [pc, #84]	@ (800233c <MX_I2C3_Init+0x74>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80022ea:	4b14      	ldr	r3, [pc, #80]	@ (800233c <MX_I2C3_Init+0x74>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <MX_I2C3_Init+0x74>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022f6:	4b11      	ldr	r3, [pc, #68]	@ (800233c <MX_I2C3_Init+0x74>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <MX_I2C3_Init+0x74>)
 80022fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002304:	480d      	ldr	r0, [pc, #52]	@ (800233c <MX_I2C3_Init+0x74>)
 8002306:	f003 fc88 	bl	8005c1a <HAL_I2C_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002310:	f000 fc24 	bl	8002b5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002314:	2100      	movs	r1, #0
 8002316:	4809      	ldr	r0, [pc, #36]	@ (800233c <MX_I2C3_Init+0x74>)
 8002318:	f004 f9ce 	bl	80066b8 <HAL_I2CEx_ConfigAnalogFilter>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002322:	f000 fc1b 	bl	8002b5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002326:	2100      	movs	r1, #0
 8002328:	4804      	ldr	r0, [pc, #16]	@ (800233c <MX_I2C3_Init+0x74>)
 800232a:	f004 fa10 	bl	800674e <HAL_I2CEx_ConfigDigitalFilter>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002334:	f000 fc12 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20001420 	.word	0x20001420
 8002340:	40005c00 	.word	0x40005c00
 8002344:	10d19ce4 	.word	0x10d19ce4

08002348 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <MX_IWDG_Init+0x34>)
 800234e:	4a0c      	ldr	r2, [pc, #48]	@ (8002380 <MX_IWDG_Init+0x38>)
 8002350:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8002352:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <MX_IWDG_Init+0x34>)
 8002354:	2200      	movs	r2, #0
 8002356:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002358:	4b08      	ldr	r3, [pc, #32]	@ (800237c <MX_IWDG_Init+0x34>)
 800235a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800235e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8002360:	4b06      	ldr	r3, [pc, #24]	@ (800237c <MX_IWDG_Init+0x34>)
 8002362:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002366:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002368:	4804      	ldr	r0, [pc, #16]	@ (800237c <MX_IWDG_Init+0x34>)
 800236a:	f004 fa3c 	bl	80067e6 <HAL_IWDG_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002374:	f000 fbf2 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20001474 	.word	0x20001474
 8002380:	40003000 	.word	0x40003000

08002384 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002388:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <MX_RTC_Init+0x48>)
 800238a:	4a11      	ldr	r2, [pc, #68]	@ (80023d0 <MX_RTC_Init+0x4c>)
 800238c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800238e:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <MX_RTC_Init+0x48>)
 8002390:	2200      	movs	r2, #0
 8002392:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002394:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <MX_RTC_Init+0x48>)
 8002396:	227f      	movs	r2, #127	@ 0x7f
 8002398:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800239a:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <MX_RTC_Init+0x48>)
 800239c:	22ff      	movs	r2, #255	@ 0xff
 800239e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023a0:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <MX_RTC_Init+0x48>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80023a6:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <MX_RTC_Init+0x48>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023ac:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <MX_RTC_Init+0x48>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <MX_RTC_Init+0x48>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023b8:	4804      	ldr	r0, [pc, #16]	@ (80023cc <MX_RTC_Init+0x48>)
 80023ba:	f005 fc6d 	bl	8007c98 <HAL_RTC_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80023c4:	f000 fbca 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20001484 	.word	0x20001484
 80023d0:	40002800 	.word	0x40002800

080023d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002448 <MX_SPI1_Init+0x74>)
 80023da:	4a1c      	ldr	r2, [pc, #112]	@ (800244c <MX_SPI1_Init+0x78>)
 80023dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023de:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <MX_SPI1_Init+0x74>)
 80023e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023e6:	4b18      	ldr	r3, [pc, #96]	@ (8002448 <MX_SPI1_Init+0x74>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80023ec:	4b16      	ldr	r3, [pc, #88]	@ (8002448 <MX_SPI1_Init+0x74>)
 80023ee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80023f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f4:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <MX_SPI1_Init+0x74>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023fa:	4b13      	ldr	r3, [pc, #76]	@ (8002448 <MX_SPI1_Init+0x74>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <MX_SPI1_Init+0x74>)
 8002402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002406:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002408:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <MX_SPI1_Init+0x74>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <MX_SPI1_Init+0x74>)
 8002410:	2200      	movs	r2, #0
 8002412:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <MX_SPI1_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800241a:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <MX_SPI1_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <MX_SPI1_Init+0x74>)
 8002422:	2207      	movs	r2, #7
 8002424:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <MX_SPI1_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <MX_SPI1_Init+0x74>)
 800242e:	2208      	movs	r2, #8
 8002430:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	@ (8002448 <MX_SPI1_Init+0x74>)
 8002434:	f005 fd4e 	bl	8007ed4 <HAL_SPI_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800243e:	f000 fb8d 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200014a8 	.word	0x200014a8
 800244c:	40013000 	.word	0x40013000

08002450 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800246e:	4b23      	ldr	r3, [pc, #140]	@ (80024fc <MX_TIM1_Init+0xac>)
 8002470:	4a23      	ldr	r2, [pc, #140]	@ (8002500 <MX_TIM1_Init+0xb0>)
 8002472:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002474:	4b21      	ldr	r3, [pc, #132]	@ (80024fc <MX_TIM1_Init+0xac>)
 8002476:	2200      	movs	r2, #0
 8002478:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247a:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <MX_TIM1_Init+0xac>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002480:	4b1e      	ldr	r3, [pc, #120]	@ (80024fc <MX_TIM1_Init+0xac>)
 8002482:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002486:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002488:	4b1c      	ldr	r3, [pc, #112]	@ (80024fc <MX_TIM1_Init+0xac>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800248e:	4b1b      	ldr	r3, [pc, #108]	@ (80024fc <MX_TIM1_Init+0xac>)
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002494:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <MX_TIM1_Init+0xac>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800249a:	4818      	ldr	r0, [pc, #96]	@ (80024fc <MX_TIM1_Init+0xac>)
 800249c:	f005 fe68 	bl	8008170 <HAL_TIM_IC_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80024a6:	f000 fb59 	bl	8002b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	480f      	ldr	r0, [pc, #60]	@ (80024fc <MX_TIM1_Init+0xac>)
 80024be:	f006 f9ff 	bl	80088c0 <HAL_TIMEx_MasterConfigSynchronization>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80024c8:	f000 fb48 	bl	8002b5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024cc:	2300      	movs	r3, #0
 80024ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024d0:	2301      	movs	r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2200      	movs	r2, #0
 80024e0:	4619      	mov	r1, r3
 80024e2:	4806      	ldr	r0, [pc, #24]	@ (80024fc <MX_TIM1_Init+0xac>)
 80024e4:	f005 ffa2 	bl	800842c <HAL_TIM_IC_ConfigChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80024ee:	f000 fb35 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024f2:	bf00      	nop
 80024f4:	3720      	adds	r7, #32
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000150c 	.word	0x2000150c
 8002500:	40012c00 	.word	0x40012c00

08002504 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002522:	4b21      	ldr	r3, [pc, #132]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 8002524:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002528:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800252a:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 800252c:	2200      	movs	r2, #0
 800252e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002530:	4b1d      	ldr	r3, [pc, #116]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002536:	4b1c      	ldr	r3, [pc, #112]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 8002538:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800253c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253e:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002544:	4b18      	ldr	r3, [pc, #96]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 8002546:	2200      	movs	r2, #0
 8002548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800254a:	4817      	ldr	r0, [pc, #92]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 800254c:	f005 fe10 	bl	8008170 <HAL_TIM_IC_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002556:	f000 fb01 	bl	8002b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	480f      	ldr	r0, [pc, #60]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 800256a:	f006 f9a9 	bl	80088c0 <HAL_TIMEx_MasterConfigSynchronization>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002574:	f000 faf2 	bl	8002b5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002578:	2300      	movs	r3, #0
 800257a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800257c:	2301      	movs	r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	2200      	movs	r2, #0
 800258c:	4619      	mov	r1, r3
 800258e:	4806      	ldr	r0, [pc, #24]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 8002590:	f005 ff4c 	bl	800842c <HAL_TIM_IC_ConfigChannel>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800259a:	f000 fadf 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	3720      	adds	r7, #32
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20001558 	.word	0x20001558

080025ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025bc:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <MX_TIM6_Init+0x64>)
 80025be:	4a15      	ldr	r2, [pc, #84]	@ (8002614 <MX_TIM6_Init+0x68>)
 80025c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 80025c2:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <MX_TIM6_Init+0x64>)
 80025c4:	229f      	movs	r2, #159	@ 0x9f
 80025c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <MX_TIM6_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <MX_TIM6_Init+0x64>)
 80025d0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80025d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <MX_TIM6_Init+0x64>)
 80025d8:	2280      	movs	r2, #128	@ 0x80
 80025da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025dc:	480c      	ldr	r0, [pc, #48]	@ (8002610 <MX_TIM6_Init+0x64>)
 80025de:	f005 fd1c 	bl	800801a <HAL_TIM_Base_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80025e8:	f000 fab8 	bl	8002b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025ec:	2320      	movs	r3, #32
 80025ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	4619      	mov	r1, r3
 80025f8:	4805      	ldr	r0, [pc, #20]	@ (8002610 <MX_TIM6_Init+0x64>)
 80025fa:	f006 f961 	bl	80088c0 <HAL_TIMEx_MasterConfigSynchronization>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002604:	f000 faaa 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200015a4 	.word	0x200015a4
 8002614:	40001000 	.word	0x40001000

08002618 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002628:	4b14      	ldr	r3, [pc, #80]	@ (800267c <MX_TIM7_Init+0x64>)
 800262a:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <MX_TIM7_Init+0x68>)
 800262c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800262e:	4b13      	ldr	r3, [pc, #76]	@ (800267c <MX_TIM7_Init+0x64>)
 8002630:	2200      	movs	r2, #0
 8002632:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <MX_TIM7_Init+0x64>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800263a:	4b10      	ldr	r3, [pc, #64]	@ (800267c <MX_TIM7_Init+0x64>)
 800263c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002640:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <MX_TIM7_Init+0x64>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002648:	480c      	ldr	r0, [pc, #48]	@ (800267c <MX_TIM7_Init+0x64>)
 800264a:	f005 fce6 	bl	800801a <HAL_TIM_Base_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002654:	f000 fa82 	bl	8002b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	4619      	mov	r1, r3
 8002664:	4805      	ldr	r0, [pc, #20]	@ (800267c <MX_TIM7_Init+0x64>)
 8002666:	f006 f92b 	bl	80088c0 <HAL_TIMEx_MasterConfigSynchronization>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002670:	f000 fa74 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200015f0 	.word	0x200015f0
 8002680:	40001400 	.word	0x40001400

08002684 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800268a:	463b      	mov	r3, r7
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002696:	4b1e      	ldr	r3, [pc, #120]	@ (8002710 <MX_TIM16_Init+0x8c>)
 8002698:	4a1e      	ldr	r2, [pc, #120]	@ (8002714 <MX_TIM16_Init+0x90>)
 800269a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800269c:	4b1c      	ldr	r3, [pc, #112]	@ (8002710 <MX_TIM16_Init+0x8c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <MX_TIM16_Init+0x8c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80026a8:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <MX_TIM16_Init+0x8c>)
 80026aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b0:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <MX_TIM16_Init+0x8c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80026b6:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <MX_TIM16_Init+0x8c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026bc:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <MX_TIM16_Init+0x8c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80026c2:	4813      	ldr	r0, [pc, #76]	@ (8002710 <MX_TIM16_Init+0x8c>)
 80026c4:	f005 fca9 	bl	800801a <HAL_TIM_Base_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 80026ce:	f000 fa45 	bl	8002b5c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 80026d2:	480f      	ldr	r0, [pc, #60]	@ (8002710 <MX_TIM16_Init+0x8c>)
 80026d4:	f005 fd4c 	bl	8008170 <HAL_TIM_IC_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80026de:	f000 fa3d 	bl	8002b5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80026e6:	2301      	movs	r3, #1
 80026e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	2200      	movs	r2, #0
 80026f6:	4619      	mov	r1, r3
 80026f8:	4805      	ldr	r0, [pc, #20]	@ (8002710 <MX_TIM16_Init+0x8c>)
 80026fa:	f005 fe97 	bl	800842c <HAL_TIM_IC_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8002704:	f000 fa2a 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	2000163c 	.word	0x2000163c
 8002714:	40014400 	.word	0x40014400

08002718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800271c:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <MX_USART1_UART_Init+0x58>)
 800271e:	4a15      	ldr	r2, [pc, #84]	@ (8002774 <MX_USART1_UART_Init+0x5c>)
 8002720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002722:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <MX_USART1_UART_Init+0x58>)
 8002724:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800272a:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <MX_USART1_UART_Init+0x58>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002730:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <MX_USART1_UART_Init+0x58>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002736:	4b0e      	ldr	r3, [pc, #56]	@ (8002770 <MX_USART1_UART_Init+0x58>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800273c:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <MX_USART1_UART_Init+0x58>)
 800273e:	220c      	movs	r2, #12
 8002740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002742:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <MX_USART1_UART_Init+0x58>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002748:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <MX_USART1_UART_Init+0x58>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800274e:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <MX_USART1_UART_Init+0x58>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <MX_USART1_UART_Init+0x58>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800275a:	4805      	ldr	r0, [pc, #20]	@ (8002770 <MX_USART1_UART_Init+0x58>)
 800275c:	f006 f934 	bl	80089c8 <HAL_UART_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002766:	f000 f9f9 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20001688 	.word	0x20001688
 8002774:	40013800 	.word	0x40013800

08002778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800277c:	4b14      	ldr	r3, [pc, #80]	@ (80027d0 <MX_USART2_UART_Init+0x58>)
 800277e:	4a15      	ldr	r2, [pc, #84]	@ (80027d4 <MX_USART2_UART_Init+0x5c>)
 8002780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002782:	4b13      	ldr	r3, [pc, #76]	@ (80027d0 <MX_USART2_UART_Init+0x58>)
 8002784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800278a:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <MX_USART2_UART_Init+0x58>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002790:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <MX_USART2_UART_Init+0x58>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <MX_USART2_UART_Init+0x58>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800279c:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <MX_USART2_UART_Init+0x58>)
 800279e:	220c      	movs	r2, #12
 80027a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <MX_USART2_UART_Init+0x58>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <MX_USART2_UART_Init+0x58>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <MX_USART2_UART_Init+0x58>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <MX_USART2_UART_Init+0x58>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ba:	4805      	ldr	r0, [pc, #20]	@ (80027d0 <MX_USART2_UART_Init+0x58>)
 80027bc:	f006 f904 	bl	80089c8 <HAL_UART_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80027c6:	f000 f9c9 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20001710 	.word	0x20001710
 80027d4:	40004400 	.word	0x40004400

080027d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027de:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <MX_DMA_Init+0x48>)
 80027e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002820 <MX_DMA_Init+0x48>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80027ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <MX_DMA_Init+0x48>)
 80027ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	200b      	movs	r0, #11
 80027fc:	f002 fc9f 	bl	800513e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002800:	200b      	movs	r0, #11
 8002802:	f002 fcb8 	bl	8005176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	2010      	movs	r0, #16
 800280c:	f002 fc97 	bl	800513e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002810:	2010      	movs	r0, #16
 8002812:	f002 fcb0 	bl	8005176 <HAL_NVIC_EnableIRQ>

}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000

08002824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	@ 0x28
 8002828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800283a:	4b6b      	ldr	r3, [pc, #428]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283e:	4a6a      	ldr	r2, [pc, #424]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002846:	4b68      	ldr	r3, [pc, #416]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002852:	4b65      	ldr	r3, [pc, #404]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002856:	4a64      	ldr	r2, [pc, #400]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 8002858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800285c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800285e:	4b62      	ldr	r3, [pc, #392]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	4b5f      	ldr	r3, [pc, #380]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286e:	4a5e      	ldr	r2, [pc, #376]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002876:	4b5c      	ldr	r3, [pc, #368]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002882:	4b59      	ldr	r3, [pc, #356]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002886:	4a58      	ldr	r2, [pc, #352]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800288e:	4b56      	ldr	r3, [pc, #344]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800289a:	4b53      	ldr	r3, [pc, #332]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	4a52      	ldr	r2, [pc, #328]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 80028a0:	f043 0308 	orr.w	r3, r3, #8
 80028a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028a6:	4b50      	ldr	r3, [pc, #320]	@ (80029e8 <MX_GPIO_Init+0x1c4>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PDIS_PH_EN_GPIO_Port, PDIS_PH_EN_Pin, GPIO_PIN_RESET);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2120      	movs	r1, #32
 80028b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ba:	f003 f959 	bl	8005b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PDIS_DO_EN_Pin|PDIS_EC_EN_Pin, GPIO_PIN_RESET);
 80028be:	2200      	movs	r2, #0
 80028c0:	f241 0104 	movw	r1, #4100	@ 0x1004
 80028c4:	4849      	ldr	r0, [pc, #292]	@ (80029ec <MX_GPIO_Init+0x1c8>)
 80028c6:	f003 f953 	bl	8005b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80028ca:	2200      	movs	r2, #0
 80028cc:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80028d0:	4847      	ldr	r0, [pc, #284]	@ (80029f0 <MX_GPIO_Init+0x1cc>)
 80028d2:	f003 f94d 	bl	8005b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PDIS_PH_EN_Pin */
  GPIO_InitStruct.Pin = PDIS_PH_EN_Pin;
 80028d6:	2320      	movs	r3, #32
 80028d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028da:	2301      	movs	r3, #1
 80028dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028de:	2302      	movs	r3, #2
 80028e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PDIS_PH_EN_GPIO_Port, &GPIO_InitStruct);
 80028e6:	f107 0314 	add.w	r3, r7, #20
 80028ea:	4619      	mov	r1, r3
 80028ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028f0:	f002 ffc4 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : OC2_Pin */
  GPIO_InitStruct.Pin = OC2_Pin;
 80028f4:	2320      	movs	r3, #32
 80028f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80028fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028fe:	2302      	movs	r3, #2
 8002900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OC2_GPIO_Port, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	4839      	ldr	r0, [pc, #228]	@ (80029f0 <MX_GPIO_Init+0x1cc>)
 800290a:	f002 ffb7 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : SC1_Pin OC1_Pin WC_EN_Pin */
  GPIO_InitStruct.Pin = SC1_Pin|OC1_Pin|WC_EN_Pin;
 800290e:	f242 0303 	movw	r3, #8195	@ 0x2003
 8002912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002914:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800291a:	2302      	movs	r3, #2
 800291c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	4831      	ldr	r0, [pc, #196]	@ (80029ec <MX_GPIO_Init+0x1c8>)
 8002926:	f002 ffa9 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDIS_DO_EN_Pin */
  GPIO_InitStruct.Pin = PDIS_DO_EN_Pin;
 800292a:	2304      	movs	r3, #4
 800292c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292e:	2301      	movs	r3, #1
 8002930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PDIS_DO_EN_GPIO_Port, &GPIO_InitStruct);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	4619      	mov	r1, r3
 8002940:	482a      	ldr	r0, [pc, #168]	@ (80029ec <MX_GPIO_Init+0x1c8>)
 8002942:	f002 ff9b 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDIS_EC_EN_Pin */
  GPIO_InitStruct.Pin = PDIS_EC_EN_Pin;
 8002946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800294a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294c:	2301      	movs	r3, #1
 800294e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002950:	2302      	movs	r3, #2
 8002952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PDIS_EC_EN_GPIO_Port, &GPIO_InitStruct);
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	4619      	mov	r1, r3
 800295e:	4823      	ldr	r0, [pc, #140]	@ (80029ec <MX_GPIO_Init+0x1c8>)
 8002960:	f002 ff8c 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS232_INV_Pin */
  GPIO_InitStruct.Pin = RS232_INV_Pin;
 8002964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS232_INV_GPIO_Port, &GPIO_InitStruct);
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4619      	mov	r1, r3
 8002978:	481d      	ldr	r0, [pc, #116]	@ (80029f0 <MX_GPIO_Init+0x1cc>)
 800297a:	f002 ff7f 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800297e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002984:	2301      	movs	r3, #1
 8002986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	4816      	ldr	r0, [pc, #88]	@ (80029f0 <MX_GPIO_Init+0x1cc>)
 8002998:	f002 ff70 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : SC2_Pin */
  GPIO_InitStruct.Pin = SC2_Pin;
 800299c:	2304      	movs	r3, #4
 800299e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SC2_GPIO_Port, &GPIO_InitStruct);
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	4811      	ldr	r0, [pc, #68]	@ (80029f4 <MX_GPIO_Init+0x1d0>)
 80029b0:	f002 ff64 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : PPS_Pin */
  GPIO_InitStruct.Pin = PPS_Pin;
 80029b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	4619      	mov	r1, r3
 80029ca:	4808      	ldr	r0, [pc, #32]	@ (80029ec <MX_GPIO_Init+0x1c8>)
 80029cc:	f002 ff56 	bl	800587c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	2017      	movs	r0, #23
 80029d6:	f002 fbb2 	bl	800513e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029da:	2017      	movs	r0, #23
 80029dc:	f002 fbcb 	bl	8005176 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029e0:	bf00      	nop
 80029e2:	3728      	adds	r7, #40	@ 0x28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	48000400 	.word	0x48000400
 80029f0:	48000800 	.word	0x48000800
 80029f4:	48000c00 	.word	0x48000c00

080029f8 <_write>:
//    return (status == HAL_OK) ? len : -1;
//#endif
//}

int _write(int le, char *ptr, int len)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	e009      	b.n	8002a1e <_write+0x26>
  {
      ITM_SendChar(*ptr++);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	60ba      	str	r2, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff f972 	bl	8001cfc <ITM_SendChar>
  for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	dbf1      	blt.n	8002a0a <_write+0x12>
  }
  return len;
 8002a26:	687b      	ldr	r3, [r7, #4]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
  // NOTE: This gets called on HT and FT by default
  if (Size > 1)
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d93f      	bls.n	8002ac2 <HAL_UARTEx_RxEventCallback+0x92>
  {
    uartrxbuff[Size] = '\0';
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	4a24      	ldr	r2, [pc, #144]	@ (8002ad8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002a46:	2100      	movs	r1, #0
 8002a48:	54d1      	strb	r1, [r2, r3]

    printf("--> %s\n",uartrxbuff);
 8002a4a:	4923      	ldr	r1, [pc, #140]	@ (8002ad8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002a4c:	4823      	ldr	r0, [pc, #140]	@ (8002adc <HAL_UARTEx_RxEventCallback+0xac>)
 8002a4e:	f007 ffc9 	bl	800a9e4 <iprintf>

    if (uartrxbuff[0] == '$')
 8002a52:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b24      	cmp	r3, #36	@ 0x24
 8002a58:	d133      	bne.n	8002ac2 <HAL_UARTEx_RxEventCallback+0x92>
    {
      // All '$' messages are added to queue to be processed
      // Add message to the queue if there's enough room
      if (uQueue.msgCount < UART_QUEUE_SIZE)
 8002a5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ae0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8002a5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	2b1f      	cmp	r3, #31
 8002a64:	d82a      	bhi.n	8002abc <HAL_UARTEx_RxEventCallback+0x8c>
      {
        uQueue.msgCount++;
 8002a66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8002a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8002a74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a78:	801a      	strh	r2, [r3, #0]

        if (uQueue.wIndex > UART_QUEUE_SIZE - 1)
 8002a7a:	4b19      	ldr	r3, [pc, #100]	@ (8002ae0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8002a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a80:	789b      	ldrb	r3, [r3, #2]
 8002a82:	2b1f      	cmp	r3, #31
 8002a84:	d904      	bls.n	8002a90 <HAL_UARTEx_RxEventCallback+0x60>
        {
          uQueue.wIndex = 0;
 8002a86:	4b16      	ldr	r3, [pc, #88]	@ (8002ae0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8002a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	709a      	strb	r2, [r3, #2]
        }

        // Copy Message into message queue!
        strcpy(uQueue.msgQueue[uQueue.wIndex],uartrxbuff);
 8002a90:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8002a92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a96:	789b      	ldrb	r3, [r3, #2]
 8002a98:	01db      	lsls	r3, r3, #7
 8002a9a:	4a11      	ldr	r2, [pc, #68]	@ (8002ae0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8002a9c:	4413      	add	r3, r2
 8002a9e:	490e      	ldr	r1, [pc, #56]	@ (8002ad8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f008 f848 	bl	800ab36 <strcpy>

        //printf("Command RX. msgCount: %d, wIndex: %d, rIndex: %d \n", msgCount, wIndex, rIndex);
        //printf("UART CMD Added to Queue at Index %d : %s", wIndex, msgQueue[wIndex]);

        uQueue.wIndex++;
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8002aa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aac:	789b      	ldrb	r3, [r3, #2]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8002ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ab8:	709a      	strb	r2, [r3, #2]
 8002aba:	e002      	b.n	8002ac2 <HAL_UARTEx_RxEventCallback+0x92>

      }
      else
      {
        // Erorr UART queue full!
        printf("UART Queue full!\n");
 8002abc:	4809      	ldr	r0, [pc, #36]	@ (8002ae4 <HAL_UARTEx_RxEventCallback+0xb4>)
 8002abe:	f007 fff9 	bl	800aab4 <puts>

    }
  }

  // Set up next DMA Reception!
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t*)uartrxbuff, sizeof(uartrxbuff));
 8002ac2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ac6:	4904      	ldr	r1, [pc, #16]	@ (8002ad8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002ac8:	4807      	ldr	r0, [pc, #28]	@ (8002ae8 <HAL_UARTEx_RxEventCallback+0xb8>)
 8002aca:	f007 f9fd 	bl	8009ec8 <HAL_UARTEx_ReceiveToIdle_DMA>
  //__HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_HT);

}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200017e0 	.word	0x200017e0
 8002adc:	0800cdfc 	.word	0x0800cdfc
 8002ae0:	20000224 	.word	0x20000224
 8002ae4:	0800ce04 	.word	0x0800ce04
 8002ae8:	20001710 	.word	0x20001710

08002aec <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a10      	ldr	r2, [pc, #64]	@ (8002b3c <HAL_ADC_ConvCpltCallback+0x50>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d118      	bne.n	8002b30 <HAL_ADC_ConvCpltCallback+0x44>
    {
        adc_value1 = adc_buffer[0];
 8002afe:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <HAL_ADC_ConvCpltCallback+0x54>)
 8002b00:	881a      	ldrh	r2, [r3, #0]
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <HAL_ADC_ConvCpltCallback+0x58>)
 8002b04:	801a      	strh	r2, [r3, #0]
        adc_value2 = adc_buffer[1];
 8002b06:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <HAL_ADC_ConvCpltCallback+0x54>)
 8002b08:	885a      	ldrh	r2, [r3, #2]
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b48 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002b0c:	801a      	strh	r2, [r3, #0]
        adc_value3 = adc_buffer[2];
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <HAL_ADC_ConvCpltCallback+0x54>)
 8002b10:	889a      	ldrh	r2, [r3, #4]
 8002b12:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <HAL_ADC_ConvCpltCallback+0x60>)
 8002b14:	801a      	strh	r2, [r3, #0]
        adc_value4 = adc_buffer[3];
 8002b16:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <HAL_ADC_ConvCpltCallback+0x54>)
 8002b18:	88da      	ldrh	r2, [r3, #6]
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <HAL_ADC_ConvCpltCallback+0x64>)
 8002b1c:	801a      	strh	r2, [r3, #0]
        adc_value5 = adc_buffer[4];
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <HAL_ADC_ConvCpltCallback+0x54>)
 8002b20:	891a      	ldrh	r2, [r3, #8]
 8002b22:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <HAL_ADC_ConvCpltCallback+0x68>)
 8002b24:	801a      	strh	r2, [r3, #0]

        //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
        // HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,0);

        //printf("Sample ADC!\n");
        adc_counter++;
 8002b26:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002b2e:	6013      	str	r3, [r2, #0]
    }
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	50040000 	.word	0x50040000
 8002b40:	200018f4 	.word	0x200018f4
 8002b44:	200018e4 	.word	0x200018e4
 8002b48:	200018e6 	.word	0x200018e6
 8002b4c:	200018e8 	.word	0x200018e8
 8002b50:	200018ea 	.word	0x200018ea
 8002b54:	200018ec 	.word	0x200018ec
 8002b58:	200018f0 	.word	0x200018f0

08002b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b60:	b672      	cpsid	i
}
 8002b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <Error_Handler+0x8>

08002b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <HAL_MspInit+0x44>)
 8002b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b72:	4a0e      	ldr	r2, [pc, #56]	@ (8002bac <HAL_MspInit+0x44>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <HAL_MspInit+0x44>)
 8002b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_MspInit+0x44>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <HAL_MspInit+0x44>)
 8002b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b92:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <HAL_MspInit+0x44>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000

08002bb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b0a2      	sub	sp, #136	@ 0x88
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	2260      	movs	r2, #96	@ 0x60
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f007 ff77 	bl	800aac4 <memset>
  if(hadc->Instance==ADC1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a4b      	ldr	r2, [pc, #300]	@ (8002d08 <HAL_ADC_MspInit+0x158>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	f040 808f 	bne.w	8002d00 <HAL_ADC_MspInit+0x150>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002be2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002be6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002be8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002bec:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002bfa:	2307      	movs	r3, #7
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8002c02:	2304      	movs	r3, #4
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002c06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c0a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4618      	mov	r0, r3
 8002c12:	f004 fcf5 	bl	8007600 <HAL_RCCEx_PeriphCLKConfig>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002c1c:	f7ff ff9e 	bl	8002b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002c20:	4b3a      	ldr	r3, [pc, #232]	@ (8002d0c <HAL_ADC_MspInit+0x15c>)
 8002c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c24:	4a39      	ldr	r2, [pc, #228]	@ (8002d0c <HAL_ADC_MspInit+0x15c>)
 8002c26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c2c:	4b37      	ldr	r3, [pc, #220]	@ (8002d0c <HAL_ADC_MspInit+0x15c>)
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c38:	4b34      	ldr	r3, [pc, #208]	@ (8002d0c <HAL_ADC_MspInit+0x15c>)
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3c:	4a33      	ldr	r2, [pc, #204]	@ (8002d0c <HAL_ADC_MspInit+0x15c>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c44:	4b31      	ldr	r3, [pc, #196]	@ (8002d0c <HAL_ADC_MspInit+0x15c>)
 8002c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c50:	4b2e      	ldr	r3, [pc, #184]	@ (8002d0c <HAL_ADC_MspInit+0x15c>)
 8002c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c54:	4a2d      	ldr	r2, [pc, #180]	@ (8002d0c <HAL_ADC_MspInit+0x15c>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d0c <HAL_ADC_MspInit+0x15c>)
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|THERMISTOR_Pin|AN_NTC_DO_Pin;
 8002c68:	231e      	movs	r3, #30
 8002c6a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c6c:	230b      	movs	r3, #11
 8002c6e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c74:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4825      	ldr	r0, [pc, #148]	@ (8002d10 <HAL_ADC_MspInit+0x160>)
 8002c7c:	f002 fdfe 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AN_NTC_PH_Pin;
 8002c80:	2310      	movs	r3, #16
 8002c82:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c84:	230b      	movs	r3, #11
 8002c86:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(AN_NTC_PH_GPIO_Port, &GPIO_InitStruct);
 8002c8c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002c90:	4619      	mov	r1, r3
 8002c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c96:	f002 fdf1 	bl	800587c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d14 <HAL_ADC_MspInit+0x164>)
 8002c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002d18 <HAL_ADC_MspInit+0x168>)
 8002c9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d14 <HAL_ADC_MspInit+0x164>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <HAL_ADC_MspInit+0x164>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <HAL_ADC_MspInit+0x164>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cb2:	4b18      	ldr	r3, [pc, #96]	@ (8002d14 <HAL_ADC_MspInit+0x164>)
 8002cb4:	2280      	movs	r2, #128	@ 0x80
 8002cb6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cb8:	4b16      	ldr	r3, [pc, #88]	@ (8002d14 <HAL_ADC_MspInit+0x164>)
 8002cba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cbe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cc0:	4b14      	ldr	r3, [pc, #80]	@ (8002d14 <HAL_ADC_MspInit+0x164>)
 8002cc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cc6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <HAL_ADC_MspInit+0x164>)
 8002cca:	2220      	movs	r2, #32
 8002ccc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <HAL_ADC_MspInit+0x164>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002cd4:	480f      	ldr	r0, [pc, #60]	@ (8002d14 <HAL_ADC_MspInit+0x164>)
 8002cd6:	f002 fb5b 	bl	8005390 <HAL_DMA_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8002ce0:	f7ff ff3c 	bl	8002b5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8002d14 <HAL_ADC_MspInit+0x164>)
 8002ce8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002cea:	4a0a      	ldr	r2, [pc, #40]	@ (8002d14 <HAL_ADC_MspInit+0x164>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	2012      	movs	r0, #18
 8002cf6:	f002 fa22 	bl	800513e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002cfa:	2012      	movs	r0, #18
 8002cfc:	f002 fa3b 	bl	8005176 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d00:	bf00      	nop
 8002d02:	3788      	adds	r7, #136	@ 0x88
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	50040000 	.word	0x50040000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	48000800 	.word	0x48000800
 8002d14:	2000130c 	.word	0x2000130c
 8002d18:	40020008 	.word	0x40020008

08002d1c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0a      	ldr	r2, [pc, #40]	@ (8002d54 <HAL_CRC_MspInit+0x38>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10b      	bne.n	8002d46 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_CRC_MspInit+0x3c>)
 8002d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d32:	4a09      	ldr	r2, [pc, #36]	@ (8002d58 <HAL_CRC_MspInit+0x3c>)
 8002d34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d38:	6493      	str	r3, [r2, #72]	@ 0x48
 8002d3a:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <HAL_CRC_MspInit+0x3c>)
 8002d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40023000 	.word	0x40023000
 8002d58:	40021000 	.word	0x40021000

08002d5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b0a6      	sub	sp, #152	@ 0x98
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d78:	2260      	movs	r2, #96	@ 0x60
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f007 fea1 	bl	800aac4 <memset>
  if(hi2c->Instance==I2C1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a73      	ldr	r2, [pc, #460]	@ (8002f54 <HAL_I2C_MspInit+0x1f8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d13b      	bne.n	8002e04 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d8c:	2340      	movs	r3, #64	@ 0x40
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d90:	2300      	movs	r3, #0
 8002d92:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 fc31 	bl	8007600 <HAL_RCCEx_PeriphCLKConfig>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002da4:	f7ff feda 	bl	8002b5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da8:	4b6b      	ldr	r3, [pc, #428]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dac:	4a6a      	ldr	r2, [pc, #424]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002dae:	f043 0302 	orr.w	r3, r3, #2
 8002db2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002db4:	4b68      	ldr	r3, [pc, #416]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	623b      	str	r3, [r7, #32]
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dc0:	23c0      	movs	r3, #192	@ 0xc0
 8002dc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dc6:	2312      	movs	r3, #18
 8002dc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dd8:	2304      	movs	r3, #4
 8002dda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dde:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002de2:	4619      	mov	r1, r3
 8002de4:	485d      	ldr	r0, [pc, #372]	@ (8002f5c <HAL_I2C_MspInit+0x200>)
 8002de6:	f002 fd49 	bl	800587c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dea:	4b5b      	ldr	r3, [pc, #364]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	4a5a      	ldr	r2, [pc, #360]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002df0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df6:	4b58      	ldr	r3, [pc, #352]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e02:	e0a3      	b.n	8002f4c <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a55      	ldr	r2, [pc, #340]	@ (8002f60 <HAL_I2C_MspInit+0x204>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d13c      	bne.n	8002e88 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002e12:	2300      	movs	r3, #0
 8002e14:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f004 fbf0 	bl	8007600 <HAL_RCCEx_PeriphCLKConfig>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8002e26:	f7ff fe99 	bl	8002b5c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e36:	4b48      	ldr	r3, [pc, #288]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 8002e42:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8002e46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e4a:	2312      	movs	r3, #18
 8002e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e62:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002e66:	4619      	mov	r1, r3
 8002e68:	483c      	ldr	r0, [pc, #240]	@ (8002f5c <HAL_I2C_MspInit+0x200>)
 8002e6a:	f002 fd07 	bl	800587c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e72:	4a39      	ldr	r2, [pc, #228]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002e74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e7a:	4b37      	ldr	r3, [pc, #220]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697b      	ldr	r3, [r7, #20]
}
 8002e86:	e061      	b.n	8002f4c <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C3)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a35      	ldr	r2, [pc, #212]	@ (8002f64 <HAL_I2C_MspInit+0x208>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d15c      	bne.n	8002f4c <HAL_I2C_MspInit+0x1f0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002e92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 fbad 	bl	8007600 <HAL_RCCEx_PeriphCLKConfig>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8002eac:	f7ff fe56 	bl	8002b5c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb0:	4b29      	ldr	r3, [pc, #164]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb4:	4a28      	ldr	r2, [pc, #160]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ebc:	4b26      	ldr	r3, [pc, #152]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec8:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ecc:	4a22      	ldr	r2, [pc, #136]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002ece:	f043 0302 	orr.w	r3, r3, #2
 8002ed2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ed4:	4b20      	ldr	r3, [pc, #128]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ee6:	2312      	movs	r3, #18
 8002ee8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ef8:	2304      	movs	r3, #4
 8002efa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efe:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002f02:	4619      	mov	r1, r3
 8002f04:	4818      	ldr	r0, [pc, #96]	@ (8002f68 <HAL_I2C_MspInit+0x20c>)
 8002f06:	f002 fcb9 	bl	800587c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f10:	2312      	movs	r3, #18
 8002f12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f22:	2304      	movs	r3, #4
 8002f24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f28:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	480b      	ldr	r0, [pc, #44]	@ (8002f5c <HAL_I2C_MspInit+0x200>)
 8002f30:	f002 fca4 	bl	800587c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f34:	4b08      	ldr	r3, [pc, #32]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f38:	4a07      	ldr	r2, [pc, #28]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002f3a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f40:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <HAL_I2C_MspInit+0x1fc>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	3798      	adds	r7, #152	@ 0x98
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40005400 	.word	0x40005400
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	48000400 	.word	0x48000400
 8002f60:	40005800 	.word	0x40005800
 8002f64:	40005c00 	.word	0x40005c00
 8002f68:	48000800 	.word	0x48000800

08002f6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b09a      	sub	sp, #104	@ 0x68
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f74:	f107 0308 	add.w	r3, r7, #8
 8002f78:	2260      	movs	r2, #96	@ 0x60
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f007 fda1 	bl	800aac4 <memset>
  if(hrtc->Instance==RTC)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc4 <HAL_RTC_MspInit+0x58>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d117      	bne.n	8002fbc <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f90:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f96:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f004 fb2f 	bl	8007600 <HAL_RCCEx_PeriphCLKConfig>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002fa8:	f7ff fdd8 	bl	8002b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_RTC_MspInit+0x5c>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb2:	4a05      	ldr	r2, [pc, #20]	@ (8002fc8 <HAL_RTC_MspInit+0x5c>)
 8002fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002fbc:	bf00      	nop
 8002fbe:	3768      	adds	r7, #104	@ 0x68
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40002800 	.word	0x40002800
 8002fc8:	40021000 	.word	0x40021000

08002fcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	@ 0x28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a17      	ldr	r2, [pc, #92]	@ (8003048 <HAL_SPI_MspInit+0x7c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d128      	bne.n	8003040 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fee:	4b17      	ldr	r3, [pc, #92]	@ (800304c <HAL_SPI_MspInit+0x80>)
 8002ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff2:	4a16      	ldr	r2, [pc, #88]	@ (800304c <HAL_SPI_MspInit+0x80>)
 8002ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ff8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ffa:	4b14      	ldr	r3, [pc, #80]	@ (800304c <HAL_SPI_MspInit+0x80>)
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	4b11      	ldr	r3, [pc, #68]	@ (800304c <HAL_SPI_MspInit+0x80>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300a:	4a10      	ldr	r2, [pc, #64]	@ (800304c <HAL_SPI_MspInit+0x80>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003012:	4b0e      	ldr	r3, [pc, #56]	@ (800304c <HAL_SPI_MspInit+0x80>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800301e:	23c2      	movs	r3, #194	@ 0xc2
 8003020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302a:	2303      	movs	r3, #3
 800302c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800302e:	2305      	movs	r3, #5
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003032:	f107 0314 	add.w	r3, r7, #20
 8003036:	4619      	mov	r1, r3
 8003038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800303c:	f002 fc1e 	bl	800587c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003040:	bf00      	nop
 8003042:	3728      	adds	r7, #40	@ 0x28
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40013000 	.word	0x40013000
 800304c:	40021000 	.word	0x40021000

08003050 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08c      	sub	sp, #48	@ 0x30
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 031c 	add.w	r3, r7, #28
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2f      	ldr	r2, [pc, #188]	@ (800312c <HAL_TIM_IC_MspInit+0xdc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d12a      	bne.n	80030c8 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003072:	4b2f      	ldr	r3, [pc, #188]	@ (8003130 <HAL_TIM_IC_MspInit+0xe0>)
 8003074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003076:	4a2e      	ldr	r2, [pc, #184]	@ (8003130 <HAL_TIM_IC_MspInit+0xe0>)
 8003078:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800307c:	6613      	str	r3, [r2, #96]	@ 0x60
 800307e:	4b2c      	ldr	r3, [pc, #176]	@ (8003130 <HAL_TIM_IC_MspInit+0xe0>)
 8003080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003082:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308a:	4b29      	ldr	r3, [pc, #164]	@ (8003130 <HAL_TIM_IC_MspInit+0xe0>)
 800308c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308e:	4a28      	ldr	r2, [pc, #160]	@ (8003130 <HAL_TIM_IC_MspInit+0xe0>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003096:	4b26      	ldr	r3, [pc, #152]	@ (8003130 <HAL_TIM_IC_MspInit+0xe0>)
 8003098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PHASE_A_Pin;
 80030a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	2302      	movs	r3, #2
 80030aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030b4:	2301      	movs	r3, #1
 80030b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PHASE_A_GPIO_Port, &GPIO_InitStruct);
 80030b8:	f107 031c 	add.w	r3, r7, #28
 80030bc:	4619      	mov	r1, r3
 80030be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030c2:	f002 fbdb 	bl	800587c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030c6:	e02d      	b.n	8003124 <HAL_TIM_IC_MspInit+0xd4>
  else if(htim_ic->Instance==TIM2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d0:	d128      	bne.n	8003124 <HAL_TIM_IC_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030d2:	4b17      	ldr	r3, [pc, #92]	@ (8003130 <HAL_TIM_IC_MspInit+0xe0>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d6:	4a16      	ldr	r2, [pc, #88]	@ (8003130 <HAL_TIM_IC_MspInit+0xe0>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80030de:	4b14      	ldr	r3, [pc, #80]	@ (8003130 <HAL_TIM_IC_MspInit+0xe0>)
 80030e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <HAL_TIM_IC_MspInit+0xe0>)
 80030ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ee:	4a10      	ldr	r2, [pc, #64]	@ (8003130 <HAL_TIM_IC_MspInit+0xe0>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003130 <HAL_TIM_IC_MspInit+0xe0>)
 80030f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003102:	2301      	movs	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003106:	2302      	movs	r3, #2
 8003108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310e:	2300      	movs	r3, #0
 8003110:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003112:	2301      	movs	r3, #1
 8003114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003116:	f107 031c 	add.w	r3, r7, #28
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003120:	f002 fbac 	bl	800587c <HAL_GPIO_Init>
}
 8003124:	bf00      	nop
 8003126:	3730      	adds	r7, #48	@ 0x30
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40012c00 	.word	0x40012c00
 8003130:	40021000 	.word	0x40021000

08003134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	@ 0x30
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	f107 031c 	add.w	r3, r7, #28
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM6)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a31      	ldr	r2, [pc, #196]	@ (8003218 <HAL_TIM_Base_MspInit+0xe4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d114      	bne.n	8003180 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003156:	4b31      	ldr	r3, [pc, #196]	@ (800321c <HAL_TIM_Base_MspInit+0xe8>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315a:	4a30      	ldr	r2, [pc, #192]	@ (800321c <HAL_TIM_Base_MspInit+0xe8>)
 800315c:	f043 0310 	orr.w	r3, r3, #16
 8003160:	6593      	str	r3, [r2, #88]	@ 0x58
 8003162:	4b2e      	ldr	r3, [pc, #184]	@ (800321c <HAL_TIM_Base_MspInit+0xe8>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	69bb      	ldr	r3, [r7, #24]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	2100      	movs	r1, #0
 8003172:	2036      	movs	r0, #54	@ 0x36
 8003174:	f001 ffe3 	bl	800513e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003178:	2036      	movs	r0, #54	@ 0x36
 800317a:	f001 fffc 	bl	8005176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800317e:	e047      	b.n	8003210 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM7)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a26      	ldr	r2, [pc, #152]	@ (8003220 <HAL_TIM_Base_MspInit+0xec>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d114      	bne.n	80031b4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800318a:	4b24      	ldr	r3, [pc, #144]	@ (800321c <HAL_TIM_Base_MspInit+0xe8>)
 800318c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318e:	4a23      	ldr	r2, [pc, #140]	@ (800321c <HAL_TIM_Base_MspInit+0xe8>)
 8003190:	f043 0320 	orr.w	r3, r3, #32
 8003194:	6593      	str	r3, [r2, #88]	@ 0x58
 8003196:	4b21      	ldr	r3, [pc, #132]	@ (800321c <HAL_TIM_Base_MspInit+0xe8>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	2037      	movs	r0, #55	@ 0x37
 80031a8:	f001 ffc9 	bl	800513e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031ac:	2037      	movs	r0, #55	@ 0x37
 80031ae:	f001 ffe2 	bl	8005176 <HAL_NVIC_EnableIRQ>
}
 80031b2:	e02d      	b.n	8003210 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM16)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003224 <HAL_TIM_Base_MspInit+0xf0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d128      	bne.n	8003210 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80031be:	4b17      	ldr	r3, [pc, #92]	@ (800321c <HAL_TIM_Base_MspInit+0xe8>)
 80031c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c2:	4a16      	ldr	r2, [pc, #88]	@ (800321c <HAL_TIM_Base_MspInit+0xe8>)
 80031c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80031ca:	4b14      	ldr	r3, [pc, #80]	@ (800321c <HAL_TIM_Base_MspInit+0xe8>)
 80031cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d6:	4b11      	ldr	r3, [pc, #68]	@ (800321c <HAL_TIM_Base_MspInit+0xe8>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031da:	4a10      	ldr	r2, [pc, #64]	@ (800321c <HAL_TIM_Base_MspInit+0xe8>)
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031e2:	4b0e      	ldr	r3, [pc, #56]	@ (800321c <HAL_TIM_Base_MspInit+0xe8>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PHASE_B_Pin;
 80031ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f4:	2302      	movs	r3, #2
 80031f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8003200:	230e      	movs	r3, #14
 8003202:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PHASE_B_GPIO_Port, &GPIO_InitStruct);
 8003204:	f107 031c 	add.w	r3, r7, #28
 8003208:	4619      	mov	r1, r3
 800320a:	4807      	ldr	r0, [pc, #28]	@ (8003228 <HAL_TIM_Base_MspInit+0xf4>)
 800320c:	f002 fb36 	bl	800587c <HAL_GPIO_Init>
}
 8003210:	bf00      	nop
 8003212:	3730      	adds	r7, #48	@ 0x30
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40001000 	.word	0x40001000
 800321c:	40021000 	.word	0x40021000
 8003220:	40001400 	.word	0x40001400
 8003224:	40014400 	.word	0x40014400
 8003228:	48000400 	.word	0x48000400

0800322c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b0a4      	sub	sp, #144	@ 0x90
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003244:	f107 031c 	add.w	r3, r7, #28
 8003248:	2260      	movs	r2, #96	@ 0x60
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f007 fc39 	bl	800aac4 <memset>
  if(huart->Instance==USART1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5f      	ldr	r2, [pc, #380]	@ (80033d4 <HAL_UART_MspInit+0x1a8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d144      	bne.n	80032e6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800325c:	2301      	movs	r3, #1
 800325e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003260:	2300      	movs	r3, #0
 8003262:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003264:	f107 031c 	add.w	r3, r7, #28
 8003268:	4618      	mov	r0, r3
 800326a:	f004 f9c9 	bl	8007600 <HAL_RCCEx_PeriphCLKConfig>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003274:	f7ff fc72 	bl	8002b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003278:	4b57      	ldr	r3, [pc, #348]	@ (80033d8 <HAL_UART_MspInit+0x1ac>)
 800327a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327c:	4a56      	ldr	r2, [pc, #344]	@ (80033d8 <HAL_UART_MspInit+0x1ac>)
 800327e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003282:	6613      	str	r3, [r2, #96]	@ 0x60
 8003284:	4b54      	ldr	r3, [pc, #336]	@ (80033d8 <HAL_UART_MspInit+0x1ac>)
 8003286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003288:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003290:	4b51      	ldr	r3, [pc, #324]	@ (80033d8 <HAL_UART_MspInit+0x1ac>)
 8003292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003294:	4a50      	ldr	r2, [pc, #320]	@ (80033d8 <HAL_UART_MspInit+0x1ac>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800329c:	4b4e      	ldr	r3, [pc, #312]	@ (80033d8 <HAL_UART_MspInit+0x1ac>)
 800329e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032a8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80032ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ba:	2303      	movs	r3, #3
 80032bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032c0:	2307      	movs	r3, #7
 80032c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80032ca:	4619      	mov	r1, r3
 80032cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032d0:	f002 fad4 	bl	800587c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	2025      	movs	r0, #37	@ 0x25
 80032da:	f001 ff30 	bl	800513e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032de:	2025      	movs	r0, #37	@ 0x25
 80032e0:	f001 ff49 	bl	8005176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032e4:	e071      	b.n	80033ca <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a3c      	ldr	r2, [pc, #240]	@ (80033dc <HAL_UART_MspInit+0x1b0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d16c      	bne.n	80033ca <HAL_UART_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032f0:	2302      	movs	r3, #2
 80032f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032f4:	2300      	movs	r3, #0
 80032f6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	4618      	mov	r0, r3
 80032fe:	f004 f97f 	bl	8007600 <HAL_RCCEx_PeriphCLKConfig>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8003308:	f7ff fc28 	bl	8002b5c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800330c:	4b32      	ldr	r3, [pc, #200]	@ (80033d8 <HAL_UART_MspInit+0x1ac>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003310:	4a31      	ldr	r2, [pc, #196]	@ (80033d8 <HAL_UART_MspInit+0x1ac>)
 8003312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003316:	6593      	str	r3, [r2, #88]	@ 0x58
 8003318:	4b2f      	ldr	r3, [pc, #188]	@ (80033d8 <HAL_UART_MspInit+0x1ac>)
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003324:	4b2c      	ldr	r3, [pc, #176]	@ (80033d8 <HAL_UART_MspInit+0x1ac>)
 8003326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003328:	4a2b      	ldr	r2, [pc, #172]	@ (80033d8 <HAL_UART_MspInit+0x1ac>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003330:	4b29      	ldr	r3, [pc, #164]	@ (80033d8 <HAL_UART_MspInit+0x1ac>)
 8003332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800333c:	230c      	movs	r3, #12
 800333e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
 8003342:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003352:	2307      	movs	r3, #7
 8003354:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003358:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800335c:	4619      	mov	r1, r3
 800335e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003362:	f002 fa8b 	bl	800587c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003366:	4b1e      	ldr	r3, [pc, #120]	@ (80033e0 <HAL_UART_MspInit+0x1b4>)
 8003368:	4a1e      	ldr	r2, [pc, #120]	@ (80033e4 <HAL_UART_MspInit+0x1b8>)
 800336a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800336c:	4b1c      	ldr	r3, [pc, #112]	@ (80033e0 <HAL_UART_MspInit+0x1b4>)
 800336e:	2202      	movs	r2, #2
 8003370:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003372:	4b1b      	ldr	r3, [pc, #108]	@ (80033e0 <HAL_UART_MspInit+0x1b4>)
 8003374:	2200      	movs	r2, #0
 8003376:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003378:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <HAL_UART_MspInit+0x1b4>)
 800337a:	2200      	movs	r2, #0
 800337c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800337e:	4b18      	ldr	r3, [pc, #96]	@ (80033e0 <HAL_UART_MspInit+0x1b4>)
 8003380:	2280      	movs	r2, #128	@ 0x80
 8003382:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003384:	4b16      	ldr	r3, [pc, #88]	@ (80033e0 <HAL_UART_MspInit+0x1b4>)
 8003386:	2200      	movs	r2, #0
 8003388:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800338a:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <HAL_UART_MspInit+0x1b4>)
 800338c:	2200      	movs	r2, #0
 800338e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003390:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <HAL_UART_MspInit+0x1b4>)
 8003392:	2200      	movs	r2, #0
 8003394:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003396:	4b12      	ldr	r3, [pc, #72]	@ (80033e0 <HAL_UART_MspInit+0x1b4>)
 8003398:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800339c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800339e:	4810      	ldr	r0, [pc, #64]	@ (80033e0 <HAL_UART_MspInit+0x1b4>)
 80033a0:	f001 fff6 	bl	8005390 <HAL_DMA_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_UART_MspInit+0x182>
      Error_Handler();
 80033aa:	f7ff fbd7 	bl	8002b5c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a0b      	ldr	r2, [pc, #44]	@ (80033e0 <HAL_UART_MspInit+0x1b4>)
 80033b2:	675a      	str	r2, [r3, #116]	@ 0x74
 80033b4:	4a0a      	ldr	r2, [pc, #40]	@ (80033e0 <HAL_UART_MspInit+0x1b4>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	2026      	movs	r0, #38	@ 0x26
 80033c0:	f001 febd 	bl	800513e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033c4:	2026      	movs	r0, #38	@ 0x26
 80033c6:	f001 fed6 	bl	8005176 <HAL_NVIC_EnableIRQ>
}
 80033ca:	bf00      	nop
 80033cc:	3790      	adds	r7, #144	@ 0x90
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40013800 	.word	0x40013800
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40004400 	.word	0x40004400
 80033e0:	20001798 	.word	0x20001798
 80033e4:	4002006c 	.word	0x4002006c

080033e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <NMI_Handler+0x4>

080033f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033f4:	bf00      	nop
 80033f6:	e7fd      	b.n	80033f4 <HardFault_Handler+0x4>

080033f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <MemManage_Handler+0x4>

08003400 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <BusFault_Handler+0x4>

08003408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800340c:	bf00      	nop
 800340e:	e7fd      	b.n	800340c <UsageFault_Handler+0x4>

08003410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  // Depth Sensor Polling Flag
  if (uwTick % DEPTH_SENSOR_SAMPLE_FREQ_MS == 0)
 8003440:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <SysTick_Handler+0x2c>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b09      	ldr	r3, [pc, #36]	@ (800346c <SysTick_Handler+0x30>)
 8003446:	fba3 1302 	umull	r1, r3, r3, r2
 800344a:	099b      	lsrs	r3, r3, #6
 800344c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <SysTick_Handler+0x24>
  {
      depth_flag = 1;
 800345a:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <SysTick_Handler+0x34>)
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003460:	f000 f99c 	bl	800379c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20001a08 	.word	0x20001a08
 800346c:	10624dd3 	.word	0x10624dd3
 8003470:	20001a00 	.word	0x20001a00

08003474 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003478:	4802      	ldr	r0, [pc, #8]	@ (8003484 <DMA1_Channel1_IRQHandler+0x10>)
 800347a:	f002 f920 	bl	80056be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	2000130c 	.word	0x2000130c

08003488 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800348c:	4802      	ldr	r0, [pc, #8]	@ (8003498 <DMA1_Channel6_IRQHandler+0x10>)
 800348e:	f002 f916 	bl	80056be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20001798 	.word	0x20001798

0800349c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80034a0:	4802      	ldr	r0, [pc, #8]	@ (80034ac <ADC1_IRQHandler+0x10>)
 80034a2:	f000 fd85 	bl	8003fb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200012a8 	.word	0x200012a8

080034b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OC2_Pin);
 80034b4:	2020      	movs	r0, #32
 80034b6:	f002 fb8d 	bl	8005bd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PPS_Pin);
 80034ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80034be:	f002 fb89 	bl	8005bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034cc:	4802      	ldr	r0, [pc, #8]	@ (80034d8 <USART1_IRQHandler+0x10>)
 80034ce:	f005 fb53 	bl	8008b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20001688 	.word	0x20001688

080034dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034e0:	4802      	ldr	r0, [pc, #8]	@ (80034ec <USART2_IRQHandler+0x10>)
 80034e2:	f005 fb49 	bl	8008b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20001710 	.word	0x20001710

080034f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_11);
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,1);
 80034f4:	2201      	movs	r2, #1
 80034f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80034fa:	4804      	ldr	r0, [pc, #16]	@ (800350c <TIM6_DAC_IRQHandler+0x1c>)
 80034fc:	f002 fb38 	bl	8005b70 <HAL_GPIO_WritePin>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003500:	4803      	ldr	r0, [pc, #12]	@ (8003510 <TIM6_DAC_IRQHandler+0x20>)
 8003502:	f004 fe8c 	bl	800821e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	48000800 	.word	0x48000800
 8003510:	200015a4 	.word	0x200015a4

08003514 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003518:	4802      	ldr	r0, [pc, #8]	@ (8003524 <TIM7_IRQHandler+0x10>)
 800351a:	f004 fe80 	bl	800821e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200015f0 	.word	0x200015f0

08003528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return 1;
 800352c:	2301      	movs	r3, #1
}
 800352e:	4618      	mov	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <_kill>:

int _kill(int pid, int sig)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003542:	f007 facb 	bl	800aadc <__errno>
 8003546:	4603      	mov	r3, r0
 8003548:	2216      	movs	r2, #22
 800354a:	601a      	str	r2, [r3, #0]
  return -1;
 800354c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <_exit>:

void _exit (int status)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003560:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ffe7 	bl	8003538 <_kill>
  while (1) {}    /* Make sure we hang here */
 800356a:	bf00      	nop
 800356c:	e7fd      	b.n	800356a <_exit+0x12>

0800356e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	e00a      	b.n	8003596 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003580:	f3af 8000 	nop.w
 8003584:	4601      	mov	r1, r0
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	60ba      	str	r2, [r7, #8]
 800358c:	b2ca      	uxtb	r2, r1
 800358e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	3301      	adds	r3, #1
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	429a      	cmp	r2, r3
 800359c:	dbf0      	blt.n	8003580 <_read+0x12>
  }

  return len;
 800359e:	687b      	ldr	r3, [r7, #4]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035d0:	605a      	str	r2, [r3, #4]
  return 0;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <_isatty>:

int _isatty(int file)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035e8:	2301      	movs	r3, #1
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003618:	4a14      	ldr	r2, [pc, #80]	@ (800366c <_sbrk+0x5c>)
 800361a:	4b15      	ldr	r3, [pc, #84]	@ (8003670 <_sbrk+0x60>)
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003624:	4b13      	ldr	r3, [pc, #76]	@ (8003674 <_sbrk+0x64>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d102      	bne.n	8003632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800362c:	4b11      	ldr	r3, [pc, #68]	@ (8003674 <_sbrk+0x64>)
 800362e:	4a12      	ldr	r2, [pc, #72]	@ (8003678 <_sbrk+0x68>)
 8003630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003632:	4b10      	ldr	r3, [pc, #64]	@ (8003674 <_sbrk+0x64>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	429a      	cmp	r2, r3
 800363e:	d207      	bcs.n	8003650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003640:	f007 fa4c 	bl	800aadc <__errno>
 8003644:	4603      	mov	r3, r0
 8003646:	220c      	movs	r2, #12
 8003648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800364e:	e009      	b.n	8003664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003650:	4b08      	ldr	r3, [pc, #32]	@ (8003674 <_sbrk+0x64>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003656:	4b07      	ldr	r3, [pc, #28]	@ (8003674 <_sbrk+0x64>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4413      	add	r3, r2
 800365e:	4a05      	ldr	r2, [pc, #20]	@ (8003674 <_sbrk+0x64>)
 8003660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003662:	68fb      	ldr	r3, [r7, #12]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20010000 	.word	0x20010000
 8003670:	00000400 	.word	0x00000400
 8003674:	20001a04 	.word	0x20001a04
 8003678:	20001b58 	.word	0x20001b58

0800367c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003680:	4b06      	ldr	r3, [pc, #24]	@ (800369c <SystemInit+0x20>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003686:	4a05      	ldr	r2, [pc, #20]	@ (800369c <SystemInit+0x20>)
 8003688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800368c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80036a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036a4:	f7ff ffea 	bl	800367c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036a8:	480c      	ldr	r0, [pc, #48]	@ (80036dc <LoopForever+0x6>)
  ldr r1, =_edata
 80036aa:	490d      	ldr	r1, [pc, #52]	@ (80036e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036ac:	4a0d      	ldr	r2, [pc, #52]	@ (80036e4 <LoopForever+0xe>)
  movs r3, #0
 80036ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036b0:	e002      	b.n	80036b8 <LoopCopyDataInit>

080036b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036b6:	3304      	adds	r3, #4

080036b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036bc:	d3f9      	bcc.n	80036b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036be:	4a0a      	ldr	r2, [pc, #40]	@ (80036e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036c0:	4c0a      	ldr	r4, [pc, #40]	@ (80036ec <LoopForever+0x16>)
  movs r3, #0
 80036c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036c4:	e001      	b.n	80036ca <LoopFillZerobss>

080036c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036c8:	3204      	adds	r2, #4

080036ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036cc:	d3fb      	bcc.n	80036c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ce:	f007 fa0b 	bl	800aae8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036d2:	f7fe fb3b 	bl	8001d4c <main>

080036d6 <LoopForever>:

LoopForever:
    b LoopForever
 80036d6:	e7fe      	b.n	80036d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80036d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80036dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80036e4:	0800d1e0 	.word	0x0800d1e0
  ldr r2, =_sbss
 80036e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80036ec:	20001b58 	.word	0x20001b58

080036f0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036f0:	e7fe      	b.n	80036f0 <CAN1_RX0_IRQHandler>

080036f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036fc:	2003      	movs	r0, #3
 80036fe:	f001 fd13 	bl	8005128 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003702:	200f      	movs	r0, #15
 8003704:	f000 f80e 	bl	8003724 <HAL_InitTick>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	71fb      	strb	r3, [r7, #7]
 8003712:	e001      	b.n	8003718 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003714:	f7ff fa28 	bl	8002b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003718:	79fb      	ldrb	r3, [r7, #7]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003730:	4b17      	ldr	r3, [pc, #92]	@ (8003790 <HAL_InitTick+0x6c>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d023      	beq.n	8003780 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003738:	4b16      	ldr	r3, [pc, #88]	@ (8003794 <HAL_InitTick+0x70>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4b14      	ldr	r3, [pc, #80]	@ (8003790 <HAL_InitTick+0x6c>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	4619      	mov	r1, r3
 8003742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003746:	fbb3 f3f1 	udiv	r3, r3, r1
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	4618      	mov	r0, r3
 8003750:	f001 fd1f 	bl	8005192 <HAL_SYSTICK_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d809      	bhi.n	8003774 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003760:	2200      	movs	r2, #0
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003768:	f001 fce9 	bl	800513e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800376c:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <HAL_InitTick+0x74>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e007      	b.n	8003784 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
 8003778:	e004      	b.n	8003784 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
 800377e:	e001      	b.n	8003784 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000008 	.word	0x20000008
 8003794:	20000000 	.word	0x20000000
 8003798:	20000004 	.word	0x20000004

0800379c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037a0:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_IncTick+0x20>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <HAL_IncTick+0x24>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4413      	add	r3, r2
 80037ac:	4a04      	ldr	r2, [pc, #16]	@ (80037c0 <HAL_IncTick+0x24>)
 80037ae:	6013      	str	r3, [r2, #0]
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000008 	.word	0x20000008
 80037c0:	20001a08 	.word	0x20001a08

080037c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return uwTick;
 80037c8:	4b03      	ldr	r3, [pc, #12]	@ (80037d8 <HAL_GetTick+0x14>)
 80037ca:	681b      	ldr	r3, [r3, #0]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20001a08 	.word	0x20001a08

080037dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037e4:	f7ff ffee 	bl	80037c4 <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037f4:	d005      	beq.n	8003802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80037f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003820 <HAL_Delay+0x44>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003802:	bf00      	nop
 8003804:	f7ff ffde 	bl	80037c4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	429a      	cmp	r2, r3
 8003812:	d8f7      	bhi.n	8003804 <HAL_Delay+0x28>
  {
  }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000008 	.word	0x20000008

08003824 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	609a      	str	r2, [r3, #8]
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3360      	adds	r3, #96	@ 0x60
 800389e:	461a      	mov	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b08      	ldr	r3, [pc, #32]	@ (80038d0 <LL_ADC_SetOffset+0x44>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038c4:	bf00      	nop
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	03fff000 	.word	0x03fff000

080038d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3360      	adds	r3, #96	@ 0x60
 80038e2:	461a      	mov	r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3360      	adds	r3, #96	@ 0x60
 8003910:	461a      	mov	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	431a      	orrs	r2, r3
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3330      	adds	r3, #48	@ 0x30
 800396c:	461a      	mov	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	4413      	add	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	211f      	movs	r1, #31
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	401a      	ands	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	0e9b      	lsrs	r3, r3, #26
 8003994:	f003 011f 	and.w	r1, r3, #31
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	fa01 f303 	lsl.w	r3, r1, r3
 80039a2:	431a      	orrs	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039da:	b480      	push	{r7}
 80039dc:	b087      	sub	sp, #28
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3314      	adds	r3, #20
 80039ea:	461a      	mov	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	0e5b      	lsrs	r3, r3, #25
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	4413      	add	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	0d1b      	lsrs	r3, r3, #20
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	2107      	movs	r1, #7
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	401a      	ands	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	0d1b      	lsrs	r3, r3, #20
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0318 	and.w	r3, r3, #24
 8003a52:	4908      	ldr	r1, [pc, #32]	@ (8003a74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a54:	40d9      	lsrs	r1, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	400b      	ands	r3, r1
 8003a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	0007ffff 	.word	0x0007ffff

08003a78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003a88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6093      	str	r3, [r2, #8]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ab0:	d101      	bne.n	8003ab6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003ad4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ad8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b00:	d101      	bne.n	8003b06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b28:	f043 0201 	orr.w	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b50:	f043 0202 	orr.w	r2, r3, #2
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <LL_ADC_IsEnabled+0x18>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <LL_ADC_IsEnabled+0x1a>
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d101      	bne.n	8003ba2 <LL_ADC_IsDisableOngoing+0x18>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <LL_ADC_IsDisableOngoing+0x1a>
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bc4:	f043 0204 	orr.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d101      	bne.n	8003bf0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d101      	bne.n	8003c16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e126      	b.n	8003e8c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fe ffaf 	bl	8002bb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff ff19 	bl	8003a9c <LL_ADC_IsDeepPowerDownEnabled>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff feff 	bl	8003a78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ff34 	bl	8003aec <LL_ADC_IsInternalRegulatorEnabled>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d115      	bne.n	8003cb6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff ff18 	bl	8003ac4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c94:	4b7f      	ldr	r3, [pc, #508]	@ (8003e94 <HAL_ADC_Init+0x270>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	4a7f      	ldr	r2, [pc, #508]	@ (8003e98 <HAL_ADC_Init+0x274>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ca8:	e002      	b.n	8003cb0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f9      	bne.n	8003caa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff ff16 	bl	8003aec <LL_ADC_IsInternalRegulatorEnabled>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cca:	f043 0210 	orr.w	r2, r3, #16
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff ff76 	bl	8003bd8 <LL_ADC_REG_IsConversionOngoing>
 8003cec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 80bf 	bne.w	8003e7a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f040 80bb 	bne.w	8003e7a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d08:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d0c:	f043 0202 	orr.w	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff23 	bl	8003b64 <LL_ADC_IsEnabled>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10b      	bne.n	8003d3c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d24:	485d      	ldr	r0, [pc, #372]	@ (8003e9c <HAL_ADC_Init+0x278>)
 8003d26:	f7ff ff1d 	bl	8003b64 <LL_ADC_IsEnabled>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d105      	bne.n	8003d3c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	4619      	mov	r1, r3
 8003d36:	485a      	ldr	r0, [pc, #360]	@ (8003ea0 <HAL_ADC_Init+0x27c>)
 8003d38:	f7ff fd74 	bl	8003824 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	7e5b      	ldrb	r3, [r3, #25]
 8003d40:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d46:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003d4c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003d52:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d5a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d106      	bne.n	8003d78 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	045b      	lsls	r3, r3, #17
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	4b42      	ldr	r3, [pc, #264]	@ (8003ea4 <HAL_ADC_Init+0x280>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	430b      	orrs	r3, r1
 8003da6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff ff26 	bl	8003bfe <LL_ADC_INJ_IsConversionOngoing>
 8003db2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d13d      	bne.n	8003e36 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d13a      	bne.n	8003e36 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003dc4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003dcc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ddc:	f023 0302 	bic.w	r3, r3, #2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	69b9      	ldr	r1, [r7, #24]
 8003de6:	430b      	orrs	r3, r1
 8003de8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d118      	bne.n	8003e26 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003dfe:	f023 0304 	bic.w	r3, r3, #4
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e0a:	4311      	orrs	r1, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003e10:	4311      	orrs	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e16:	430a      	orrs	r2, r1
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	611a      	str	r2, [r3, #16]
 8003e24:	e007      	b.n	8003e36 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0201 	bic.w	r2, r2, #1
 8003e34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10c      	bne.n	8003e58 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e44:	f023 010f 	bic.w	r1, r3, #15
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	1e5a      	subs	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e56:	e007      	b.n	8003e68 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 020f 	bic.w	r2, r2, #15
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6c:	f023 0303 	bic.w	r3, r3, #3
 8003e70:	f043 0201 	orr.w	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e78:	e007      	b.n	8003e8a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7e:	f043 0210 	orr.w	r2, r3, #16
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000000 	.word	0x20000000
 8003e98:	053e2d63 	.word	0x053e2d63
 8003e9c:	50040000 	.word	0x50040000
 8003ea0:	50040300 	.word	0x50040300
 8003ea4:	fff0c007 	.word	0xfff0c007

08003ea8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fe8d 	bl	8003bd8 <LL_ADC_REG_IsConversionOngoing>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d167      	bne.n	8003f94 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_ADC_Start_DMA+0x2a>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e063      	b.n	8003f9a <HAL_ADC_Start_DMA+0xf2>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fe1c 	bl	8004b18 <ADC_Enable>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d14f      	bne.n	8003f8a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d006      	beq.n	8003f18 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0e:	f023 0206 	bic.w	r2, r3, #6
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f16:	e002      	b.n	8003f1e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f22:	4a20      	ldr	r2, [pc, #128]	@ (8003fa4 <HAL_ADC_Start_DMA+0xfc>)
 8003f24:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa8 <HAL_ADC_Start_DMA+0x100>)
 8003f2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f32:	4a1e      	ldr	r2, [pc, #120]	@ (8003fac <HAL_ADC_Start_DMA+0x104>)
 8003f34:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	221c      	movs	r2, #28
 8003f3c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0210 	orr.w	r2, r2, #16
 8003f54:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3340      	adds	r3, #64	@ 0x40
 8003f70:	4619      	mov	r1, r3
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f001 fac3 	bl	8005500 <HAL_DMA_Start_IT>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fe14 	bl	8003bb0 <LL_ADC_REG_StartConversion>
 8003f88:	e006      	b.n	8003f98 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003f92:	e001      	b.n	8003f98 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
 8003f96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	08004ce3 	.word	0x08004ce3
 8003fa8:	08004dbb 	.word	0x08004dbb
 8003fac:	08004dd7 	.word	0x08004dd7

08003fb0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d017      	beq.n	8004006 <HAL_ADC_IRQHandler+0x56>
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d012      	beq.n	8004006 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 ffbb 	bl	8004f74 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2202      	movs	r2, #2
 8004004:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <HAL_ADC_IRQHandler+0x6a>
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004020:	2b00      	cmp	r3, #0
 8004022:	d05e      	beq.n	80040e2 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d059      	beq.n	80040e2 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b00      	cmp	r3, #0
 8004038:	d105      	bne.n	8004046 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fc73 	bl	8003936 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d03e      	beq.n	80040d4 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d135      	bne.n	80040d4 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b08      	cmp	r3, #8
 8004074:	d12e      	bne.n	80040d4 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fdac 	bl	8003bd8 <LL_ADC_REG_IsConversionOngoing>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d11a      	bne.n	80040bc <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 020c 	bic.w	r2, r2, #12
 8004094:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d112      	bne.n	80040d4 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80040ba:	e00b      	b.n	80040d4 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c0:	f043 0210 	orr.w	r2, r3, #16
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	f043 0201 	orr.w	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7fe fd09 	bl	8002aec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	220c      	movs	r2, #12
 80040e0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <HAL_ADC_IRQHandler+0x146>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d072      	beq.n	80041e6 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d06d      	beq.n	80041e6 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	d105      	bne.n	8004122 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fc44 	bl	80039b4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800412c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fbff 	bl	8003936 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004138:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d047      	beq.n	80041d8 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <HAL_ADC_IRQHandler+0x1b2>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d03f      	beq.n	80041d8 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800415e:	2b00      	cmp	r3, #0
 8004160:	d13a      	bne.n	80041d8 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416c:	2b40      	cmp	r3, #64	@ 0x40
 800416e:	d133      	bne.n	80041d8 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d12e      	bne.n	80041d8 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fd3d 	bl	8003bfe <LL_ADC_INJ_IsConversionOngoing>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11a      	bne.n	80041c0 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004198:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d112      	bne.n	80041d8 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	f043 0201 	orr.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80041be:	e00b      	b.n	80041d8 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c4:	f043 0210 	orr.w	r2, r3, #16
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d0:	f043 0201 	orr.w	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fea3 	bl	8004f24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2260      	movs	r2, #96	@ 0x60
 80041e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d011      	beq.n	8004214 <HAL_ADC_IRQHandler+0x264>
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00c      	beq.n	8004214 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f890 	bl	800432c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2280      	movs	r2, #128	@ 0x80
 8004212:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d012      	beq.n	8004244 <HAL_ADC_IRQHandler+0x294>
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fe89 	bl	8004f4c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004242:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800424a:	2b00      	cmp	r3, #0
 800424c:	d012      	beq.n	8004274 <HAL_ADC_IRQHandler+0x2c4>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00d      	beq.n	8004274 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fe7b 	bl	8004f60 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004272:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b00      	cmp	r3, #0
 800427c:	d02a      	beq.n	80042d4 <HAL_ADC_IRQHandler+0x324>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d025      	beq.n	80042d4 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8004290:	2301      	movs	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	e008      	b.n	80042a8 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80042a4:	2301      	movs	r3, #1
 80042a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10e      	bne.n	80042cc <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042be:	f043 0202 	orr.w	r2, r3, #2
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f83a 	bl	8004340 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2210      	movs	r2, #16
 80042d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d018      	beq.n	8004310 <HAL_ADC_IRQHandler+0x360>
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d013      	beq.n	8004310 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ec:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f8:	f043 0208 	orr.w	r2, r3, #8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004308:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fe14 	bl	8004f38 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004310:	bf00      	nop
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b0b6      	sub	sp, #216	@ 0xd8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_ADC_ConfigChannel+0x22>
 8004372:	2302      	movs	r3, #2
 8004374:	e3bb      	b.n	8004aee <HAL_ADC_ConfigChannel+0x79a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fc28 	bl	8003bd8 <LL_ADC_REG_IsConversionOngoing>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 83a0 	bne.w	8004ad0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d824      	bhi.n	80043ea <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	3b02      	subs	r3, #2
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d81b      	bhi.n	80043e2 <HAL_ADC_ConfigChannel+0x8e>
 80043aa:	a201      	add	r2, pc, #4	@ (adr r2, 80043b0 <HAL_ADC_ConfigChannel+0x5c>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043c1 	.word	0x080043c1
 80043b4:	080043c9 	.word	0x080043c9
 80043b8:	080043d1 	.word	0x080043d1
 80043bc:	080043d9 	.word	0x080043d9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80043c0:	230c      	movs	r3, #12
 80043c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80043c6:	e010      	b.n	80043ea <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80043c8:	2312      	movs	r3, #18
 80043ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80043ce:	e00c      	b.n	80043ea <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80043d0:	2318      	movs	r3, #24
 80043d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80043d6:	e008      	b.n	80043ea <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80043d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80043e0:	e003      	b.n	80043ea <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80043e2:	2306      	movs	r3, #6
 80043e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80043e8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80043f8:	f7ff fab0 	bl	800395c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fbe9 	bl	8003bd8 <LL_ADC_REG_IsConversionOngoing>
 8004406:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fbf5 	bl	8003bfe <LL_ADC_INJ_IsConversionOngoing>
 8004414:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004418:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 81a4 	bne.w	800476a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004422:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004426:	2b00      	cmp	r3, #0
 8004428:	f040 819f 	bne.w	800476a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	461a      	mov	r2, r3
 800443a:	f7ff face 	bl	80039da <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	08db      	lsrs	r3, r3, #3
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b04      	cmp	r3, #4
 800445e:	d00a      	beq.n	8004476 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6919      	ldr	r1, [r3, #16]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004470:	f7ff fa0c 	bl	800388c <LL_ADC_SetOffset>
 8004474:	e179      	b.n	800476a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2100      	movs	r1, #0
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fa29 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 8004482:	4603      	mov	r3, r0
 8004484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x14e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fa1e 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 8004498:	4603      	mov	r3, r0
 800449a:	0e9b      	lsrs	r3, r3, #26
 800449c:	f003 021f 	and.w	r2, r3, #31
 80044a0:	e01e      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x18c>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fa13 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80044b8:	fa93 f3a3 	rbit	r3, r3
 80044bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80044c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80044c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80044d0:	2320      	movs	r3, #32
 80044d2:	e004      	b.n	80044de <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80044d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80044d8:	fab3 f383 	clz	r3, r3
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x1a4>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	0e9b      	lsrs	r3, r3, #26
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	e018      	b.n	800452a <HAL_ADC_ConfigChannel+0x1d6>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004504:	fa93 f3a3 	rbit	r3, r3
 8004508:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800450c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800451c:	2320      	movs	r3, #32
 800451e:	e004      	b.n	800452a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004520:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004524:	fab3 f383 	clz	r3, r3
 8004528:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800452a:	429a      	cmp	r2, r3
 800452c:	d106      	bne.n	800453c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2200      	movs	r2, #0
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff f9e2 	bl	8003900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2101      	movs	r1, #1
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff f9c6 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 8004548:	4603      	mov	r3, r0
 800454a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10a      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x214>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2101      	movs	r1, #1
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff f9bb 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 800455e:	4603      	mov	r3, r0
 8004560:	0e9b      	lsrs	r3, r3, #26
 8004562:	f003 021f 	and.w	r2, r3, #31
 8004566:	e01e      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x252>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2101      	movs	r1, #1
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff f9b0 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 8004574:	4603      	mov	r3, r0
 8004576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800457e:	fa93 f3a3 	rbit	r3, r3
 8004582:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004586:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800458a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800458e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004596:	2320      	movs	r3, #32
 8004598:	e004      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800459a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800459e:	fab3 f383 	clz	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d105      	bne.n	80045be <HAL_ADC_ConfigChannel+0x26a>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	0e9b      	lsrs	r3, r3, #26
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	e018      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x29c>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80045d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80045da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80045e2:	2320      	movs	r3, #32
 80045e4:	e004      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80045e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d106      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2200      	movs	r2, #0
 80045fa:	2101      	movs	r1, #1
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff f97f 	bl	8003900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2102      	movs	r1, #2
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff f963 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 800460e:	4603      	mov	r3, r0
 8004610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <HAL_ADC_ConfigChannel+0x2da>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2102      	movs	r1, #2
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff f958 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 8004624:	4603      	mov	r3, r0
 8004626:	0e9b      	lsrs	r3, r3, #26
 8004628:	f003 021f 	and.w	r2, r3, #31
 800462c:	e01e      	b.n	800466c <HAL_ADC_ConfigChannel+0x318>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2102      	movs	r1, #2
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff f94d 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 800463a:	4603      	mov	r3, r0
 800463c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004640:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004644:	fa93 f3a3 	rbit	r3, r3
 8004648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800464c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004650:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004654:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800465c:	2320      	movs	r3, #32
 800465e:	e004      	b.n	800466a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004664:	fab3 f383 	clz	r3, r3
 8004668:	b2db      	uxtb	r3, r3
 800466a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004674:	2b00      	cmp	r3, #0
 8004676:	d105      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x330>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	0e9b      	lsrs	r3, r3, #26
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	e014      	b.n	80046ae <HAL_ADC_ConfigChannel+0x35a>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004692:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004694:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004698:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80046a0:	2320      	movs	r3, #32
 80046a2:	e004      	b.n	80046ae <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80046a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046a8:	fab3 f383 	clz	r3, r3
 80046ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d106      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2200      	movs	r2, #0
 80046b8:	2102      	movs	r1, #2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff f920 	bl	8003900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2103      	movs	r1, #3
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff f904 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x398>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2103      	movs	r1, #3
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff f8f9 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 80046e2:	4603      	mov	r3, r0
 80046e4:	0e9b      	lsrs	r3, r3, #26
 80046e6:	f003 021f 	and.w	r2, r3, #31
 80046ea:	e017      	b.n	800471c <HAL_ADC_ConfigChannel+0x3c8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2103      	movs	r1, #3
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff f8ee 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 80046f8:	4603      	mov	r3, r0
 80046fa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046fe:	fa93 f3a3 	rbit	r3, r3
 8004702:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004706:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004708:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800470e:	2320      	movs	r3, #32
 8004710:	e003      	b.n	800471a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004712:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004714:	fab3 f383 	clz	r3, r3
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004724:	2b00      	cmp	r3, #0
 8004726:	d105      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x3e0>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	0e9b      	lsrs	r3, r3, #26
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	e011      	b.n	8004758 <HAL_ADC_ConfigChannel+0x404>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800473c:	fa93 f3a3 	rbit	r3, r3
 8004740:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004742:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004744:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004746:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800474c:	2320      	movs	r3, #32
 800474e:	e003      	b.n	8004758 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004752:	fab3 f383 	clz	r3, r3
 8004756:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004758:	429a      	cmp	r2, r3
 800475a:	d106      	bne.n	800476a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2200      	movs	r2, #0
 8004762:	2103      	movs	r1, #3
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff f8cb 	bl	8003900 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff f9f8 	bl	8003b64 <LL_ADC_IsEnabled>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 8140 	bne.w	80049fc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	6819      	ldr	r1, [r3, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	461a      	mov	r2, r3
 800478a:	f7ff f951 	bl	8003a30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	4a8f      	ldr	r2, [pc, #572]	@ (80049d0 <HAL_ADC_ConfigChannel+0x67c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	f040 8131 	bne.w	80049fc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x46e>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	0e9b      	lsrs	r3, r3, #26
 80047b0:	3301      	adds	r3, #1
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2b09      	cmp	r3, #9
 80047b8:	bf94      	ite	ls
 80047ba:	2301      	movls	r3, #1
 80047bc:	2300      	movhi	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	e019      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x4a2>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047ca:	fa93 f3a3 	rbit	r3, r3
 80047ce:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80047d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80047d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80047da:	2320      	movs	r3, #32
 80047dc:	e003      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80047de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047e0:	fab3 f383 	clz	r3, r3
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	3301      	adds	r3, #1
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	2b09      	cmp	r3, #9
 80047ee:	bf94      	ite	ls
 80047f0:	2301      	movls	r3, #1
 80047f2:	2300      	movhi	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d079      	beq.n	80048ee <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004802:	2b00      	cmp	r3, #0
 8004804:	d107      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x4c2>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	0e9b      	lsrs	r3, r3, #26
 800480c:	3301      	adds	r3, #1
 800480e:	069b      	lsls	r3, r3, #26
 8004810:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004814:	e015      	b.n	8004842 <HAL_ADC_ConfigChannel+0x4ee>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800481e:	fa93 f3a3 	rbit	r3, r3
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004826:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800482e:	2320      	movs	r3, #32
 8004830:	e003      	b.n	800483a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004834:	fab3 f383 	clz	r3, r3
 8004838:	b2db      	uxtb	r3, r3
 800483a:	3301      	adds	r3, #1
 800483c:	069b      	lsls	r3, r3, #26
 800483e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x50e>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	0e9b      	lsrs	r3, r3, #26
 8004854:	3301      	adds	r3, #1
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	2101      	movs	r1, #1
 800485c:	fa01 f303 	lsl.w	r3, r1, r3
 8004860:	e017      	b.n	8004892 <HAL_ADC_ConfigChannel+0x53e>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004872:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800487a:	2320      	movs	r3, #32
 800487c:	e003      	b.n	8004886 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800487e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004880:	fab3 f383 	clz	r3, r3
 8004884:	b2db      	uxtb	r3, r3
 8004886:	3301      	adds	r3, #1
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	2101      	movs	r1, #1
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	ea42 0103 	orr.w	r1, r2, r3
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x564>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	0e9b      	lsrs	r3, r3, #26
 80048a8:	3301      	adds	r3, #1
 80048aa:	f003 021f 	and.w	r2, r3, #31
 80048ae:	4613      	mov	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	051b      	lsls	r3, r3, #20
 80048b6:	e018      	b.n	80048ea <HAL_ADC_ConfigChannel+0x596>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c0:	fa93 f3a3 	rbit	r3, r3
 80048c4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80048ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80048d0:	2320      	movs	r3, #32
 80048d2:	e003      	b.n	80048dc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80048d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d6:	fab3 f383 	clz	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	3301      	adds	r3, #1
 80048de:	f003 021f 	and.w	r2, r3, #31
 80048e2:	4613      	mov	r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4413      	add	r3, r2
 80048e8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048ea:	430b      	orrs	r3, r1
 80048ec:	e081      	b.n	80049f2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d107      	bne.n	800490a <HAL_ADC_ConfigChannel+0x5b6>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	0e9b      	lsrs	r3, r3, #26
 8004900:	3301      	adds	r3, #1
 8004902:	069b      	lsls	r3, r3, #26
 8004904:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004908:	e015      	b.n	8004936 <HAL_ADC_ConfigChannel+0x5e2>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004912:	fa93 f3a3 	rbit	r3, r3
 8004916:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800491c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004922:	2320      	movs	r3, #32
 8004924:	e003      	b.n	800492e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004928:	fab3 f383 	clz	r3, r3
 800492c:	b2db      	uxtb	r3, r3
 800492e:	3301      	adds	r3, #1
 8004930:	069b      	lsls	r3, r3, #26
 8004932:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_ADC_ConfigChannel+0x602>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	0e9b      	lsrs	r3, r3, #26
 8004948:	3301      	adds	r3, #1
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	2101      	movs	r1, #1
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	e017      	b.n	8004986 <HAL_ADC_ConfigChannel+0x632>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	fa93 f3a3 	rbit	r3, r3
 8004962:	61bb      	str	r3, [r7, #24]
  return result;
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800496e:	2320      	movs	r3, #32
 8004970:	e003      	b.n	800497a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	fab3 f383 	clz	r3, r3
 8004978:	b2db      	uxtb	r3, r3
 800497a:	3301      	adds	r3, #1
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2101      	movs	r1, #1
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	ea42 0103 	orr.w	r1, r2, r3
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10d      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x65e>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	0e9b      	lsrs	r3, r3, #26
 800499c:	3301      	adds	r3, #1
 800499e:	f003 021f 	and.w	r2, r3, #31
 80049a2:	4613      	mov	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4413      	add	r3, r2
 80049a8:	3b1e      	subs	r3, #30
 80049aa:	051b      	lsls	r3, r3, #20
 80049ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049b0:	e01e      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x69c>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	60fb      	str	r3, [r7, #12]
  return result;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d104      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80049ca:	2320      	movs	r3, #32
 80049cc:	e006      	b.n	80049dc <HAL_ADC_ConfigChannel+0x688>
 80049ce:	bf00      	nop
 80049d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	fab3 f383 	clz	r3, r3
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	3301      	adds	r3, #1
 80049de:	f003 021f 	and.w	r2, r3, #31
 80049e2:	4613      	mov	r3, r2
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	4413      	add	r3, r2
 80049e8:	3b1e      	subs	r3, #30
 80049ea:	051b      	lsls	r3, r3, #20
 80049ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049f0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049f6:	4619      	mov	r1, r3
 80049f8:	f7fe ffef 	bl	80039da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b3d      	ldr	r3, [pc, #244]	@ (8004af8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d06c      	beq.n	8004ae2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a08:	483c      	ldr	r0, [pc, #240]	@ (8004afc <HAL_ADC_ConfigChannel+0x7a8>)
 8004a0a:	f7fe ff31 	bl	8003870 <LL_ADC_GetCommonPathInternalCh>
 8004a0e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a3a      	ldr	r2, [pc, #232]	@ (8004b00 <HAL_ADC_ConfigChannel+0x7ac>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d127      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d121      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a35      	ldr	r2, [pc, #212]	@ (8004b04 <HAL_ADC_ConfigChannel+0x7b0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d157      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	482f      	ldr	r0, [pc, #188]	@ (8004afc <HAL_ADC_ConfigChannel+0x7a8>)
 8004a3e:	f7fe ff04 	bl	800384a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a42:	4b31      	ldr	r3, [pc, #196]	@ (8004b08 <HAL_ADC_ConfigChannel+0x7b4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	4a30      	ldr	r2, [pc, #192]	@ (8004b0c <HAL_ADC_ConfigChannel+0x7b8>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	099b      	lsrs	r3, r3, #6
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	4613      	mov	r3, r2
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004a5c:	e002      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f9      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a6a:	e03a      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a27      	ldr	r2, [pc, #156]	@ (8004b10 <HAL_ADC_ConfigChannel+0x7bc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d113      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10d      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1f      	ldr	r2, [pc, #124]	@ (8004b04 <HAL_ADC_ConfigChannel+0x7b0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d12a      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a94:	4619      	mov	r1, r3
 8004a96:	4819      	ldr	r0, [pc, #100]	@ (8004afc <HAL_ADC_ConfigChannel+0x7a8>)
 8004a98:	f7fe fed7 	bl	800384a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a9c:	e021      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b14 <HAL_ADC_ConfigChannel+0x7c0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d11c      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004aa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004aac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d116      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a12      	ldr	r2, [pc, #72]	@ (8004b04 <HAL_ADC_ConfigChannel+0x7b0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d111      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ac2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	480c      	ldr	r0, [pc, #48]	@ (8004afc <HAL_ADC_ConfigChannel+0x7a8>)
 8004aca:	f7fe febe 	bl	800384a <LL_ADC_SetCommonPathInternalCh>
 8004ace:	e008      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004aea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	37d8      	adds	r7, #216	@ 0xd8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	80080000 	.word	0x80080000
 8004afc:	50040300 	.word	0x50040300
 8004b00:	c7520000 	.word	0xc7520000
 8004b04:	50040000 	.word	0x50040000
 8004b08:	20000000 	.word	0x20000000
 8004b0c:	053e2d63 	.word	0x053e2d63
 8004b10:	cb840000 	.word	0xcb840000
 8004b14:	80000001 	.word	0x80000001

08004b18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff f81b 	bl	8003b64 <LL_ADC_IsEnabled>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d169      	bne.n	8004c08 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	4b36      	ldr	r3, [pc, #216]	@ (8004c14 <ADC_Enable+0xfc>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b46:	f043 0210 	orr.w	r2, r3, #16
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b52:	f043 0201 	orr.w	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e055      	b.n	8004c0a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe ffd6 	bl	8003b14 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004b68:	482b      	ldr	r0, [pc, #172]	@ (8004c18 <ADC_Enable+0x100>)
 8004b6a:	f7fe fe81 	bl	8003870 <LL_ADC_GetCommonPathInternalCh>
 8004b6e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004b70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d013      	beq.n	8004ba0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b78:	4b28      	ldr	r3, [pc, #160]	@ (8004c1c <ADC_Enable+0x104>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	099b      	lsrs	r3, r3, #6
 8004b7e:	4a28      	ldr	r2, [pc, #160]	@ (8004c20 <ADC_Enable+0x108>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	4613      	mov	r3, r2
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b92:	e002      	b.n	8004b9a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f9      	bne.n	8004b94 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ba0:	f7fe fe10 	bl	80037c4 <HAL_GetTick>
 8004ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ba6:	e028      	b.n	8004bfa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe ffd9 	bl	8003b64 <LL_ADC_IsEnabled>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fe ffa9 	bl	8003b14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004bc2:	f7fe fdff 	bl	80037c4 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d914      	bls.n	8004bfa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d00d      	beq.n	8004bfa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be2:	f043 0210 	orr.w	r2, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bee:	f043 0201 	orr.w	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e007      	b.n	8004c0a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d1cf      	bne.n	8004ba8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	8000003f 	.word	0x8000003f
 8004c18:	50040300 	.word	0x50040300
 8004c1c:	20000000 	.word	0x20000000
 8004c20:	053e2d63 	.word	0x053e2d63

08004c24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fe ffaa 	bl	8003b8a <LL_ADC_IsDisableOngoing>
 8004c36:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe ff91 	bl	8003b64 <LL_ADC_IsEnabled>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d047      	beq.n	8004cd8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d144      	bne.n	8004cd8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 030d 	and.w	r3, r3, #13
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d10c      	bne.n	8004c76 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fe ff6b 	bl	8003b3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c6e:	f7fe fda9 	bl	80037c4 <HAL_GetTick>
 8004c72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c74:	e029      	b.n	8004cca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7a:	f043 0210 	orr.w	r2, r3, #16
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c86:	f043 0201 	orr.w	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e023      	b.n	8004cda <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c92:	f7fe fd97 	bl	80037c4 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d914      	bls.n	8004cca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00d      	beq.n	8004cca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb2:	f043 0210 	orr.w	r2, r3, #16
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbe:	f043 0201 	orr.w	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e007      	b.n	8004cda <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1dc      	bne.n	8004c92 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d14b      	bne.n	8004d94 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d021      	beq.n	8004d5a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe fe0b 	bl	8003936 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d032      	beq.n	8004d8c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d12b      	bne.n	8004d8c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11f      	bne.n	8004d8c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d50:	f043 0201 	orr.w	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d58:	e018      	b.n	8004d8c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d111      	bne.n	8004d8c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d105      	bne.n	8004d8c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d84:	f043 0201 	orr.w	r2, r3, #1
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f7fd fead 	bl	8002aec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d92:	e00e      	b.n	8004db2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7ff facd 	bl	8004340 <HAL_ADC_ErrorCallback>
}
 8004da6:	e004      	b.n	8004db2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
}
 8004db2:	bf00      	nop
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7ff faa5 	bl	8004318 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df4:	f043 0204 	orr.w	r2, r3, #4
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff fa9f 	bl	8004340 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <LL_ADC_StartCalibration>:
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004e1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	609a      	str	r2, [r3, #8]
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <LL_ADC_IsCalibrationOnGoing>:
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e50:	d101      	bne.n	8004e56 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_ADCEx_Calibration_Start+0x1c>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e04d      	b.n	8004f1c <HAL_ADCEx_Calibration_Start+0xb8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff fecb 	bl	8004c24 <ADC_Disable>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d136      	bne.n	8004f06 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004ea0:	f023 0302 	bic.w	r3, r3, #2
 8004ea4:	f043 0202 	orr.w	r2, r3, #2
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff ffa9 	bl	8004e0a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004eb8:	e014      	b.n	8004ee4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8004ec6:	d30d      	bcc.n	8004ee4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ecc:	f023 0312 	bic.w	r3, r3, #18
 8004ed0:	f043 0210 	orr.w	r2, r3, #16
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e01b      	b.n	8004f1c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff ffa7 	bl	8004e3c <LL_ADC_IsCalibrationOnGoing>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e2      	bne.n	8004eba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef8:	f023 0303 	bic.w	r3, r3, #3
 8004efc:	f043 0201 	orr.w	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f04:	e005      	b.n	8004f12 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0a:	f043 0210 	orr.w	r2, r3, #16
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <__NVIC_SetPriorityGrouping>:
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f98:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <__NVIC_SetPriorityGrouping+0x44>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fba:	4a04      	ldr	r2, [pc, #16]	@ (8004fcc <__NVIC_SetPriorityGrouping+0x44>)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	60d3      	str	r3, [r2, #12]
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	e000ed00 	.word	0xe000ed00

08004fd0 <__NVIC_GetPriorityGrouping>:
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fd4:	4b04      	ldr	r3, [pc, #16]	@ (8004fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	0a1b      	lsrs	r3, r3, #8
 8004fda:	f003 0307 	and.w	r3, r3, #7
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	e000ed00 	.word	0xe000ed00

08004fec <__NVIC_EnableIRQ>:
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	db0b      	blt.n	8005016 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	f003 021f 	and.w	r2, r3, #31
 8005004:	4907      	ldr	r1, [pc, #28]	@ (8005024 <__NVIC_EnableIRQ+0x38>)
 8005006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	2001      	movs	r0, #1
 800500e:	fa00 f202 	lsl.w	r2, r0, r2
 8005012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	e000e100 	.word	0xe000e100

08005028 <__NVIC_SetPriority>:
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	6039      	str	r1, [r7, #0]
 8005032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005038:	2b00      	cmp	r3, #0
 800503a:	db0a      	blt.n	8005052 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	b2da      	uxtb	r2, r3
 8005040:	490c      	ldr	r1, [pc, #48]	@ (8005074 <__NVIC_SetPriority+0x4c>)
 8005042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005046:	0112      	lsls	r2, r2, #4
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	440b      	add	r3, r1
 800504c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005050:	e00a      	b.n	8005068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	b2da      	uxtb	r2, r3
 8005056:	4908      	ldr	r1, [pc, #32]	@ (8005078 <__NVIC_SetPriority+0x50>)
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	3b04      	subs	r3, #4
 8005060:	0112      	lsls	r2, r2, #4
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	440b      	add	r3, r1
 8005066:	761a      	strb	r2, [r3, #24]
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	e000e100 	.word	0xe000e100
 8005078:	e000ed00 	.word	0xe000ed00

0800507c <NVIC_EncodePriority>:
{
 800507c:	b480      	push	{r7}
 800507e:	b089      	sub	sp, #36	@ 0x24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f1c3 0307 	rsb	r3, r3, #7
 8005096:	2b04      	cmp	r3, #4
 8005098:	bf28      	it	cs
 800509a:	2304      	movcs	r3, #4
 800509c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	3304      	adds	r3, #4
 80050a2:	2b06      	cmp	r3, #6
 80050a4:	d902      	bls.n	80050ac <NVIC_EncodePriority+0x30>
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	3b03      	subs	r3, #3
 80050aa:	e000      	b.n	80050ae <NVIC_EncodePriority+0x32>
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43da      	mvns	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	401a      	ands	r2, r3
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	fa01 f303 	lsl.w	r3, r1, r3
 80050ce:	43d9      	mvns	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d4:	4313      	orrs	r3, r2
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3724      	adds	r7, #36	@ 0x24
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <SysTick_Config>:
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050f4:	d301      	bcc.n	80050fa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80050f6:	2301      	movs	r3, #1
 80050f8:	e00f      	b.n	800511a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005124 <SysTick_Config+0x40>)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3b01      	subs	r3, #1
 8005100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005102:	210f      	movs	r1, #15
 8005104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005108:	f7ff ff8e 	bl	8005028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800510c:	4b05      	ldr	r3, [pc, #20]	@ (8005124 <SysTick_Config+0x40>)
 800510e:	2200      	movs	r2, #0
 8005110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005112:	4b04      	ldr	r3, [pc, #16]	@ (8005124 <SysTick_Config+0x40>)
 8005114:	2207      	movs	r2, #7
 8005116:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	e000e010 	.word	0xe000e010

08005128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff ff29 	bl	8004f88 <__NVIC_SetPriorityGrouping>
}
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b086      	sub	sp, #24
 8005142:	af00      	add	r7, sp, #0
 8005144:	4603      	mov	r3, r0
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005150:	f7ff ff3e 	bl	8004fd0 <__NVIC_GetPriorityGrouping>
 8005154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	6978      	ldr	r0, [r7, #20]
 800515c:	f7ff ff8e 	bl	800507c <NVIC_EncodePriority>
 8005160:	4602      	mov	r2, r0
 8005162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005166:	4611      	mov	r1, r2
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff ff5d 	bl	8005028 <__NVIC_SetPriority>
}
 800516e:	bf00      	nop
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	4603      	mov	r3, r0
 800517e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff ff31 	bl	8004fec <__NVIC_EnableIRQ>
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff ffa2 	bl	80050e4 <SysTick_Config>
 80051a0:	4603      	mov	r3, r0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e054      	b.n	8005268 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	7f5b      	ldrb	r3, [r3, #29]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fd fda4 	bl	8002d1c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	791b      	ldrb	r3, [r3, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10c      	bne.n	80051fc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a22      	ldr	r2, [pc, #136]	@ (8005270 <HAL_CRC_Init+0xc4>)
 80051e8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0218 	bic.w	r2, r2, #24
 80051f8:	609a      	str	r2, [r3, #8]
 80051fa:	e00c      	b.n	8005216 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6899      	ldr	r1, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	461a      	mov	r2, r3
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f834 	bl	8005274 <HAL_CRCEx_Polynomial_Set>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e028      	b.n	8005268 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	795b      	ldrb	r3, [r3, #5]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d105      	bne.n	800522a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005226:	611a      	str	r2, [r3, #16]
 8005228:	e004      	b.n	8005234 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6912      	ldr	r2, [r2, #16]
 8005232:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699a      	ldr	r2, [r3, #24]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	04c11db7 	.word	0x04c11db7

08005274 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005284:	231f      	movs	r3, #31
 8005286:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d102      	bne.n	8005298 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
 8005296:	e063      	b.n	8005360 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005298:	bf00      	nop
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1e5a      	subs	r2, r3, #1
 800529e:	613a      	str	r2, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d009      	beq.n	80052b8 <HAL_CRCEx_Polynomial_Set+0x44>
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b18      	cmp	r3, #24
 80052bc:	d846      	bhi.n	800534c <HAL_CRCEx_Polynomial_Set+0xd8>
 80052be:	a201      	add	r2, pc, #4	@ (adr r2, 80052c4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80052c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c4:	08005353 	.word	0x08005353
 80052c8:	0800534d 	.word	0x0800534d
 80052cc:	0800534d 	.word	0x0800534d
 80052d0:	0800534d 	.word	0x0800534d
 80052d4:	0800534d 	.word	0x0800534d
 80052d8:	0800534d 	.word	0x0800534d
 80052dc:	0800534d 	.word	0x0800534d
 80052e0:	0800534d 	.word	0x0800534d
 80052e4:	08005341 	.word	0x08005341
 80052e8:	0800534d 	.word	0x0800534d
 80052ec:	0800534d 	.word	0x0800534d
 80052f0:	0800534d 	.word	0x0800534d
 80052f4:	0800534d 	.word	0x0800534d
 80052f8:	0800534d 	.word	0x0800534d
 80052fc:	0800534d 	.word	0x0800534d
 8005300:	0800534d 	.word	0x0800534d
 8005304:	08005335 	.word	0x08005335
 8005308:	0800534d 	.word	0x0800534d
 800530c:	0800534d 	.word	0x0800534d
 8005310:	0800534d 	.word	0x0800534d
 8005314:	0800534d 	.word	0x0800534d
 8005318:	0800534d 	.word	0x0800534d
 800531c:	0800534d 	.word	0x0800534d
 8005320:	0800534d 	.word	0x0800534d
 8005324:	08005329 	.word	0x08005329
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	2b06      	cmp	r3, #6
 800532c:	d913      	bls.n	8005356 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005332:	e010      	b.n	8005356 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b07      	cmp	r3, #7
 8005338:	d90f      	bls.n	800535a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800533e:	e00c      	b.n	800535a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b0f      	cmp	r3, #15
 8005344:	d90b      	bls.n	800535e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800534a:	e008      	b.n	800535e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
        break;
 8005350:	e006      	b.n	8005360 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005352:	bf00      	nop
 8005354:	e004      	b.n	8005360 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800535e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10d      	bne.n	8005382 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f023 0118 	bic.w	r1, r3, #24
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	430a      	orrs	r2, r1
 8005380:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005382:	7dfb      	ldrb	r3, [r7, #23]
}
 8005384:	4618      	mov	r0, r3
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e098      	b.n	80054d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	4b4d      	ldr	r3, [pc, #308]	@ (80054e0 <HAL_DMA_Init+0x150>)
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d80f      	bhi.n	80053ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	4b4b      	ldr	r3, [pc, #300]	@ (80054e4 <HAL_DMA_Init+0x154>)
 80053b6:	4413      	add	r3, r2
 80053b8:	4a4b      	ldr	r2, [pc, #300]	@ (80054e8 <HAL_DMA_Init+0x158>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	091b      	lsrs	r3, r3, #4
 80053c0:	009a      	lsls	r2, r3, #2
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a48      	ldr	r2, [pc, #288]	@ (80054ec <HAL_DMA_Init+0x15c>)
 80053ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80053cc:	e00e      	b.n	80053ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	4b46      	ldr	r3, [pc, #280]	@ (80054f0 <HAL_DMA_Init+0x160>)
 80053d6:	4413      	add	r3, r2
 80053d8:	4a43      	ldr	r2, [pc, #268]	@ (80054e8 <HAL_DMA_Init+0x158>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	091b      	lsrs	r3, r3, #4
 80053e0:	009a      	lsls	r2, r3, #2
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a42      	ldr	r2, [pc, #264]	@ (80054f4 <HAL_DMA_Init+0x164>)
 80053ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005406:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800541c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005446:	d039      	beq.n	80054bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544c:	4a27      	ldr	r2, [pc, #156]	@ (80054ec <HAL_DMA_Init+0x15c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d11a      	bne.n	8005488 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005452:	4b29      	ldr	r3, [pc, #164]	@ (80054f8 <HAL_DMA_Init+0x168>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545a:	f003 031c 	and.w	r3, r3, #28
 800545e:	210f      	movs	r1, #15
 8005460:	fa01 f303 	lsl.w	r3, r1, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	4924      	ldr	r1, [pc, #144]	@ (80054f8 <HAL_DMA_Init+0x168>)
 8005468:	4013      	ands	r3, r2
 800546a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800546c:	4b22      	ldr	r3, [pc, #136]	@ (80054f8 <HAL_DMA_Init+0x168>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6859      	ldr	r1, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005478:	f003 031c 	and.w	r3, r3, #28
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	491d      	ldr	r1, [pc, #116]	@ (80054f8 <HAL_DMA_Init+0x168>)
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]
 8005486:	e019      	b.n	80054bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005488:	4b1c      	ldr	r3, [pc, #112]	@ (80054fc <HAL_DMA_Init+0x16c>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005490:	f003 031c 	and.w	r3, r3, #28
 8005494:	210f      	movs	r1, #15
 8005496:	fa01 f303 	lsl.w	r3, r1, r3
 800549a:	43db      	mvns	r3, r3
 800549c:	4917      	ldr	r1, [pc, #92]	@ (80054fc <HAL_DMA_Init+0x16c>)
 800549e:	4013      	ands	r3, r2
 80054a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80054a2:	4b16      	ldr	r3, [pc, #88]	@ (80054fc <HAL_DMA_Init+0x16c>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6859      	ldr	r1, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ae:	f003 031c 	and.w	r3, r3, #28
 80054b2:	fa01 f303 	lsl.w	r3, r1, r3
 80054b6:	4911      	ldr	r1, [pc, #68]	@ (80054fc <HAL_DMA_Init+0x16c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40020407 	.word	0x40020407
 80054e4:	bffdfff8 	.word	0xbffdfff8
 80054e8:	cccccccd 	.word	0xcccccccd
 80054ec:	40020000 	.word	0x40020000
 80054f0:	bffdfbf8 	.word	0xbffdfbf8
 80054f4:	40020400 	.word	0x40020400
 80054f8:	400200a8 	.word	0x400200a8
 80054fc:	400204a8 	.word	0x400204a8

08005500 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_DMA_Start_IT+0x20>
 800551c:	2302      	movs	r3, #2
 800551e:	e04b      	b.n	80055b8 <HAL_DMA_Start_IT+0xb8>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d13a      	bne.n	80055aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0201 	bic.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f95f 	bl	800581c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005562:	2b00      	cmp	r3, #0
 8005564:	d008      	beq.n	8005578 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 020e 	orr.w	r2, r2, #14
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e00f      	b.n	8005598 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0204 	bic.w	r2, r2, #4
 8005586:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 020a 	orr.w	r2, r2, #10
 8005596:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	e005      	b.n	80055b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
 80055b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80055b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d008      	beq.n	80055ea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2204      	movs	r2, #4
 80055dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e022      	b.n	8005630 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 020e 	bic.w	r2, r2, #14
 80055f8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560e:	f003 021c 	and.w	r2, r3, #28
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	2101      	movs	r1, #1
 8005618:	fa01 f202 	lsl.w	r2, r1, r2
 800561c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d005      	beq.n	8005660 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2204      	movs	r2, #4
 8005658:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
 800565e:	e029      	b.n	80056b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 020e 	bic.w	r2, r2, #14
 800566e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0201 	bic.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005684:	f003 021c 	and.w	r2, r3, #28
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568c:	2101      	movs	r1, #1
 800568e:	fa01 f202 	lsl.w	r2, r1, r2
 8005692:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	4798      	blx	r3
    }
  }
  return status;
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056da:	f003 031c 	and.w	r3, r3, #28
 80056de:	2204      	movs	r2, #4
 80056e0:	409a      	lsls	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d026      	beq.n	8005738 <HAL_DMA_IRQHandler+0x7a>
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d021      	beq.n	8005738 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d107      	bne.n	8005712 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0204 	bic.w	r2, r2, #4
 8005710:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	f003 021c 	and.w	r2, r3, #28
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	2104      	movs	r1, #4
 8005720:	fa01 f202 	lsl.w	r2, r1, r2
 8005724:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	2b00      	cmp	r3, #0
 800572c:	d071      	beq.n	8005812 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005736:	e06c      	b.n	8005812 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573c:	f003 031c 	and.w	r3, r3, #28
 8005740:	2202      	movs	r2, #2
 8005742:	409a      	lsls	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4013      	ands	r3, r2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02e      	beq.n	80057aa <HAL_DMA_IRQHandler+0xec>
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d029      	beq.n	80057aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10b      	bne.n	800577c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 020a 	bic.w	r2, r2, #10
 8005772:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005780:	f003 021c 	and.w	r2, r3, #28
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005788:	2102      	movs	r1, #2
 800578a:	fa01 f202 	lsl.w	r2, r1, r2
 800578e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d038      	beq.n	8005812 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80057a8:	e033      	b.n	8005812 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ae:	f003 031c 	and.w	r3, r3, #28
 80057b2:	2208      	movs	r2, #8
 80057b4:	409a      	lsls	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4013      	ands	r3, r2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d02a      	beq.n	8005814 <HAL_DMA_IRQHandler+0x156>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d025      	beq.n	8005814 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 020e 	bic.w	r2, r2, #14
 80057d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057dc:	f003 021c 	and.w	r2, r3, #28
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e4:	2101      	movs	r1, #1
 80057e6:	fa01 f202 	lsl.w	r2, r1, r2
 80057ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005806:	2b00      	cmp	r3, #0
 8005808:	d004      	beq.n	8005814 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005812:	bf00      	nop
 8005814:	bf00      	nop
}
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582e:	f003 021c 	and.w	r2, r3, #28
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	2101      	movs	r1, #1
 8005838:	fa01 f202 	lsl.w	r2, r1, r2
 800583c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b10      	cmp	r3, #16
 800584c:	d108      	bne.n	8005860 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800585e:	e007      	b.n	8005870 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	60da      	str	r2, [r3, #12]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800588a:	e154      	b.n	8005b36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	2101      	movs	r1, #1
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	fa01 f303 	lsl.w	r3, r1, r3
 8005898:	4013      	ands	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 8146 	beq.w	8005b30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 0303 	and.w	r3, r3, #3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d005      	beq.n	80058bc <HAL_GPIO_Init+0x40>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d130      	bne.n	800591e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	2203      	movs	r2, #3
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	43db      	mvns	r3, r3
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4013      	ands	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058f2:	2201      	movs	r2, #1
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	091b      	lsrs	r3, r3, #4
 8005908:	f003 0201 	and.w	r2, r3, #1
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2b03      	cmp	r3, #3
 8005928:	d017      	beq.n	800595a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	2203      	movs	r2, #3
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	43db      	mvns	r3, r3
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4013      	ands	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d123      	bne.n	80059ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	08da      	lsrs	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3208      	adds	r2, #8
 800596e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	220f      	movs	r2, #15
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	43db      	mvns	r3, r3
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4013      	ands	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	08da      	lsrs	r2, r3, #3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3208      	adds	r2, #8
 80059a8:	6939      	ldr	r1, [r7, #16]
 80059aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	2203      	movs	r2, #3
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	43db      	mvns	r3, r3
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4013      	ands	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f003 0203 	and.w	r2, r3, #3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80a0 	beq.w	8005b30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059f0:	4b58      	ldr	r3, [pc, #352]	@ (8005b54 <HAL_GPIO_Init+0x2d8>)
 80059f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f4:	4a57      	ldr	r2, [pc, #348]	@ (8005b54 <HAL_GPIO_Init+0x2d8>)
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80059fc:	4b55      	ldr	r3, [pc, #340]	@ (8005b54 <HAL_GPIO_Init+0x2d8>)
 80059fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005a08:	4a53      	ldr	r2, [pc, #332]	@ (8005b58 <HAL_GPIO_Init+0x2dc>)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	089b      	lsrs	r3, r3, #2
 8005a0e:	3302      	adds	r3, #2
 8005a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	220f      	movs	r2, #15
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a32:	d019      	beq.n	8005a68 <HAL_GPIO_Init+0x1ec>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a49      	ldr	r2, [pc, #292]	@ (8005b5c <HAL_GPIO_Init+0x2e0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <HAL_GPIO_Init+0x1e8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a48      	ldr	r2, [pc, #288]	@ (8005b60 <HAL_GPIO_Init+0x2e4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00d      	beq.n	8005a60 <HAL_GPIO_Init+0x1e4>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a47      	ldr	r2, [pc, #284]	@ (8005b64 <HAL_GPIO_Init+0x2e8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d007      	beq.n	8005a5c <HAL_GPIO_Init+0x1e0>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a46      	ldr	r2, [pc, #280]	@ (8005b68 <HAL_GPIO_Init+0x2ec>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d101      	bne.n	8005a58 <HAL_GPIO_Init+0x1dc>
 8005a54:	2304      	movs	r3, #4
 8005a56:	e008      	b.n	8005a6a <HAL_GPIO_Init+0x1ee>
 8005a58:	2307      	movs	r3, #7
 8005a5a:	e006      	b.n	8005a6a <HAL_GPIO_Init+0x1ee>
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e004      	b.n	8005a6a <HAL_GPIO_Init+0x1ee>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e002      	b.n	8005a6a <HAL_GPIO_Init+0x1ee>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <HAL_GPIO_Init+0x1ee>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	f002 0203 	and.w	r2, r2, #3
 8005a70:	0092      	lsls	r2, r2, #2
 8005a72:	4093      	lsls	r3, r2
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a7a:	4937      	ldr	r1, [pc, #220]	@ (8005b58 <HAL_GPIO_Init+0x2dc>)
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	089b      	lsrs	r3, r3, #2
 8005a80:	3302      	adds	r3, #2
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a88:	4b38      	ldr	r3, [pc, #224]	@ (8005b6c <HAL_GPIO_Init+0x2f0>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	43db      	mvns	r3, r3
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4013      	ands	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005aac:	4a2f      	ldr	r2, [pc, #188]	@ (8005b6c <HAL_GPIO_Init+0x2f0>)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8005b6c <HAL_GPIO_Init+0x2f0>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	43db      	mvns	r3, r3
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ad6:	4a25      	ldr	r2, [pc, #148]	@ (8005b6c <HAL_GPIO_Init+0x2f0>)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005adc:	4b23      	ldr	r3, [pc, #140]	@ (8005b6c <HAL_GPIO_Init+0x2f0>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b00:	4a1a      	ldr	r2, [pc, #104]	@ (8005b6c <HAL_GPIO_Init+0x2f0>)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005b06:	4b19      	ldr	r3, [pc, #100]	@ (8005b6c <HAL_GPIO_Init+0x2f0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4013      	ands	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b2a:	4a10      	ldr	r2, [pc, #64]	@ (8005b6c <HAL_GPIO_Init+0x2f0>)
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	3301      	adds	r3, #1
 8005b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f47f aea3 	bne.w	800588c <HAL_GPIO_Init+0x10>
  }
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	40021000 	.word	0x40021000
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	48000400 	.word	0x48000400
 8005b60:	48000800 	.word	0x48000800
 8005b64:	48000c00 	.word	0x48000c00
 8005b68:	48001000 	.word	0x48001000
 8005b6c:	40010400 	.word	0x40010400

08005b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	807b      	strh	r3, [r7, #2]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b80:	787b      	ldrb	r3, [r7, #1]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b86:	887a      	ldrh	r2, [r7, #2]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b8c:	e002      	b.n	8005b94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b8e:	887a      	ldrh	r2, [r7, #2]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005bb2:	887a      	ldrh	r2, [r7, #2]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	041a      	lsls	r2, r3, #16
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	43d9      	mvns	r1, r3
 8005bbe:	887b      	ldrh	r3, [r7, #2]
 8005bc0:	400b      	ands	r3, r1
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	619a      	str	r2, [r3, #24]
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005bde:	4b08      	ldr	r3, [pc, #32]	@ (8005c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005be0:	695a      	ldr	r2, [r3, #20]
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d006      	beq.n	8005bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bea:	4a05      	ldr	r2, [pc, #20]	@ (8005c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bf0:	88fb      	ldrh	r3, [r7, #6]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f806 	bl	8005c04 <HAL_GPIO_EXTI_Callback>
  }
}
 8005bf8:	bf00      	nop
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40010400 	.word	0x40010400

08005c04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e08d      	b.n	8005d48 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7fd f88b 	bl	8002d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2224      	movs	r2, #36	@ 0x24
 8005c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c6a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c7a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d107      	bne.n	8005c94 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c90:	609a      	str	r2, [r3, #8]
 8005c92:	e006      	b.n	8005ca2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005ca0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d108      	bne.n	8005cbc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	e007      	b.n	8005ccc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cde:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69d9      	ldr	r1, [r3, #28]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1a      	ldr	r2, [r3, #32]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0201 	orr.w	r2, r2, #1
 8005d28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	607a      	str	r2, [r7, #4]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	817b      	strh	r3, [r7, #10]
 8005d60:	4613      	mov	r3, r2
 8005d62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	f040 80fd 	bne.w	8005f6c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_I2C_Master_Transmit+0x30>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e0f6      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x21e>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d88:	f7fd fd1c 	bl	80037c4 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	2319      	movs	r3, #25
 8005d94:	2201      	movs	r2, #1
 8005d96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 fa0a 	bl	80061b4 <I2C_WaitOnFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e0e1      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2221      	movs	r2, #33	@ 0x21
 8005dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2210      	movs	r2, #16
 8005db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	893a      	ldrh	r2, [r7, #8]
 8005dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2bff      	cmp	r3, #255	@ 0xff
 8005dda:	d906      	bls.n	8005dea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	22ff      	movs	r2, #255	@ 0xff
 8005de0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005de2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	e007      	b.n	8005dfa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005df4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005df8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d024      	beq.n	8005e4c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e06:	781a      	ldrb	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	3301      	adds	r3, #1
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	8979      	ldrh	r1, [r7, #10]
 8005e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8005f78 <HAL_I2C_Master_Transmit+0x228>)
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 fc05 	bl	8006654 <I2C_TransferConfig>
 8005e4a:	e066      	b.n	8005f1a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	8979      	ldrh	r1, [r7, #10]
 8005e54:	4b48      	ldr	r3, [pc, #288]	@ (8005f78 <HAL_I2C_Master_Transmit+0x228>)
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fbfa 	bl	8006654 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005e60:	e05b      	b.n	8005f1a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	6a39      	ldr	r1, [r7, #32]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f9fd 	bl	8006266 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e07b      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7a:	781a      	ldrb	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d034      	beq.n	8005f1a <HAL_I2C_Master_Transmit+0x1ca>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d130      	bne.n	8005f1a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2180      	movs	r1, #128	@ 0x80
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f976 	bl	80061b4 <I2C_WaitOnFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e04d      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2bff      	cmp	r3, #255	@ 0xff
 8005eda:	d90e      	bls.n	8005efa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	22ff      	movs	r2, #255	@ 0xff
 8005ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	8979      	ldrh	r1, [r7, #10]
 8005eea:	2300      	movs	r3, #0
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fbae 	bl	8006654 <I2C_TransferConfig>
 8005ef8:	e00f      	b.n	8005f1a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	8979      	ldrh	r1, [r7, #10]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 fb9d 	bl	8006654 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d19e      	bne.n	8005e62 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	6a39      	ldr	r1, [r7, #32]
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 f9e3 	bl	80062f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e01a      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6859      	ldr	r1, [r3, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f7c <HAL_I2C_Master_Transmit+0x22c>)
 8005f4c:	400b      	ands	r3, r1
 8005f4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e000      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005f6c:	2302      	movs	r3, #2
  }
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	80002000 	.word	0x80002000
 8005f7c:	fe00e800 	.word	0xfe00e800

08005f80 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	607a      	str	r2, [r7, #4]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	817b      	strh	r3, [r7, #10]
 8005f90:	4613      	mov	r3, r2
 8005f92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	f040 80db 	bne.w	8006158 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_I2C_Master_Receive+0x30>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e0d4      	b.n	800615a <HAL_I2C_Master_Receive+0x1da>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fb8:	f7fd fc04 	bl	80037c4 <HAL_GetTick>
 8005fbc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	2319      	movs	r3, #25
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f8f2 	bl	80061b4 <I2C_WaitOnFlagUntilTimeout>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e0bf      	b.n	800615a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2222      	movs	r2, #34	@ 0x22
 8005fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2210      	movs	r2, #16
 8005fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	893a      	ldrh	r2, [r7, #8]
 8005ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006006:	b29b      	uxth	r3, r3
 8006008:	2bff      	cmp	r3, #255	@ 0xff
 800600a:	d90e      	bls.n	800602a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006016:	b2da      	uxtb	r2, r3
 8006018:	8979      	ldrh	r1, [r7, #10]
 800601a:	4b52      	ldr	r3, [pc, #328]	@ (8006164 <HAL_I2C_Master_Receive+0x1e4>)
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 fb16 	bl	8006654 <I2C_TransferConfig>
 8006028:	e06d      	b.n	8006106 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006038:	b2da      	uxtb	r2, r3
 800603a:	8979      	ldrh	r1, [r7, #10]
 800603c:	4b49      	ldr	r3, [pc, #292]	@ (8006164 <HAL_I2C_Master_Receive+0x1e4>)
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fb05 	bl	8006654 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800604a:	e05c      	b.n	8006106 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	6a39      	ldr	r1, [r7, #32]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f993 	bl	800637c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e07c      	b.n	800615a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d034      	beq.n	8006106 <HAL_I2C_Master_Receive+0x186>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d130      	bne.n	8006106 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	2200      	movs	r2, #0
 80060ac:	2180      	movs	r1, #128	@ 0x80
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f880 	bl	80061b4 <I2C_WaitOnFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e04d      	b.n	800615a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2bff      	cmp	r3, #255	@ 0xff
 80060c6:	d90e      	bls.n	80060e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	22ff      	movs	r2, #255	@ 0xff
 80060cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	8979      	ldrh	r1, [r7, #10]
 80060d6:	2300      	movs	r3, #0
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 fab8 	bl	8006654 <I2C_TransferConfig>
 80060e4:	e00f      	b.n	8006106 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	8979      	ldrh	r1, [r7, #10]
 80060f8:	2300      	movs	r3, #0
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 faa7 	bl	8006654 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d19d      	bne.n	800604c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	6a39      	ldr	r1, [r7, #32]
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 f8ed 	bl	80062f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e01a      	b.n	800615a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2220      	movs	r2, #32
 800612a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6859      	ldr	r1, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4b0c      	ldr	r3, [pc, #48]	@ (8006168 <HAL_I2C_Master_Receive+0x1e8>)
 8006138:	400b      	ands	r3, r1
 800613a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	e000      	b.n	800615a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006158:	2302      	movs	r3, #2
  }
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	80002400 	.word	0x80002400
 8006168:	fe00e800 	.word	0xfe00e800

0800616c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b02      	cmp	r3, #2
 8006180:	d103      	bne.n	800618a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b01      	cmp	r3, #1
 8006196:	d007      	beq.n	80061a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0201 	orr.w	r2, r2, #1
 80061a6:	619a      	str	r2, [r3, #24]
  }
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4613      	mov	r3, r2
 80061c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061c4:	e03b      	b.n	800623e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f962 	bl	8006494 <I2C_IsErrorOccurred>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e041      	b.n	800625e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061e0:	d02d      	beq.n	800623e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e2:	f7fd faef 	bl	80037c4 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d302      	bcc.n	80061f8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d122      	bne.n	800623e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4013      	ands	r3, r2
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	bf0c      	ite	eq
 8006208:	2301      	moveq	r3, #1
 800620a:	2300      	movne	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	429a      	cmp	r2, r3
 8006214:	d113      	bne.n	800623e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621a:	f043 0220 	orr.w	r2, r3, #32
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e00f      	b.n	800625e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699a      	ldr	r2, [r3, #24]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4013      	ands	r3, r2
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	429a      	cmp	r2, r3
 800624c:	bf0c      	ite	eq
 800624e:	2301      	moveq	r3, #1
 8006250:	2300      	movne	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	461a      	mov	r2, r3
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	429a      	cmp	r2, r3
 800625a:	d0b4      	beq.n	80061c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006272:	e033      	b.n	80062dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 f90b 	bl	8006494 <I2C_IsErrorOccurred>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e031      	b.n	80062ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800628e:	d025      	beq.n	80062dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006290:	f7fd fa98 	bl	80037c4 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	429a      	cmp	r2, r3
 800629e:	d302      	bcc.n	80062a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d11a      	bne.n	80062dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d013      	beq.n	80062dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b8:	f043 0220 	orr.w	r2, r3, #32
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e007      	b.n	80062ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d1c4      	bne.n	8006274 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006300:	e02f      	b.n	8006362 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 f8c4 	bl	8006494 <I2C_IsErrorOccurred>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e02d      	b.n	8006372 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006316:	f7fd fa55 	bl	80037c4 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	429a      	cmp	r2, r3
 8006324:	d302      	bcc.n	800632c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d11a      	bne.n	8006362 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b20      	cmp	r3, #32
 8006338:	d013      	beq.n	8006362 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633e:	f043 0220 	orr.w	r2, r3, #32
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e007      	b.n	8006372 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b20      	cmp	r3, #32
 800636e:	d1c8      	bne.n	8006302 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800638c:	e071      	b.n	8006472 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f87e 	bl	8006494 <I2C_IsErrorOccurred>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d13b      	bne.n	8006428 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d138      	bne.n	8006428 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d105      	bne.n	80063d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f003 0310 	and.w	r3, r3, #16
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d121      	bne.n	8006422 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2210      	movs	r2, #16
 80063e4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2204      	movs	r2, #4
 80063ea:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2220      	movs	r2, #32
 80063f2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6859      	ldr	r1, [r3, #4]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4b24      	ldr	r3, [pc, #144]	@ (8006490 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006400:	400b      	ands	r3, r1
 8006402:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	75fb      	strb	r3, [r7, #23]
 8006420:	e002      	b.n	8006428 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006428:	f7fd f9cc 	bl	80037c4 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	429a      	cmp	r2, r3
 8006436:	d302      	bcc.n	800643e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d119      	bne.n	8006472 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800643e:	7dfb      	ldrb	r3, [r7, #23]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d116      	bne.n	8006472 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	2b04      	cmp	r3, #4
 8006450:	d00f      	beq.n	8006472 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006456:	f043 0220 	orr.w	r2, r3, #32
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2220      	movs	r2, #32
 8006462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b04      	cmp	r3, #4
 800647e:	d002      	beq.n	8006486 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006480:	7dfb      	ldrb	r3, [r7, #23]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d083      	beq.n	800638e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006486:	7dfb      	ldrb	r3, [r7, #23]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	fe00e800 	.word	0xfe00e800

08006494 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	@ 0x28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d068      	beq.n	8006592 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2210      	movs	r2, #16
 80064c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064c8:	e049      	b.n	800655e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064d0:	d045      	beq.n	800655e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064d2:	f7fd f977 	bl	80037c4 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d302      	bcc.n	80064e8 <I2C_IsErrorOccurred+0x54>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d13a      	bne.n	800655e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006506:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800650a:	d121      	bne.n	8006550 <I2C_IsErrorOccurred+0xbc>
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006512:	d01d      	beq.n	8006550 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006514:	7cfb      	ldrb	r3, [r7, #19]
 8006516:	2b20      	cmp	r3, #32
 8006518:	d01a      	beq.n	8006550 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006528:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800652a:	f7fd f94b 	bl	80037c4 <HAL_GetTick>
 800652e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006530:	e00e      	b.n	8006550 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006532:	f7fd f947 	bl	80037c4 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b19      	cmp	r3, #25
 800653e:	d907      	bls.n	8006550 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	f043 0320 	orr.w	r3, r3, #32
 8006546:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800654e:	e006      	b.n	800655e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b20      	cmp	r3, #32
 800655c:	d1e9      	bne.n	8006532 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	2b20      	cmp	r3, #32
 800656a:	d003      	beq.n	8006574 <I2C_IsErrorOccurred+0xe0>
 800656c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006570:	2b00      	cmp	r3, #0
 8006572:	d0aa      	beq.n	80064ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006578:	2b00      	cmp	r3, #0
 800657a:	d103      	bne.n	8006584 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2220      	movs	r2, #32
 8006582:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	f043 0304 	orr.w	r3, r3, #4
 800658a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00b      	beq.n	80065bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00b      	beq.n	80065de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	f043 0308 	orr.w	r3, r3, #8
 80065cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	f043 0302 	orr.w	r3, r3, #2
 80065ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01c      	beq.n	8006642 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff fdaf 	bl	800616c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6859      	ldr	r1, [r3, #4]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	4b0d      	ldr	r3, [pc, #52]	@ (8006650 <I2C_IsErrorOccurred+0x1bc>)
 800661a:	400b      	ands	r3, r1
 800661c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	431a      	orrs	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006642:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006646:	4618      	mov	r0, r3
 8006648:	3728      	adds	r7, #40	@ 0x28
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	fe00e800 	.word	0xfe00e800

08006654 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	607b      	str	r3, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	817b      	strh	r3, [r7, #10]
 8006662:	4613      	mov	r3, r2
 8006664:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006666:	897b      	ldrh	r3, [r7, #10]
 8006668:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800666c:	7a7b      	ldrb	r3, [r7, #9]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006674:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	4313      	orrs	r3, r2
 800667e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006682:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	0d5b      	lsrs	r3, r3, #21
 800668e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006692:	4b08      	ldr	r3, [pc, #32]	@ (80066b4 <I2C_TransferConfig+0x60>)
 8006694:	430b      	orrs	r3, r1
 8006696:	43db      	mvns	r3, r3
 8006698:	ea02 0103 	and.w	r1, r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	03ff63ff 	.word	0x03ff63ff

080066b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d138      	bne.n	8006740 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066d8:	2302      	movs	r3, #2
 80066da:	e032      	b.n	8006742 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2224      	movs	r2, #36	@ 0x24
 80066e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800670a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6819      	ldr	r1, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0201 	orr.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	e000      	b.n	8006742 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006740:	2302      	movs	r3, #2
  }
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b20      	cmp	r3, #32
 8006762:	d139      	bne.n	80067d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800676e:	2302      	movs	r3, #2
 8006770:	e033      	b.n	80067da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2224      	movs	r2, #36	@ 0x24
 800677e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80067a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	e000      	b.n	80067da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067d8:	2302      	movs	r3, #2
  }
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e043      	b.n	8006880 <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006800:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f245 5255 	movw	r2, #21845	@ 0x5555
 800680a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6852      	ldr	r2, [r2, #4]
 8006814:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6892      	ldr	r2, [r2, #8]
 800681e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006820:	f7fc ffd0 	bl	80037c4 <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006826:	e011      	b.n	800684c <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006828:	f7fc ffcc 	bl	80037c4 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	f641 0201 	movw	r2, #6145	@ 0x1801
 8006836:	4293      	cmp	r3, r2
 8006838:	d908      	bls.n	800684c <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e019      	b.n	8006880 <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e6      	bne.n	8006828 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d005      	beq.n	8006874 <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	68d2      	ldr	r2, [r2, #12]
 8006870:	611a      	str	r2, [r3, #16]
 8006872:	e004      	b.n	800687e <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800687c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006898:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068ac:	4b05      	ldr	r3, [pc, #20]	@ (80068c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a04      	ldr	r2, [pc, #16]	@ (80068c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80068b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b6:	6013      	str	r3, [r2, #0]
}
 80068b8:	bf00      	nop
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40007000 	.word	0x40007000

080068c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80068cc:	4b04      	ldr	r3, [pc, #16]	@ (80068e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40007000 	.word	0x40007000

080068e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f2:	d130      	bne.n	8006956 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80068f4:	4b23      	ldr	r3, [pc, #140]	@ (8006984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006900:	d038      	beq.n	8006974 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006902:	4b20      	ldr	r3, [pc, #128]	@ (8006984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800690a:	4a1e      	ldr	r2, [pc, #120]	@ (8006984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800690c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006910:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006912:	4b1d      	ldr	r3, [pc, #116]	@ (8006988 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2232      	movs	r2, #50	@ 0x32
 8006918:	fb02 f303 	mul.w	r3, r2, r3
 800691c:	4a1b      	ldr	r2, [pc, #108]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800691e:	fba2 2303 	umull	r2, r3, r2, r3
 8006922:	0c9b      	lsrs	r3, r3, #18
 8006924:	3301      	adds	r3, #1
 8006926:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006928:	e002      	b.n	8006930 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3b01      	subs	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006930:	4b14      	ldr	r3, [pc, #80]	@ (8006984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800693c:	d102      	bne.n	8006944 <HAL_PWREx_ControlVoltageScaling+0x60>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1f2      	bne.n	800692a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006944:	4b0f      	ldr	r3, [pc, #60]	@ (8006984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800694c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006950:	d110      	bne.n	8006974 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e00f      	b.n	8006976 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006956:	4b0b      	ldr	r3, [pc, #44]	@ (8006984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800695e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006962:	d007      	beq.n	8006974 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006964:	4b07      	ldr	r3, [pc, #28]	@ (8006984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800696c:	4a05      	ldr	r2, [pc, #20]	@ (8006984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800696e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006972:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40007000 	.word	0x40007000
 8006988:	20000000 	.word	0x20000000
 800698c:	431bde83 	.word	0x431bde83

08006990 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f000 bc02 	b.w	80071a8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069a4:	4b96      	ldr	r3, [pc, #600]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 030c 	and.w	r3, r3, #12
 80069ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069ae:	4b94      	ldr	r3, [pc, #592]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0310 	and.w	r3, r3, #16
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 80e4 	beq.w	8006b8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <HAL_RCC_OscConfig+0x4c>
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	2b0c      	cmp	r3, #12
 80069d0:	f040 808b 	bne.w	8006aea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	f040 8087 	bne.w	8006aea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069dc:	4b88      	ldr	r3, [pc, #544]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <HAL_RCC_OscConfig+0x64>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e3d9      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1a      	ldr	r2, [r3, #32]
 80069f8:	4b81      	ldr	r3, [pc, #516]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0308 	and.w	r3, r3, #8
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <HAL_RCC_OscConfig+0x7e>
 8006a04:	4b7e      	ldr	r3, [pc, #504]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a0c:	e005      	b.n	8006a1a <HAL_RCC_OscConfig+0x8a>
 8006a0e:	4b7c      	ldr	r3, [pc, #496]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a14:	091b      	lsrs	r3, r3, #4
 8006a16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d223      	bcs.n	8006a66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fd8c 	bl	8007540 <RCC_SetFlashLatencyFromMSIRange>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e3ba      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a32:	4b73      	ldr	r3, [pc, #460]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a72      	ldr	r2, [pc, #456]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a38:	f043 0308 	orr.w	r3, r3, #8
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	4b70      	ldr	r3, [pc, #448]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	496d      	ldr	r1, [pc, #436]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a50:	4b6b      	ldr	r3, [pc, #428]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	4968      	ldr	r1, [pc, #416]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	604b      	str	r3, [r1, #4]
 8006a64:	e025      	b.n	8006ab2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a66:	4b66      	ldr	r3, [pc, #408]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a65      	ldr	r2, [pc, #404]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a6c:	f043 0308 	orr.w	r3, r3, #8
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	4b63      	ldr	r3, [pc, #396]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	4960      	ldr	r1, [pc, #384]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a84:	4b5e      	ldr	r3, [pc, #376]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	021b      	lsls	r3, r3, #8
 8006a92:	495b      	ldr	r1, [pc, #364]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fd4c 	bl	8007540 <RCC_SetFlashLatencyFromMSIRange>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e37a      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ab2:	f000 fc81 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	4b51      	ldr	r3, [pc, #324]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	091b      	lsrs	r3, r3, #4
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	4950      	ldr	r1, [pc, #320]	@ (8006c04 <HAL_RCC_OscConfig+0x274>)
 8006ac4:	5ccb      	ldrb	r3, [r1, r3]
 8006ac6:	f003 031f 	and.w	r3, r3, #31
 8006aca:	fa22 f303 	lsr.w	r3, r2, r3
 8006ace:	4a4e      	ldr	r2, [pc, #312]	@ (8006c08 <HAL_RCC_OscConfig+0x278>)
 8006ad0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8006c0c <HAL_RCC_OscConfig+0x27c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fc fe24 	bl	8003724 <HAL_InitTick>
 8006adc:	4603      	mov	r3, r0
 8006ade:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d052      	beq.n	8006b8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	e35e      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d032      	beq.n	8006b58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006af2:	4b43      	ldr	r3, [pc, #268]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a42      	ldr	r2, [pc, #264]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006afe:	f7fc fe61 	bl	80037c4 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b06:	f7fc fe5d 	bl	80037c4 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e347      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b18:	4b39      	ldr	r3, [pc, #228]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f0      	beq.n	8006b06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b24:	4b36      	ldr	r3, [pc, #216]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a35      	ldr	r2, [pc, #212]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006b2a:	f043 0308 	orr.w	r3, r3, #8
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	4b33      	ldr	r3, [pc, #204]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	4930      	ldr	r1, [pc, #192]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b42:	4b2f      	ldr	r3, [pc, #188]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	492b      	ldr	r1, [pc, #172]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	604b      	str	r3, [r1, #4]
 8006b56:	e01a      	b.n	8006b8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006b58:	4b29      	ldr	r3, [pc, #164]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a28      	ldr	r2, [pc, #160]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006b5e:	f023 0301 	bic.w	r3, r3, #1
 8006b62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b64:	f7fc fe2e 	bl	80037c4 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b6c:	f7fc fe2a 	bl	80037c4 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e314      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b7e:	4b20      	ldr	r3, [pc, #128]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f0      	bne.n	8006b6c <HAL_RCC_OscConfig+0x1dc>
 8006b8a:	e000      	b.n	8006b8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d073      	beq.n	8006c82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d005      	beq.n	8006bac <HAL_RCC_OscConfig+0x21c>
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b0c      	cmp	r3, #12
 8006ba4:	d10e      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d10b      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bac:	4b14      	ldr	r3, [pc, #80]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d063      	beq.n	8006c80 <HAL_RCC_OscConfig+0x2f0>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d15f      	bne.n	8006c80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e2f1      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bcc:	d106      	bne.n	8006bdc <HAL_RCC_OscConfig+0x24c>
 8006bce:	4b0c      	ldr	r3, [pc, #48]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	e025      	b.n	8006c28 <HAL_RCC_OscConfig+0x298>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006be4:	d114      	bne.n	8006c10 <HAL_RCC_OscConfig+0x280>
 8006be6:	4b06      	ldr	r3, [pc, #24]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a05      	ldr	r2, [pc, #20]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	4b03      	ldr	r3, [pc, #12]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a02      	ldr	r2, [pc, #8]	@ (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	e013      	b.n	8006c28 <HAL_RCC_OscConfig+0x298>
 8006c00:	40021000 	.word	0x40021000
 8006c04:	0800ce18 	.word	0x0800ce18
 8006c08:	20000000 	.word	0x20000000
 8006c0c:	20000004 	.word	0x20000004
 8006c10:	4ba0      	ldr	r3, [pc, #640]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a9f      	ldr	r2, [pc, #636]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	4b9d      	ldr	r3, [pc, #628]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a9c      	ldr	r2, [pc, #624]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d013      	beq.n	8006c58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c30:	f7fc fdc8 	bl	80037c4 <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c38:	f7fc fdc4 	bl	80037c4 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b64      	cmp	r3, #100	@ 0x64
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e2ae      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c4a:	4b92      	ldr	r3, [pc, #584]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0f0      	beq.n	8006c38 <HAL_RCC_OscConfig+0x2a8>
 8006c56:	e014      	b.n	8006c82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c58:	f7fc fdb4 	bl	80037c4 <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c60:	f7fc fdb0 	bl	80037c4 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b64      	cmp	r3, #100	@ 0x64
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e29a      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c72:	4b88      	ldr	r3, [pc, #544]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f0      	bne.n	8006c60 <HAL_RCC_OscConfig+0x2d0>
 8006c7e:	e000      	b.n	8006c82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d060      	beq.n	8006d50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d005      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x310>
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	2b0c      	cmp	r3, #12
 8006c98:	d119      	bne.n	8006cce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d116      	bne.n	8006cce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ca0:	4b7c      	ldr	r3, [pc, #496]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x328>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e277      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb8:	4b76      	ldr	r3, [pc, #472]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	061b      	lsls	r3, r3, #24
 8006cc6:	4973      	ldr	r1, [pc, #460]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ccc:	e040      	b.n	8006d50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d023      	beq.n	8006d1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a6e      	ldr	r2, [pc, #440]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce2:	f7fc fd6f 	bl	80037c4 <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ce8:	e008      	b.n	8006cfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cea:	f7fc fd6b 	bl	80037c4 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e255      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cfc:	4b65      	ldr	r3, [pc, #404]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0f0      	beq.n	8006cea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d08:	4b62      	ldr	r3, [pc, #392]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	061b      	lsls	r3, r3, #24
 8006d16:	495f      	ldr	r1, [pc, #380]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	604b      	str	r3, [r1, #4]
 8006d1c:	e018      	b.n	8006d50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a5c      	ldr	r2, [pc, #368]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2a:	f7fc fd4b 	bl	80037c4 <HAL_GetTick>
 8006d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d30:	e008      	b.n	8006d44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d32:	f7fc fd47 	bl	80037c4 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e231      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d44:	4b53      	ldr	r3, [pc, #332]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f0      	bne.n	8006d32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d03c      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01c      	beq.n	8006d9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d64:	4b4b      	ldr	r3, [pc, #300]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d6a:	4a4a      	ldr	r2, [pc, #296]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d74:	f7fc fd26 	bl	80037c4 <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d7c:	f7fc fd22 	bl	80037c4 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e20c      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d8e:	4b41      	ldr	r3, [pc, #260]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0ef      	beq.n	8006d7c <HAL_RCC_OscConfig+0x3ec>
 8006d9c:	e01b      	b.n	8006dd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006da4:	4a3b      	ldr	r2, [pc, #236]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006da6:	f023 0301 	bic.w	r3, r3, #1
 8006daa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dae:	f7fc fd09 	bl	80037c4 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006db4:	e008      	b.n	8006dc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006db6:	f7fc fd05 	bl	80037c4 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e1ef      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006dc8:	4b32      	ldr	r3, [pc, #200]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1ef      	bne.n	8006db6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 80a6 	beq.w	8006f30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006de4:	2300      	movs	r3, #0
 8006de6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006de8:	4b2a      	ldr	r3, [pc, #168]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10d      	bne.n	8006e10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006df4:	4b27      	ldr	r3, [pc, #156]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df8:	4a26      	ldr	r2, [pc, #152]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e00:	4b24      	ldr	r3, [pc, #144]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e10:	4b21      	ldr	r3, [pc, #132]	@ (8006e98 <HAL_RCC_OscConfig+0x508>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d118      	bne.n	8006e4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006e98 <HAL_RCC_OscConfig+0x508>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1d      	ldr	r2, [pc, #116]	@ (8006e98 <HAL_RCC_OscConfig+0x508>)
 8006e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e28:	f7fc fccc 	bl	80037c4 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e30:	f7fc fcc8 	bl	80037c4 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e1b2      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e42:	4b15      	ldr	r3, [pc, #84]	@ (8006e98 <HAL_RCC_OscConfig+0x508>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0f0      	beq.n	8006e30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d108      	bne.n	8006e68 <HAL_RCC_OscConfig+0x4d8>
 8006e56:	4b0f      	ldr	r3, [pc, #60]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006e5e:	f043 0301 	orr.w	r3, r3, #1
 8006e62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e66:	e029      	b.n	8006ebc <HAL_RCC_OscConfig+0x52c>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	2b05      	cmp	r3, #5
 8006e6e:	d115      	bne.n	8006e9c <HAL_RCC_OscConfig+0x50c>
 8006e70:	4b08      	ldr	r3, [pc, #32]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e76:	4a07      	ldr	r2, [pc, #28]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006e78:	f043 0304 	orr.w	r3, r3, #4
 8006e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e80:	4b04      	ldr	r3, [pc, #16]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e86:	4a03      	ldr	r2, [pc, #12]	@ (8006e94 <HAL_RCC_OscConfig+0x504>)
 8006e88:	f043 0301 	orr.w	r3, r3, #1
 8006e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e90:	e014      	b.n	8006ebc <HAL_RCC_OscConfig+0x52c>
 8006e92:	bf00      	nop
 8006e94:	40021000 	.word	0x40021000
 8006e98:	40007000 	.word	0x40007000
 8006e9c:	4b9a      	ldr	r3, [pc, #616]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea2:	4a99      	ldr	r2, [pc, #612]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006eac:	4b96      	ldr	r3, [pc, #600]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eb2:	4a95      	ldr	r2, [pc, #596]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006eb4:	f023 0304 	bic.w	r3, r3, #4
 8006eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d016      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec4:	f7fc fc7e 	bl	80037c4 <HAL_GetTick>
 8006ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eca:	e00a      	b.n	8006ee2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ecc:	f7fc fc7a 	bl	80037c4 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e162      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ee2:	4b89      	ldr	r3, [pc, #548]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0ed      	beq.n	8006ecc <HAL_RCC_OscConfig+0x53c>
 8006ef0:	e015      	b.n	8006f1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef2:	f7fc fc67 	bl	80037c4 <HAL_GetTick>
 8006ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ef8:	e00a      	b.n	8006f10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006efa:	f7fc fc63 	bl	80037c4 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e14b      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f10:	4b7d      	ldr	r3, [pc, #500]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1ed      	bne.n	8006efa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f1e:	7ffb      	ldrb	r3, [r7, #31]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d105      	bne.n	8006f30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f24:	4b78      	ldr	r3, [pc, #480]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f28:	4a77      	ldr	r2, [pc, #476]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f2e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0320 	and.w	r3, r3, #32
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d03c      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01c      	beq.n	8006f7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f44:	4b70      	ldr	r3, [pc, #448]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f4a:	4a6f      	ldr	r2, [pc, #444]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006f4c:	f043 0301 	orr.w	r3, r3, #1
 8006f50:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f54:	f7fc fc36 	bl	80037c4 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f5c:	f7fc fc32 	bl	80037c4 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e11c      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f6e:	4b66      	ldr	r3, [pc, #408]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0ef      	beq.n	8006f5c <HAL_RCC_OscConfig+0x5cc>
 8006f7c:	e01b      	b.n	8006fb6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f7e:	4b62      	ldr	r3, [pc, #392]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f84:	4a60      	ldr	r2, [pc, #384]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006f86:	f023 0301 	bic.w	r3, r3, #1
 8006f8a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8e:	f7fc fc19 	bl	80037c4 <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f96:	f7fc fc15 	bl	80037c4 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e0ff      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fa8:	4b57      	ldr	r3, [pc, #348]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1ef      	bne.n	8006f96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 80f3 	beq.w	80071a6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	f040 80c9 	bne.w	800715c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006fca:	4b4f      	ldr	r3, [pc, #316]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f003 0203 	and.w	r2, r3, #3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d12c      	bne.n	8007038 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d123      	bne.n	8007038 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ffa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d11b      	bne.n	8007038 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800700c:	429a      	cmp	r2, r3
 800700e:	d113      	bne.n	8007038 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800701a:	085b      	lsrs	r3, r3, #1
 800701c:	3b01      	subs	r3, #1
 800701e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007020:	429a      	cmp	r2, r3
 8007022:	d109      	bne.n	8007038 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702e:	085b      	lsrs	r3, r3, #1
 8007030:	3b01      	subs	r3, #1
 8007032:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007034:	429a      	cmp	r2, r3
 8007036:	d06b      	beq.n	8007110 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b0c      	cmp	r3, #12
 800703c:	d062      	beq.n	8007104 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800703e:	4b32      	ldr	r3, [pc, #200]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e0ac      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800704e:	4b2e      	ldr	r3, [pc, #184]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a2d      	ldr	r2, [pc, #180]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8007054:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007058:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800705a:	f7fc fbb3 	bl	80037c4 <HAL_GetTick>
 800705e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007060:	e008      	b.n	8007074 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007062:	f7fc fbaf 	bl	80037c4 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d901      	bls.n	8007074 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e099      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007074:	4b24      	ldr	r3, [pc, #144]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1f0      	bne.n	8007062 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007080:	4b21      	ldr	r3, [pc, #132]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	4b21      	ldr	r3, [pc, #132]	@ (800710c <HAL_RCC_OscConfig+0x77c>)
 8007086:	4013      	ands	r3, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007090:	3a01      	subs	r2, #1
 8007092:	0112      	lsls	r2, r2, #4
 8007094:	4311      	orrs	r1, r2
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800709a:	0212      	lsls	r2, r2, #8
 800709c:	4311      	orrs	r1, r2
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80070a2:	0852      	lsrs	r2, r2, #1
 80070a4:	3a01      	subs	r2, #1
 80070a6:	0552      	lsls	r2, r2, #21
 80070a8:	4311      	orrs	r1, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80070ae:	0852      	lsrs	r2, r2, #1
 80070b0:	3a01      	subs	r2, #1
 80070b2:	0652      	lsls	r2, r2, #25
 80070b4:	4311      	orrs	r1, r2
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80070ba:	06d2      	lsls	r2, r2, #27
 80070bc:	430a      	orrs	r2, r1
 80070be:	4912      	ldr	r1, [pc, #72]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80070c4:	4b10      	ldr	r3, [pc, #64]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a0f      	ldr	r2, [pc, #60]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 80070ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80070d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 80070d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80070dc:	f7fc fb72 	bl	80037c4 <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e4:	f7fc fb6e 	bl	80037c4 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e058      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070f6:	4b04      	ldr	r3, [pc, #16]	@ (8007108 <HAL_RCC_OscConfig+0x778>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0f0      	beq.n	80070e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007102:	e050      	b.n	80071a6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e04f      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
 8007108:	40021000 	.word	0x40021000
 800710c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007110:	4b27      	ldr	r3, [pc, #156]	@ (80071b0 <HAL_RCC_OscConfig+0x820>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d144      	bne.n	80071a6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800711c:	4b24      	ldr	r3, [pc, #144]	@ (80071b0 <HAL_RCC_OscConfig+0x820>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a23      	ldr	r2, [pc, #140]	@ (80071b0 <HAL_RCC_OscConfig+0x820>)
 8007122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007126:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007128:	4b21      	ldr	r3, [pc, #132]	@ (80071b0 <HAL_RCC_OscConfig+0x820>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	4a20      	ldr	r2, [pc, #128]	@ (80071b0 <HAL_RCC_OscConfig+0x820>)
 800712e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007132:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007134:	f7fc fb46 	bl	80037c4 <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800713c:	f7fc fb42 	bl	80037c4 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e02c      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800714e:	4b18      	ldr	r3, [pc, #96]	@ (80071b0 <HAL_RCC_OscConfig+0x820>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0f0      	beq.n	800713c <HAL_RCC_OscConfig+0x7ac>
 800715a:	e024      	b.n	80071a6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	2b0c      	cmp	r3, #12
 8007160:	d01f      	beq.n	80071a2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007162:	4b13      	ldr	r3, [pc, #76]	@ (80071b0 <HAL_RCC_OscConfig+0x820>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a12      	ldr	r2, [pc, #72]	@ (80071b0 <HAL_RCC_OscConfig+0x820>)
 8007168:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800716c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716e:	f7fc fb29 	bl	80037c4 <HAL_GetTick>
 8007172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007174:	e008      	b.n	8007188 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007176:	f7fc fb25 	bl	80037c4 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d901      	bls.n	8007188 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e00f      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007188:	4b09      	ldr	r3, [pc, #36]	@ (80071b0 <HAL_RCC_OscConfig+0x820>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1f0      	bne.n	8007176 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007194:	4b06      	ldr	r3, [pc, #24]	@ (80071b0 <HAL_RCC_OscConfig+0x820>)
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	4905      	ldr	r1, [pc, #20]	@ (80071b0 <HAL_RCC_OscConfig+0x820>)
 800719a:	4b06      	ldr	r3, [pc, #24]	@ (80071b4 <HAL_RCC_OscConfig+0x824>)
 800719c:	4013      	ands	r3, r2
 800719e:	60cb      	str	r3, [r1, #12]
 80071a0:	e001      	b.n	80071a6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e000      	b.n	80071a8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3720      	adds	r7, #32
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	40021000 	.word	0x40021000
 80071b4:	feeefffc 	.word	0xfeeefffc

080071b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0e7      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071cc:	4b75      	ldr	r3, [pc, #468]	@ (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d910      	bls.n	80071fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071da:	4b72      	ldr	r3, [pc, #456]	@ (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f023 0207 	bic.w	r2, r3, #7
 80071e2:	4970      	ldr	r1, [pc, #448]	@ (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ea:	4b6e      	ldr	r3, [pc, #440]	@ (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d001      	beq.n	80071fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e0cf      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d010      	beq.n	800722a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	4b66      	ldr	r3, [pc, #408]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007214:	429a      	cmp	r2, r3
 8007216:	d908      	bls.n	800722a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007218:	4b63      	ldr	r3, [pc, #396]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	4960      	ldr	r1, [pc, #384]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007226:	4313      	orrs	r3, r2
 8007228:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04c      	beq.n	80072d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b03      	cmp	r3, #3
 800723c:	d107      	bne.n	800724e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800723e:	4b5a      	ldr	r3, [pc, #360]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d121      	bne.n	800728e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e0a6      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d107      	bne.n	8007266 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007256:	4b54      	ldr	r3, [pc, #336]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d115      	bne.n	800728e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e09a      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d107      	bne.n	800727e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800726e:	4b4e      	ldr	r3, [pc, #312]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d109      	bne.n	800728e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e08e      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800727e:	4b4a      	ldr	r3, [pc, #296]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e086      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800728e:	4b46      	ldr	r3, [pc, #280]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f023 0203 	bic.w	r2, r3, #3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	4943      	ldr	r1, [pc, #268]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 800729c:	4313      	orrs	r3, r2
 800729e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072a0:	f7fc fa90 	bl	80037c4 <HAL_GetTick>
 80072a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072a6:	e00a      	b.n	80072be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072a8:	f7fc fa8c 	bl	80037c4 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e06e      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072be:	4b3a      	ldr	r3, [pc, #232]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 020c 	and.w	r2, r3, #12
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d1eb      	bne.n	80072a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d010      	beq.n	80072fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	4b31      	ldr	r3, [pc, #196]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d208      	bcs.n	80072fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ec:	4b2e      	ldr	r3, [pc, #184]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	492b      	ldr	r1, [pc, #172]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072fe:	4b29      	ldr	r3, [pc, #164]	@ (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0307 	and.w	r3, r3, #7
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	429a      	cmp	r2, r3
 800730a:	d210      	bcs.n	800732e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800730c:	4b25      	ldr	r3, [pc, #148]	@ (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f023 0207 	bic.w	r2, r3, #7
 8007314:	4923      	ldr	r1, [pc, #140]	@ (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	4313      	orrs	r3, r2
 800731a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800731c:	4b21      	ldr	r3, [pc, #132]	@ (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0307 	and.w	r3, r3, #7
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d001      	beq.n	800732e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e036      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d008      	beq.n	800734c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800733a:	4b1b      	ldr	r3, [pc, #108]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	4918      	ldr	r1, [pc, #96]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007348:	4313      	orrs	r3, r2
 800734a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0308 	and.w	r3, r3, #8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d009      	beq.n	800736c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007358:	4b13      	ldr	r3, [pc, #76]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	4910      	ldr	r1, [pc, #64]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007368:	4313      	orrs	r3, r2
 800736a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800736c:	f000 f824 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 8007370:	4602      	mov	r2, r0
 8007372:	4b0d      	ldr	r3, [pc, #52]	@ (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	091b      	lsrs	r3, r3, #4
 8007378:	f003 030f 	and.w	r3, r3, #15
 800737c:	490b      	ldr	r1, [pc, #44]	@ (80073ac <HAL_RCC_ClockConfig+0x1f4>)
 800737e:	5ccb      	ldrb	r3, [r1, r3]
 8007380:	f003 031f 	and.w	r3, r3, #31
 8007384:	fa22 f303 	lsr.w	r3, r2, r3
 8007388:	4a09      	ldr	r2, [pc, #36]	@ (80073b0 <HAL_RCC_ClockConfig+0x1f8>)
 800738a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800738c:	4b09      	ldr	r3, [pc, #36]	@ (80073b4 <HAL_RCC_ClockConfig+0x1fc>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4618      	mov	r0, r3
 8007392:	f7fc f9c7 	bl	8003724 <HAL_InitTick>
 8007396:	4603      	mov	r3, r0
 8007398:	72fb      	strb	r3, [r7, #11]

  return status;
 800739a:	7afb      	ldrb	r3, [r7, #11]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40022000 	.word	0x40022000
 80073a8:	40021000 	.word	0x40021000
 80073ac:	0800ce18 	.word	0x0800ce18
 80073b0:	20000000 	.word	0x20000000
 80073b4:	20000004 	.word	0x20000004

080073b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b089      	sub	sp, #36	@ 0x24
 80073bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	2300      	movs	r3, #0
 80073c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073c6:	4b3e      	ldr	r3, [pc, #248]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 030c 	and.w	r3, r3, #12
 80073ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073d0:	4b3b      	ldr	r3, [pc, #236]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f003 0303 	and.w	r3, r3, #3
 80073d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <HAL_RCC_GetSysClockFreq+0x34>
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	2b0c      	cmp	r3, #12
 80073e4:	d121      	bne.n	800742a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d11e      	bne.n	800742a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80073ec:	4b34      	ldr	r3, [pc, #208]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d107      	bne.n	8007408 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80073f8:	4b31      	ldr	r3, [pc, #196]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80073fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073fe:	0a1b      	lsrs	r3, r3, #8
 8007400:	f003 030f 	and.w	r3, r3, #15
 8007404:	61fb      	str	r3, [r7, #28]
 8007406:	e005      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007408:	4b2d      	ldr	r3, [pc, #180]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	091b      	lsrs	r3, r3, #4
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007414:	4a2b      	ldr	r2, [pc, #172]	@ (80074c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800741c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10d      	bne.n	8007440 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007428:	e00a      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2b04      	cmp	r3, #4
 800742e:	d102      	bne.n	8007436 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007430:	4b25      	ldr	r3, [pc, #148]	@ (80074c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007432:	61bb      	str	r3, [r7, #24]
 8007434:	e004      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b08      	cmp	r3, #8
 800743a:	d101      	bne.n	8007440 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800743c:	4b23      	ldr	r3, [pc, #140]	@ (80074cc <HAL_RCC_GetSysClockFreq+0x114>)
 800743e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b0c      	cmp	r3, #12
 8007444:	d134      	bne.n	80074b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007446:	4b1e      	ldr	r3, [pc, #120]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d003      	beq.n	800745e <HAL_RCC_GetSysClockFreq+0xa6>
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b03      	cmp	r3, #3
 800745a:	d003      	beq.n	8007464 <HAL_RCC_GetSysClockFreq+0xac>
 800745c:	e005      	b.n	800746a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800745e:	4b1a      	ldr	r3, [pc, #104]	@ (80074c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007460:	617b      	str	r3, [r7, #20]
      break;
 8007462:	e005      	b.n	8007470 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007464:	4b19      	ldr	r3, [pc, #100]	@ (80074cc <HAL_RCC_GetSysClockFreq+0x114>)
 8007466:	617b      	str	r3, [r7, #20]
      break;
 8007468:	e002      	b.n	8007470 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	617b      	str	r3, [r7, #20]
      break;
 800746e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007470:	4b13      	ldr	r3, [pc, #76]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	091b      	lsrs	r3, r3, #4
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	3301      	adds	r3, #1
 800747c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800747e:	4b10      	ldr	r3, [pc, #64]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	0a1b      	lsrs	r3, r3, #8
 8007484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	fb03 f202 	mul.w	r2, r3, r2
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	fbb2 f3f3 	udiv	r3, r2, r3
 8007494:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007496:	4b0a      	ldr	r3, [pc, #40]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	0e5b      	lsrs	r3, r3, #25
 800749c:	f003 0303 	and.w	r3, r3, #3
 80074a0:	3301      	adds	r3, #1
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80074b0:	69bb      	ldr	r3, [r7, #24]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3724      	adds	r7, #36	@ 0x24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40021000 	.word	0x40021000
 80074c4:	0800ce30 	.word	0x0800ce30
 80074c8:	00f42400 	.word	0x00f42400
 80074cc:	017d7840 	.word	0x017d7840

080074d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074d4:	4b03      	ldr	r3, [pc, #12]	@ (80074e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80074d6:	681b      	ldr	r3, [r3, #0]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20000000 	.word	0x20000000

080074e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80074ec:	f7ff fff0 	bl	80074d0 <HAL_RCC_GetHCLKFreq>
 80074f0:	4602      	mov	r2, r0
 80074f2:	4b06      	ldr	r3, [pc, #24]	@ (800750c <HAL_RCC_GetPCLK1Freq+0x24>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	0a1b      	lsrs	r3, r3, #8
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	4904      	ldr	r1, [pc, #16]	@ (8007510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80074fe:	5ccb      	ldrb	r3, [r1, r3]
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007508:	4618      	mov	r0, r3
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40021000 	.word	0x40021000
 8007510:	0800ce28 	.word	0x0800ce28

08007514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007518:	f7ff ffda 	bl	80074d0 <HAL_RCC_GetHCLKFreq>
 800751c:	4602      	mov	r2, r0
 800751e:	4b06      	ldr	r3, [pc, #24]	@ (8007538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	0adb      	lsrs	r3, r3, #11
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	4904      	ldr	r1, [pc, #16]	@ (800753c <HAL_RCC_GetPCLK2Freq+0x28>)
 800752a:	5ccb      	ldrb	r3, [r1, r3]
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007534:	4618      	mov	r0, r3
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40021000 	.word	0x40021000
 800753c:	0800ce28 	.word	0x0800ce28

08007540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007548:	2300      	movs	r3, #0
 800754a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800754c:	4b2a      	ldr	r3, [pc, #168]	@ (80075f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800754e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007558:	f7ff f9b6 	bl	80068c8 <HAL_PWREx_GetVoltageRange>
 800755c:	6178      	str	r0, [r7, #20]
 800755e:	e014      	b.n	800758a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007560:	4b25      	ldr	r3, [pc, #148]	@ (80075f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007564:	4a24      	ldr	r2, [pc, #144]	@ (80075f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800756a:	6593      	str	r3, [r2, #88]	@ 0x58
 800756c:	4b22      	ldr	r3, [pc, #136]	@ (80075f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800756e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007578:	f7ff f9a6 	bl	80068c8 <HAL_PWREx_GetVoltageRange>
 800757c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800757e:	4b1e      	ldr	r3, [pc, #120]	@ (80075f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007582:	4a1d      	ldr	r2, [pc, #116]	@ (80075f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007588:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007590:	d10b      	bne.n	80075aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b80      	cmp	r3, #128	@ 0x80
 8007596:	d919      	bls.n	80075cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2ba0      	cmp	r3, #160	@ 0xa0
 800759c:	d902      	bls.n	80075a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800759e:	2302      	movs	r3, #2
 80075a0:	613b      	str	r3, [r7, #16]
 80075a2:	e013      	b.n	80075cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80075a4:	2301      	movs	r3, #1
 80075a6:	613b      	str	r3, [r7, #16]
 80075a8:	e010      	b.n	80075cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b80      	cmp	r3, #128	@ 0x80
 80075ae:	d902      	bls.n	80075b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80075b0:	2303      	movs	r3, #3
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	e00a      	b.n	80075cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b80      	cmp	r3, #128	@ 0x80
 80075ba:	d102      	bne.n	80075c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80075bc:	2302      	movs	r3, #2
 80075be:	613b      	str	r3, [r7, #16]
 80075c0:	e004      	b.n	80075cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b70      	cmp	r3, #112	@ 0x70
 80075c6:	d101      	bne.n	80075cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80075c8:	2301      	movs	r3, #1
 80075ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80075cc:	4b0b      	ldr	r3, [pc, #44]	@ (80075fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f023 0207 	bic.w	r2, r3, #7
 80075d4:	4909      	ldr	r1, [pc, #36]	@ (80075fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	4313      	orrs	r3, r2
 80075da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80075dc:	4b07      	ldr	r3, [pc, #28]	@ (80075fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0307 	and.w	r3, r3, #7
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d001      	beq.n	80075ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	40021000 	.word	0x40021000
 80075fc:	40022000 	.word	0x40022000

08007600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007608:	2300      	movs	r3, #0
 800760a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800760c:	2300      	movs	r3, #0
 800760e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007618:	2b00      	cmp	r3, #0
 800761a:	d031      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007620:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007624:	d01a      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007626:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800762a:	d814      	bhi.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800762c:	2b00      	cmp	r3, #0
 800762e:	d009      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007630:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007634:	d10f      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007636:	4b5d      	ldr	r3, [pc, #372]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	4a5c      	ldr	r2, [pc, #368]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800763c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007640:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007642:	e00c      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3304      	adds	r3, #4
 8007648:	2100      	movs	r1, #0
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fa32 	bl	8007ab4 <RCCEx_PLLSAI1_Config>
 8007650:	4603      	mov	r3, r0
 8007652:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007654:	e003      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	74fb      	strb	r3, [r7, #19]
      break;
 800765a:	e000      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800765c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800765e:	7cfb      	ldrb	r3, [r7, #19]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10b      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007664:	4b51      	ldr	r3, [pc, #324]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007672:	494e      	ldr	r1, [pc, #312]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007674:	4313      	orrs	r3, r2
 8007676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800767a:	e001      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767c:	7cfb      	ldrb	r3, [r7, #19]
 800767e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 809e 	beq.w	80077ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800768e:	2300      	movs	r3, #0
 8007690:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007692:	4b46      	ldr	r3, [pc, #280]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80076a2:	2300      	movs	r3, #0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00d      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076a8:	4b40      	ldr	r3, [pc, #256]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ac:	4a3f      	ldr	r2, [pc, #252]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80076b4:	4b3d      	ldr	r3, [pc, #244]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076bc:	60bb      	str	r3, [r7, #8]
 80076be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076c0:	2301      	movs	r3, #1
 80076c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076c4:	4b3a      	ldr	r3, [pc, #232]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a39      	ldr	r2, [pc, #228]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80076ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076d0:	f7fc f878 	bl	80037c4 <HAL_GetTick>
 80076d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80076d6:	e009      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076d8:	f7fc f874 	bl	80037c4 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d902      	bls.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	74fb      	strb	r3, [r7, #19]
        break;
 80076ea:	e005      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80076ec:	4b30      	ldr	r3, [pc, #192]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0ef      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80076f8:	7cfb      	ldrb	r3, [r7, #19]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d15a      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80076fe:	4b2b      	ldr	r3, [pc, #172]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007708:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01e      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	429a      	cmp	r2, r3
 8007718:	d019      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800771a:	4b24      	ldr	r3, [pc, #144]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800771c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007724:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007726:	4b21      	ldr	r3, [pc, #132]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800772c:	4a1f      	ldr	r2, [pc, #124]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800772e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007736:	4b1d      	ldr	r3, [pc, #116]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800773c:	4a1b      	ldr	r2, [pc, #108]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800773e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007742:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007746:	4a19      	ldr	r2, [pc, #100]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d016      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007758:	f7fc f834 	bl	80037c4 <HAL_GetTick>
 800775c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800775e:	e00b      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007760:	f7fc f830 	bl	80037c4 <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800776e:	4293      	cmp	r3, r2
 8007770:	d902      	bls.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	74fb      	strb	r3, [r7, #19]
            break;
 8007776:	e006      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007778:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800777a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0ec      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007786:	7cfb      	ldrb	r3, [r7, #19]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10b      	bne.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800778c:	4b07      	ldr	r3, [pc, #28]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007792:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800779a:	4904      	ldr	r1, [pc, #16]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800779c:	4313      	orrs	r3, r2
 800779e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80077a2:	e009      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077a4:	7cfb      	ldrb	r3, [r7, #19]
 80077a6:	74bb      	strb	r3, [r7, #18]
 80077a8:	e006      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80077aa:	bf00      	nop
 80077ac:	40021000 	.word	0x40021000
 80077b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b4:	7cfb      	ldrb	r3, [r7, #19]
 80077b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077b8:	7c7b      	ldrb	r3, [r7, #17]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d105      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077be:	4b8d      	ldr	r3, [pc, #564]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80077c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077c2:	4a8c      	ldr	r2, [pc, #560]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80077c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077d6:	4b87      	ldr	r3, [pc, #540]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80077d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077dc:	f023 0203 	bic.w	r2, r3, #3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	4983      	ldr	r1, [pc, #524]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00a      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077f8:	4b7e      	ldr	r3, [pc, #504]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80077fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077fe:	f023 020c 	bic.w	r2, r3, #12
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007806:	497b      	ldr	r1, [pc, #492]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007808:	4313      	orrs	r3, r2
 800780a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800781a:	4b76      	ldr	r3, [pc, #472]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800781c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007820:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007828:	4972      	ldr	r1, [pc, #456]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800782a:	4313      	orrs	r3, r2
 800782c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0320 	and.w	r3, r3, #32
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800783c:	4b6d      	ldr	r3, [pc, #436]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800783e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007842:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784a:	496a      	ldr	r1, [pc, #424]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800784c:	4313      	orrs	r3, r2
 800784e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800785e:	4b65      	ldr	r3, [pc, #404]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007864:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800786c:	4961      	ldr	r1, [pc, #388]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800786e:	4313      	orrs	r3, r2
 8007870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00a      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007880:	4b5c      	ldr	r3, [pc, #368]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007886:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788e:	4959      	ldr	r1, [pc, #356]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007890:	4313      	orrs	r3, r2
 8007892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078a2:	4b54      	ldr	r3, [pc, #336]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80078a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b0:	4950      	ldr	r1, [pc, #320]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00a      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078c4:	4b4b      	ldr	r3, [pc, #300]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80078c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078d2:	4948      	ldr	r1, [pc, #288]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078e6:	4b43      	ldr	r3, [pc, #268]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80078e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f4:	493f      	ldr	r1, [pc, #252]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d028      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007908:	4b3a      	ldr	r3, [pc, #232]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800790a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800790e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007916:	4937      	ldr	r1, [pc, #220]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007918:	4313      	orrs	r3, r2
 800791a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007926:	d106      	bne.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007928:	4b32      	ldr	r3, [pc, #200]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	4a31      	ldr	r2, [pc, #196]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800792e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007932:	60d3      	str	r3, [r2, #12]
 8007934:	e011      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800793a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800793e:	d10c      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3304      	adds	r3, #4
 8007944:	2101      	movs	r1, #1
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f8b4 	bl	8007ab4 <RCCEx_PLLSAI1_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007950:	7cfb      	ldrb	r3, [r7, #19]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8007956:	7cfb      	ldrb	r3, [r7, #19]
 8007958:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d028      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007966:	4b23      	ldr	r3, [pc, #140]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800796c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007974:	491f      	ldr	r1, [pc, #124]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007976:	4313      	orrs	r3, r2
 8007978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007980:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007984:	d106      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007986:	4b1b      	ldr	r3, [pc, #108]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	4a1a      	ldr	r2, [pc, #104]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800798c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007990:	60d3      	str	r3, [r2, #12]
 8007992:	e011      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007998:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800799c:	d10c      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3304      	adds	r3, #4
 80079a2:	2101      	movs	r1, #1
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 f885 	bl	8007ab4 <RCCEx_PLLSAI1_Config>
 80079aa:	4603      	mov	r3, r0
 80079ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079ae:	7cfb      	ldrb	r3, [r7, #19]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80079b4:	7cfb      	ldrb	r3, [r7, #19]
 80079b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d02b      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079c4:	4b0b      	ldr	r3, [pc, #44]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80079c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d2:	4908      	ldr	r1, [pc, #32]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079e2:	d109      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079e4:	4b03      	ldr	r3, [pc, #12]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	4a02      	ldr	r2, [pc, #8]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80079ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079ee:	60d3      	str	r3, [r2, #12]
 80079f0:	e014      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80079f2:	bf00      	nop
 80079f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a00:	d10c      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3304      	adds	r3, #4
 8007a06:	2101      	movs	r1, #1
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 f853 	bl	8007ab4 <RCCEx_PLLSAI1_Config>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a12:	7cfb      	ldrb	r3, [r7, #19]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8007a18:	7cfb      	ldrb	r3, [r7, #19]
 8007a1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d01c      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a28:	4b19      	ldr	r3, [pc, #100]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a36:	4916      	ldr	r1, [pc, #88]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a46:	d10c      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	2102      	movs	r1, #2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f830 	bl	8007ab4 <RCCEx_PLLSAI1_Config>
 8007a54:	4603      	mov	r3, r0
 8007a56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a58:	7cfb      	ldrb	r3, [r7, #19]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8007a5e:	7cfb      	ldrb	r3, [r7, #19]
 8007a60:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a6e:	4b08      	ldr	r3, [pc, #32]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a74:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a7c:	4904      	ldr	r1, [pc, #16]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007a84:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	40021000 	.word	0x40021000

08007a94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007a98:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a04      	ldr	r2, [pc, #16]	@ (8007ab0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007a9e:	f043 0304 	orr.w	r3, r3, #4
 8007aa2:	6013      	str	r3, [r2, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40021000 	.word	0x40021000

08007ab4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007ac2:	4b74      	ldr	r3, [pc, #464]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d018      	beq.n	8007b00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007ace:	4b71      	ldr	r3, [pc, #452]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f003 0203 	and.w	r2, r3, #3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d10d      	bne.n	8007afa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
       ||
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d009      	beq.n	8007afa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007ae6:	4b6b      	ldr	r3, [pc, #428]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	091b      	lsrs	r3, r3, #4
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
       ||
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d047      	beq.n	8007b8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	73fb      	strb	r3, [r7, #15]
 8007afe:	e044      	b.n	8007b8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d018      	beq.n	8007b3a <RCCEx_PLLSAI1_Config+0x86>
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d825      	bhi.n	8007b58 <RCCEx_PLLSAI1_Config+0xa4>
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d002      	beq.n	8007b16 <RCCEx_PLLSAI1_Config+0x62>
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d009      	beq.n	8007b28 <RCCEx_PLLSAI1_Config+0x74>
 8007b14:	e020      	b.n	8007b58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007b16:	4b5f      	ldr	r3, [pc, #380]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d11d      	bne.n	8007b5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b26:	e01a      	b.n	8007b5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007b28:	4b5a      	ldr	r3, [pc, #360]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d116      	bne.n	8007b62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b38:	e013      	b.n	8007b62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007b3a:	4b56      	ldr	r3, [pc, #344]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10f      	bne.n	8007b66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007b46:	4b53      	ldr	r3, [pc, #332]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b56:	e006      	b.n	8007b66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b5c:	e004      	b.n	8007b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b5e:	bf00      	nop
 8007b60:	e002      	b.n	8007b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b62:	bf00      	nop
 8007b64:	e000      	b.n	8007b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b66:	bf00      	nop
    }

    if(status == HAL_OK)
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10d      	bne.n	8007b8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007b6e:	4b49      	ldr	r3, [pc, #292]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6819      	ldr	r1, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	430b      	orrs	r3, r1
 8007b84:	4943      	ldr	r1, [pc, #268]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d17c      	bne.n	8007c8a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007b90:	4b40      	ldr	r3, [pc, #256]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a3f      	ldr	r2, [pc, #252]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b9c:	f7fb fe12 	bl	80037c4 <HAL_GetTick>
 8007ba0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ba2:	e009      	b.n	8007bb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ba4:	f7fb fe0e 	bl	80037c4 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d902      	bls.n	8007bb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	73fb      	strb	r3, [r7, #15]
        break;
 8007bb6:	e005      	b.n	8007bc4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007bb8:	4b36      	ldr	r3, [pc, #216]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1ef      	bne.n	8007ba4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d15f      	bne.n	8007c8a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d110      	bne.n	8007bf2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bd0:	4b30      	ldr	r3, [pc, #192]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007bd8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6892      	ldr	r2, [r2, #8]
 8007be0:	0211      	lsls	r1, r2, #8
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	68d2      	ldr	r2, [r2, #12]
 8007be6:	06d2      	lsls	r2, r2, #27
 8007be8:	430a      	orrs	r2, r1
 8007bea:	492a      	ldr	r1, [pc, #168]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	610b      	str	r3, [r1, #16]
 8007bf0:	e027      	b.n	8007c42 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d112      	bne.n	8007c1e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bf8:	4b26      	ldr	r3, [pc, #152]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007c00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6892      	ldr	r2, [r2, #8]
 8007c08:	0211      	lsls	r1, r2, #8
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6912      	ldr	r2, [r2, #16]
 8007c0e:	0852      	lsrs	r2, r2, #1
 8007c10:	3a01      	subs	r2, #1
 8007c12:	0552      	lsls	r2, r2, #21
 8007c14:	430a      	orrs	r2, r1
 8007c16:	491f      	ldr	r1, [pc, #124]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	610b      	str	r3, [r1, #16]
 8007c1c:	e011      	b.n	8007c42 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007c26:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6892      	ldr	r2, [r2, #8]
 8007c2e:	0211      	lsls	r1, r2, #8
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6952      	ldr	r2, [r2, #20]
 8007c34:	0852      	lsrs	r2, r2, #1
 8007c36:	3a01      	subs	r2, #1
 8007c38:	0652      	lsls	r2, r2, #25
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	4915      	ldr	r1, [pc, #84]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007c42:	4b14      	ldr	r3, [pc, #80]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a13      	ldr	r2, [pc, #76]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c4e:	f7fb fdb9 	bl	80037c4 <HAL_GetTick>
 8007c52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c54:	e009      	b.n	8007c6a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c56:	f7fb fdb5 	bl	80037c4 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d902      	bls.n	8007c6a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	73fb      	strb	r3, [r7, #15]
          break;
 8007c68:	e005      	b.n	8007c76 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0ef      	beq.n	8007c56 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d106      	bne.n	8007c8a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007c7c:	4b05      	ldr	r3, [pc, #20]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c7e:	691a      	ldr	r2, [r3, #16]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	4903      	ldr	r1, [pc, #12]	@ (8007c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	40021000 	.word	0x40021000

08007c98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d079      	beq.n	8007d9e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d106      	bne.n	8007cc4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7fb f954 	bl	8002f6c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f003 0310 	and.w	r3, r3, #16
 8007cd6:	2b10      	cmp	r3, #16
 8007cd8:	d058      	beq.n	8007d8c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	22ca      	movs	r2, #202	@ 0xca
 8007ce0:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2253      	movs	r2, #83	@ 0x53
 8007ce8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f880 	bl	8007df0 <RTC_EnterInitMode>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d127      	bne.n	8007d4a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	6812      	ldr	r2, [r2, #0]
 8007d04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d0c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6899      	ldr	r1, [r3, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	431a      	orrs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	68d2      	ldr	r2, [r2, #12]
 8007d34:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6919      	ldr	r1, [r3, #16]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	041a      	lsls	r2, r3, #16
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f884 	bl	8007e58 <RTC_ExitInitMode>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d113      	bne.n	8007d82 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 0203 	bic.w	r2, r2, #3
 8007d68:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	69da      	ldr	r2, [r3, #28]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	22ff      	movs	r2, #255	@ 0xff
 8007d88:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d8a:	e001      	b.n	8007d90 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d103      	bne.n	8007d9e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a0d      	ldr	r2, [pc, #52]	@ (8007dec <HAL_RTC_WaitForSynchro+0x44>)
 8007db6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007db8:	f7fb fd04 	bl	80037c4 <HAL_GetTick>
 8007dbc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007dbe:	e009      	b.n	8007dd4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007dc0:	f7fb fd00 	bl	80037c4 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dce:	d901      	bls.n	8007dd4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e007      	b.n	8007de4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0ee      	beq.n	8007dc0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	0003ff5f 	.word	0x0003ff5f

08007df0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d120      	bne.n	8007e4c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007e14:	f7fb fcd6 	bl	80037c4 <HAL_GetTick>
 8007e18:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007e1a:	e00d      	b.n	8007e38 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007e1c:	f7fb fcd2 	bl	80037c4 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e2a:	d905      	bls.n	8007e38 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2203      	movs	r2, #3
 8007e34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <RTC_EnterInitMode+0x5c>
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d1e7      	bne.n	8007e1c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007e64:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed0 <RTC_ExitInitMode+0x78>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	4a19      	ldr	r2, [pc, #100]	@ (8007ed0 <RTC_ExitInitMode+0x78>)
 8007e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e6e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007e70:	4b17      	ldr	r3, [pc, #92]	@ (8007ed0 <RTC_ExitInitMode+0x78>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 0320 	and.w	r3, r3, #32
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10c      	bne.n	8007e96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff ff93 	bl	8007da8 <HAL_RTC_WaitForSynchro>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01e      	beq.n	8007ec6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2203      	movs	r2, #3
 8007e8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	73fb      	strb	r3, [r7, #15]
 8007e94:	e017      	b.n	8007ec6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e96:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed0 <RTC_ExitInitMode+0x78>)
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8007ed0 <RTC_ExitInitMode+0x78>)
 8007e9c:	f023 0320 	bic.w	r3, r3, #32
 8007ea0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff ff80 	bl	8007da8 <HAL_RTC_WaitForSynchro>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d005      	beq.n	8007eba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2203      	movs	r2, #3
 8007eb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007eba:	4b05      	ldr	r3, [pc, #20]	@ (8007ed0 <RTC_ExitInitMode+0x78>)
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	4a04      	ldr	r2, [pc, #16]	@ (8007ed0 <RTC_ExitInitMode+0x78>)
 8007ec0:	f043 0320 	orr.w	r3, r3, #32
 8007ec4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40002800 	.word	0x40002800

08007ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e095      	b.n	8008012 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d108      	bne.n	8007f00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ef6:	d009      	beq.n	8007f0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	61da      	str	r2, [r3, #28]
 8007efe:	e005      	b.n	8007f0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d106      	bne.n	8007f2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7fb f850 	bl	8002fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f4c:	d902      	bls.n	8007f54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60fb      	str	r3, [r7, #12]
 8007f52:	e002      	b.n	8007f5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007f58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007f62:	d007      	beq.n	8007f74 <HAL_SPI_Init+0xa0>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f6c:	d002      	beq.n	8007f74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	f003 0302 	and.w	r3, r3, #2
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	69db      	ldr	r3, [r3, #28]
 8007fa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fb6:	ea42 0103 	orr.w	r1, r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fbe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	0c1b      	lsrs	r3, r3, #16
 8007fd0:	f003 0204 	and.w	r2, r3, #4
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe2:	f003 0308 	and.w	r3, r3, #8
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ff0:	ea42 0103 	orr.w	r1, r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	430a      	orrs	r2, r1
 8008000:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e049      	b.n	80080c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	d106      	bne.n	8008046 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7fb f877 	bl	8003134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2202      	movs	r2, #2
 800804a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3304      	adds	r3, #4
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f000 fab5 	bl	80085c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d001      	beq.n	80080e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e03b      	b.n	8008158 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f042 0201 	orr.w	r2, r2, #1
 80080f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a19      	ldr	r2, [pc, #100]	@ (8008164 <HAL_TIM_Base_Start_IT+0x9c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d009      	beq.n	8008116 <HAL_TIM_Base_Start_IT+0x4e>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800810a:	d004      	beq.n	8008116 <HAL_TIM_Base_Start_IT+0x4e>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a15      	ldr	r2, [pc, #84]	@ (8008168 <HAL_TIM_Base_Start_IT+0xa0>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d115      	bne.n	8008142 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	4b13      	ldr	r3, [pc, #76]	@ (800816c <HAL_TIM_Base_Start_IT+0xa4>)
 800811e:	4013      	ands	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b06      	cmp	r3, #6
 8008126:	d015      	beq.n	8008154 <HAL_TIM_Base_Start_IT+0x8c>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800812e:	d011      	beq.n	8008154 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0201 	orr.w	r2, r2, #1
 800813e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008140:	e008      	b.n	8008154 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f042 0201 	orr.w	r2, r2, #1
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e000      	b.n	8008156 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008154:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	40012c00 	.word	0x40012c00
 8008168:	40014000 	.word	0x40014000
 800816c:	00010007 	.word	0x00010007

08008170 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e049      	b.n	8008216 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d106      	bne.n	800819c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7fa ff5a 	bl	8003050 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2202      	movs	r2, #2
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3304      	adds	r3, #4
 80081ac:	4619      	mov	r1, r3
 80081ae:	4610      	mov	r0, r2
 80081b0:	f000 fa0a 	bl	80085c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d020      	beq.n	8008282 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	2b00      	cmp	r3, #0
 8008248:	d01b      	beq.n	8008282 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f06f 0202 	mvn.w	r2, #2
 8008252:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	f003 0303 	and.w	r3, r3, #3
 8008264:	2b00      	cmp	r3, #0
 8008266:	d003      	beq.n	8008270 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f98f 	bl	800858c <HAL_TIM_IC_CaptureCallback>
 800826e:	e005      	b.n	800827c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f981 	bl	8008578 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f992 	bl	80085a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d020      	beq.n	80082ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	d01b      	beq.n	80082ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f06f 0204 	mvn.w	r2, #4
 800829e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f969 	bl	800858c <HAL_TIM_IC_CaptureCallback>
 80082ba:	e005      	b.n	80082c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f95b 	bl	8008578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f96c 	bl	80085a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f003 0308 	and.w	r3, r3, #8
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d020      	beq.n	800831a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f003 0308 	and.w	r3, r3, #8
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d01b      	beq.n	800831a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f06f 0208 	mvn.w	r2, #8
 80082ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2204      	movs	r2, #4
 80082f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d003      	beq.n	8008308 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f943 	bl	800858c <HAL_TIM_IC_CaptureCallback>
 8008306:	e005      	b.n	8008314 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f935 	bl	8008578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f946 	bl	80085a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f003 0310 	and.w	r3, r3, #16
 8008320:	2b00      	cmp	r3, #0
 8008322:	d020      	beq.n	8008366 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f003 0310 	and.w	r3, r3, #16
 800832a:	2b00      	cmp	r3, #0
 800832c:	d01b      	beq.n	8008366 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f06f 0210 	mvn.w	r2, #16
 8008336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2208      	movs	r2, #8
 800833c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f91d 	bl	800858c <HAL_TIM_IC_CaptureCallback>
 8008352:	e005      	b.n	8008360 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f90f 	bl	8008578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f920 	bl	80085a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00c      	beq.n	800838a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	d007      	beq.n	800838a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f06f 0201 	mvn.w	r2, #1
 8008382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f8ed 	bl	8008564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008390:	2b00      	cmp	r3, #0
 8008392:	d104      	bne.n	800839e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00c      	beq.n	80083b8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d007      	beq.n	80083b8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80083b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 faf4 	bl	80089a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00c      	beq.n	80083dc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d007      	beq.n	80083dc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80083d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 faec 	bl	80089b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00c      	beq.n	8008400 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d007      	beq.n	8008400 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f8da 	bl	80085b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00c      	beq.n	8008424 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f003 0320 	and.w	r3, r3, #32
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f06f 0220 	mvn.w	r2, #32
 800841c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fab4 	bl	800898c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008424:	bf00      	nop
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <HAL_TIM_IC_ConfigChannel+0x1e>
 8008446:	2302      	movs	r3, #2
 8008448:	e088      	b.n	800855c <HAL_TIM_IC_ConfigChannel+0x130>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d11b      	bne.n	8008490 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008468:	f000 f91e 	bl	80086a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 020c 	bic.w	r2, r2, #12
 800847a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6999      	ldr	r1, [r3, #24]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	619a      	str	r2, [r3, #24]
 800848e:	e060      	b.n	8008552 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b04      	cmp	r3, #4
 8008494:	d11c      	bne.n	80084d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80084a6:	f000 f955 	bl	8008754 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	699a      	ldr	r2, [r3, #24]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80084b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6999      	ldr	r1, [r3, #24]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	021a      	lsls	r2, r3, #8
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	619a      	str	r2, [r3, #24]
 80084ce:	e040      	b.n	8008552 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b08      	cmp	r3, #8
 80084d4:	d11b      	bne.n	800850e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80084e6:	f000 f972 	bl	80087ce <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69da      	ldr	r2, [r3, #28]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 020c 	bic.w	r2, r2, #12
 80084f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69d9      	ldr	r1, [r3, #28]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	61da      	str	r2, [r3, #28]
 800850c:	e021      	b.n	8008552 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b0c      	cmp	r3, #12
 8008512:	d11c      	bne.n	800854e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008524:	f000 f98f 	bl	8008846 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	69da      	ldr	r2, [r3, #28]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008536:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69d9      	ldr	r1, [r3, #28]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	021a      	lsls	r2, r3, #8
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	430a      	orrs	r2, r1
 800854a:	61da      	str	r2, [r3, #28]
 800854c:	e001      	b.n	8008552 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800855a:	7dfb      	ldrb	r3, [r7, #23]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a30      	ldr	r2, [pc, #192]	@ (800869c <TIM_Base_SetConfig+0xd4>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d003      	beq.n	80085e8 <TIM_Base_SetConfig+0x20>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085e6:	d108      	bne.n	80085fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a27      	ldr	r2, [pc, #156]	@ (800869c <TIM_Base_SetConfig+0xd4>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00b      	beq.n	800861a <TIM_Base_SetConfig+0x52>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008608:	d007      	beq.n	800861a <TIM_Base_SetConfig+0x52>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a24      	ldr	r2, [pc, #144]	@ (80086a0 <TIM_Base_SetConfig+0xd8>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d003      	beq.n	800861a <TIM_Base_SetConfig+0x52>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a23      	ldr	r2, [pc, #140]	@ (80086a4 <TIM_Base_SetConfig+0xdc>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d108      	bne.n	800862c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4313      	orrs	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a12      	ldr	r2, [pc, #72]	@ (800869c <TIM_Base_SetConfig+0xd4>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d007      	beq.n	8008668 <TIM_Base_SetConfig+0xa0>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a11      	ldr	r2, [pc, #68]	@ (80086a0 <TIM_Base_SetConfig+0xd8>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d003      	beq.n	8008668 <TIM_Base_SetConfig+0xa0>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a10      	ldr	r2, [pc, #64]	@ (80086a4 <TIM_Base_SetConfig+0xdc>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d103      	bne.n	8008670 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	691a      	ldr	r2, [r3, #16]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b01      	cmp	r3, #1
 8008680:	d105      	bne.n	800868e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	f023 0201 	bic.w	r2, r3, #1
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	611a      	str	r2, [r3, #16]
  }
}
 800868e:	bf00      	nop
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	40012c00 	.word	0x40012c00
 80086a0:	40014000 	.word	0x40014000
 80086a4:	40014400 	.word	0x40014400

080086a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	f023 0201 	bic.w	r2, r3, #1
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	4a1e      	ldr	r2, [pc, #120]	@ (800874c <TIM_TI1_SetConfig+0xa4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d007      	beq.n	80086e6 <TIM_TI1_SetConfig+0x3e>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086dc:	d003      	beq.n	80086e6 <TIM_TI1_SetConfig+0x3e>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4a1b      	ldr	r2, [pc, #108]	@ (8008750 <TIM_TI1_SetConfig+0xa8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d101      	bne.n	80086ea <TIM_TI1_SetConfig+0x42>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <TIM_TI1_SetConfig+0x44>
 80086ea:	2300      	movs	r3, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d008      	beq.n	8008702 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f023 0303 	bic.w	r3, r3, #3
 80086f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	617b      	str	r3, [r7, #20]
 8008700:	e003      	b.n	800870a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f043 0301 	orr.w	r3, r3, #1
 8008708:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	b2db      	uxtb	r3, r3
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	4313      	orrs	r3, r2
 800871c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	f023 030a 	bic.w	r3, r3, #10
 8008724:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f003 030a 	and.w	r3, r3, #10
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4313      	orrs	r3, r2
 8008730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	621a      	str	r2, [r3, #32]
}
 800873e:	bf00      	nop
 8008740:	371c      	adds	r7, #28
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	40012c00 	.word	0x40012c00
 8008750:	40014000 	.word	0x40014000

08008754 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	f023 0210 	bic.w	r2, r3, #16
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	031b      	lsls	r3, r3, #12
 8008798:	b29b      	uxth	r3, r3
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80087a6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	011b      	lsls	r3, r3, #4
 80087ac:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	621a      	str	r2, [r3, #32]
}
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b087      	sub	sp, #28
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f023 0303 	bic.w	r3, r3, #3
 80087fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4313      	orrs	r3, r2
 8008802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800880a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	011b      	lsls	r3, r3, #4
 8008810:	b2db      	uxtb	r3, r3
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	4313      	orrs	r3, r2
 8008816:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800881e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	4313      	orrs	r3, r2
 800882c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	621a      	str	r2, [r3, #32]
}
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008846:	b480      	push	{r7}
 8008848:	b087      	sub	sp, #28
 800884a:	af00      	add	r7, sp, #0
 800884c:	60f8      	str	r0, [r7, #12]
 800884e:	60b9      	str	r1, [r7, #8]
 8008850:	607a      	str	r2, [r7, #4]
 8008852:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	69db      	ldr	r3, [r3, #28]
 800886a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008872:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	021b      	lsls	r3, r3, #8
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4313      	orrs	r3, r2
 800887c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008884:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	031b      	lsls	r3, r3, #12
 800888a:	b29b      	uxth	r3, r3
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4313      	orrs	r3, r2
 8008890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008898:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	031b      	lsls	r3, r3, #12
 800889e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	621a      	str	r2, [r3, #32]
}
 80088b4:	bf00      	nop
 80088b6:	371c      	adds	r7, #28
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d101      	bne.n	80088d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088d4:	2302      	movs	r3, #2
 80088d6:	e04f      	b.n	8008978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a21      	ldr	r2, [pc, #132]	@ (8008984 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d108      	bne.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008908:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	4313      	orrs	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800891a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4313      	orrs	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a14      	ldr	r2, [pc, #80]	@ (8008984 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d009      	beq.n	800894c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008940:	d004      	beq.n	800894c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a10      	ldr	r2, [pc, #64]	@ (8008988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d10c      	bne.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008952:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	4313      	orrs	r3, r2
 800895c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	40012c00 	.word	0x40012c00
 8008988:	40014000 	.word	0x40014000

0800898c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e040      	b.n	8008a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d106      	bne.n	80089f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7fa fc1e 	bl	800322c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2224      	movs	r2, #36	@ 0x24
 80089f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f022 0201 	bic.w	r2, r2, #1
 8008a04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fe3a 	bl	8009688 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fbdd 	bl	80091d4 <UART_SetConfig>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e01b      	b.n	8008a5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f042 0201 	orr.w	r2, r2, #1
 8008a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 feb9 	bl	80097cc <UART_CheckIdleState>
 8008a5a:	4603      	mov	r3, r0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08a      	sub	sp, #40	@ 0x28
 8008a68:	af02      	add	r7, sp, #8
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	4613      	mov	r3, r2
 8008a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a78:	2b20      	cmp	r3, #32
 8008a7a:	d177      	bne.n	8008b6c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <HAL_UART_Transmit+0x24>
 8008a82:	88fb      	ldrh	r3, [r7, #6]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e070      	b.n	8008b6e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2221      	movs	r2, #33	@ 0x21
 8008a98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a9a:	f7fa fe93 	bl	80037c4 <HAL_GetTick>
 8008a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	88fa      	ldrh	r2, [r7, #6]
 8008aa4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	88fa      	ldrh	r2, [r7, #6]
 8008aac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ab8:	d108      	bne.n	8008acc <HAL_UART_Transmit+0x68>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d104      	bne.n	8008acc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	61bb      	str	r3, [r7, #24]
 8008aca:	e003      	b.n	8008ad4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ad4:	e02f      	b.n	8008b36 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2200      	movs	r2, #0
 8008ade:	2180      	movs	r1, #128	@ 0x80
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 ff1b 	bl	800991c <UART_WaitOnFlagUntilTimeout>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d004      	beq.n	8008af6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2220      	movs	r2, #32
 8008af0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e03b      	b.n	8008b6e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10b      	bne.n	8008b14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	881a      	ldrh	r2, [r3, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b08:	b292      	uxth	r2, r2
 8008b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	3302      	adds	r3, #2
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	e007      	b.n	8008b24 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	3301      	adds	r3, #1
 8008b22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1c9      	bne.n	8008ad6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2140      	movs	r1, #64	@ 0x40
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 fee5 	bl	800991c <UART_WaitOnFlagUntilTimeout>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d004      	beq.n	8008b62 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e005      	b.n	8008b6e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2220      	movs	r2, #32
 8008b66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e000      	b.n	8008b6e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008b6c:	2302      	movs	r3, #2
  }
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3720      	adds	r7, #32
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b0ba      	sub	sp, #232	@ 0xe8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008ba2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008bac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d115      	bne.n	8008be0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bb8:	f003 0320 	and.w	r3, r3, #32
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00f      	beq.n	8008be0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bc4:	f003 0320 	and.w	r3, r3, #32
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d009      	beq.n	8008be0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 82ca 	beq.w	800916a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
      }
      return;
 8008bde:	e2c4      	b.n	800916a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8117 	beq.w	8008e18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d106      	bne.n	8008c04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008bf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008bfa:	4b85      	ldr	r3, [pc, #532]	@ (8008e10 <HAL_UART_IRQHandler+0x298>)
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 810a 	beq.w	8008e18 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d011      	beq.n	8008c34 <HAL_UART_IRQHandler+0xbc>
 8008c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00b      	beq.n	8008c34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2201      	movs	r2, #1
 8008c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c2a:	f043 0201 	orr.w	r2, r3, #1
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c38:	f003 0302 	and.w	r3, r3, #2
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d011      	beq.n	8008c64 <HAL_UART_IRQHandler+0xec>
 8008c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00b      	beq.n	8008c64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2202      	movs	r2, #2
 8008c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c5a:	f043 0204 	orr.w	r2, r3, #4
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c68:	f003 0304 	and.w	r3, r3, #4
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d011      	beq.n	8008c94 <HAL_UART_IRQHandler+0x11c>
 8008c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2204      	movs	r2, #4
 8008c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c8a:	f043 0202 	orr.w	r2, r3, #2
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c98:	f003 0308 	and.w	r3, r3, #8
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d017      	beq.n	8008cd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d105      	bne.n	8008cb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00b      	beq.n	8008cd0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cc6:	f043 0208 	orr.w	r2, r3, #8
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d012      	beq.n	8008d02 <HAL_UART_IRQHandler+0x18a>
 8008cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00c      	beq.n	8008d02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cf8:	f043 0220 	orr.w	r2, r3, #32
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 8230 	beq.w	800916e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d12:	f003 0320 	and.w	r3, r3, #32
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00d      	beq.n	8008d36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d1e:	f003 0320 	and.w	r3, r3, #32
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d007      	beq.n	8008d36 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4a:	2b40      	cmp	r3, #64	@ 0x40
 8008d4c:	d005      	beq.n	8008d5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d04f      	beq.n	8008dfa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 ff12 	bl	8009b84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d6a:	2b40      	cmp	r3, #64	@ 0x40
 8008d6c:	d141      	bne.n	8008df2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3308      	adds	r3, #8
 8008d74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008d7c:	e853 3f00 	ldrex	r3, [r3]
 8008d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3308      	adds	r3, #8
 8008d96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008d9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008da6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008daa:	e841 2300 	strex	r3, r2, [r1]
 8008dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1d9      	bne.n	8008d6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d013      	beq.n	8008dea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dc6:	4a13      	ldr	r2, [pc, #76]	@ (8008e14 <HAL_UART_IRQHandler+0x29c>)
 8008dc8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fc fc34 	bl	800563c <HAL_DMA_Abort_IT>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d017      	beq.n	8008e0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008de4:	4610      	mov	r0, r2
 8008de6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de8:	e00f      	b.n	8008e0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f9e8 	bl	80091c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df0:	e00b      	b.n	8008e0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f9e4 	bl	80091c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df8:	e007      	b.n	8008e0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f9e0 	bl	80091c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008e08:	e1b1      	b.n	800916e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e0a:	bf00      	nop
    return;
 8008e0c:	e1af      	b.n	800916e <HAL_UART_IRQHandler+0x5f6>
 8008e0e:	bf00      	nop
 8008e10:	04000120 	.word	0x04000120
 8008e14:	08009e35 	.word	0x08009e35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	f040 816a 	bne.w	80090f6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e26:	f003 0310 	and.w	r3, r3, #16
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 8163 	beq.w	80090f6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e34:	f003 0310 	and.w	r3, r3, #16
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 815c 	beq.w	80090f6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2210      	movs	r2, #16
 8008e44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e50:	2b40      	cmp	r3, #64	@ 0x40
 8008e52:	f040 80d4 	bne.w	8008ffe <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 80ad 	beq.w	8008fc6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e76:	429a      	cmp	r2, r3
 8008e78:	f080 80a5 	bcs.w	8008fc6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0320 	and.w	r3, r3, #32
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f040 8086 	bne.w	8008fa4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ec6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1da      	bne.n	8008e98 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ef4:	f023 0301 	bic.w	r3, r3, #1
 8008ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3308      	adds	r3, #8
 8008f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e1      	bne.n	8008ee2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e3      	bne.n	8008f1e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f74:	f023 0310 	bic.w	r3, r3, #16
 8008f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1e4      	bne.n	8008f64 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fc fb0e 	bl	80055c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7f9 fd36 	bl	8002a30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008fc4:	e0d5      	b.n	8009172 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008fcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	f040 80ce 	bne.w	8009172 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	2b20      	cmp	r3, #32
 8008fe4:	f040 80c5 	bne.w	8009172 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7f9 fd1a 	bl	8002a30 <HAL_UARTEx_RxEventCallback>
      return;
 8008ffc:	e0b9      	b.n	8009172 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800900a:	b29b      	uxth	r3, r3
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009018:	b29b      	uxth	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80ab 	beq.w	8009176 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8009020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 80a6 	beq.w	8009176 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800903a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800903e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800904c:	647b      	str	r3, [r7, #68]	@ 0x44
 800904e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009054:	e841 2300 	strex	r3, r2, [r1]
 8009058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800905a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e4      	bne.n	800902a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3308      	adds	r3, #8
 8009066:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	623b      	str	r3, [r7, #32]
   return(result);
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	f023 0301 	bic.w	r3, r3, #1
 8009076:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009084:	633a      	str	r2, [r7, #48]	@ 0x30
 8009086:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800908a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800908c:	e841 2300 	strex	r3, r2, [r1]
 8009090:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e3      	bne.n	8009060 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2220      	movs	r2, #32
 800909c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f023 0310 	bic.w	r3, r3, #16
 80090c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090ce:	61fb      	str	r3, [r7, #28]
 80090d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	69b9      	ldr	r1, [r7, #24]
 80090d4:	69fa      	ldr	r2, [r7, #28]
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	617b      	str	r3, [r7, #20]
   return(result);
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e4      	bne.n	80090ac <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2202      	movs	r2, #2
 80090e6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7f9 fc9e 	bl	8002a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090f4:	e03f      	b.n	8009176 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00e      	beq.n	8009120 <HAL_UART_IRQHandler+0x5a8>
 8009102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d008      	beq.n	8009120 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009116:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fecb 	bl	8009eb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800911e:	e02d      	b.n	800917c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00e      	beq.n	800914a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800912c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009134:	2b00      	cmp	r3, #0
 8009136:	d008      	beq.n	800914a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01c      	beq.n	800917a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	4798      	blx	r3
    }
    return;
 8009148:	e017      	b.n	800917a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800914a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800914e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009152:	2b00      	cmp	r3, #0
 8009154:	d012      	beq.n	800917c <HAL_UART_IRQHandler+0x604>
 8009156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800915a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00c      	beq.n	800917c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fe7c 	bl	8009e60 <UART_EndTransmit_IT>
    return;
 8009168:	e008      	b.n	800917c <HAL_UART_IRQHandler+0x604>
      return;
 800916a:	bf00      	nop
 800916c:	e006      	b.n	800917c <HAL_UART_IRQHandler+0x604>
    return;
 800916e:	bf00      	nop
 8009170:	e004      	b.n	800917c <HAL_UART_IRQHandler+0x604>
      return;
 8009172:	bf00      	nop
 8009174:	e002      	b.n	800917c <HAL_UART_IRQHandler+0x604>
      return;
 8009176:	bf00      	nop
 8009178:	e000      	b.n	800917c <HAL_UART_IRQHandler+0x604>
    return;
 800917a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800917c:	37e8      	adds	r7, #232	@ 0xe8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop

08009184 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091d8:	b08a      	sub	sp, #40	@ 0x28
 80091da:	af00      	add	r7, sp, #0
 80091dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	689a      	ldr	r2, [r3, #8]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	431a      	orrs	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	431a      	orrs	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	4b9e      	ldr	r3, [pc, #632]	@ (800947c <UART_SetConfig+0x2a8>)
 8009204:	4013      	ands	r3, r2
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	6812      	ldr	r2, [r2, #0]
 800920a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800920c:	430b      	orrs	r3, r1
 800920e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	430a      	orrs	r2, r1
 8009224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a93      	ldr	r2, [pc, #588]	@ (8009480 <UART_SetConfig+0x2ac>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d004      	beq.n	8009240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800923c:	4313      	orrs	r3, r2
 800923e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009250:	430a      	orrs	r2, r1
 8009252:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a8a      	ldr	r2, [pc, #552]	@ (8009484 <UART_SetConfig+0x2b0>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d126      	bne.n	80092ac <UART_SetConfig+0xd8>
 800925e:	4b8a      	ldr	r3, [pc, #552]	@ (8009488 <UART_SetConfig+0x2b4>)
 8009260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009264:	f003 0303 	and.w	r3, r3, #3
 8009268:	2b03      	cmp	r3, #3
 800926a:	d81b      	bhi.n	80092a4 <UART_SetConfig+0xd0>
 800926c:	a201      	add	r2, pc, #4	@ (adr r2, 8009274 <UART_SetConfig+0xa0>)
 800926e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009272:	bf00      	nop
 8009274:	08009285 	.word	0x08009285
 8009278:	08009295 	.word	0x08009295
 800927c:	0800928d 	.word	0x0800928d
 8009280:	0800929d 	.word	0x0800929d
 8009284:	2301      	movs	r3, #1
 8009286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800928a:	e0ab      	b.n	80093e4 <UART_SetConfig+0x210>
 800928c:	2302      	movs	r3, #2
 800928e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009292:	e0a7      	b.n	80093e4 <UART_SetConfig+0x210>
 8009294:	2304      	movs	r3, #4
 8009296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800929a:	e0a3      	b.n	80093e4 <UART_SetConfig+0x210>
 800929c:	2308      	movs	r3, #8
 800929e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092a2:	e09f      	b.n	80093e4 <UART_SetConfig+0x210>
 80092a4:	2310      	movs	r3, #16
 80092a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092aa:	e09b      	b.n	80093e4 <UART_SetConfig+0x210>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a76      	ldr	r2, [pc, #472]	@ (800948c <UART_SetConfig+0x2b8>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d138      	bne.n	8009328 <UART_SetConfig+0x154>
 80092b6:	4b74      	ldr	r3, [pc, #464]	@ (8009488 <UART_SetConfig+0x2b4>)
 80092b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092bc:	f003 030c 	and.w	r3, r3, #12
 80092c0:	2b0c      	cmp	r3, #12
 80092c2:	d82d      	bhi.n	8009320 <UART_SetConfig+0x14c>
 80092c4:	a201      	add	r2, pc, #4	@ (adr r2, 80092cc <UART_SetConfig+0xf8>)
 80092c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ca:	bf00      	nop
 80092cc:	08009301 	.word	0x08009301
 80092d0:	08009321 	.word	0x08009321
 80092d4:	08009321 	.word	0x08009321
 80092d8:	08009321 	.word	0x08009321
 80092dc:	08009311 	.word	0x08009311
 80092e0:	08009321 	.word	0x08009321
 80092e4:	08009321 	.word	0x08009321
 80092e8:	08009321 	.word	0x08009321
 80092ec:	08009309 	.word	0x08009309
 80092f0:	08009321 	.word	0x08009321
 80092f4:	08009321 	.word	0x08009321
 80092f8:	08009321 	.word	0x08009321
 80092fc:	08009319 	.word	0x08009319
 8009300:	2300      	movs	r3, #0
 8009302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009306:	e06d      	b.n	80093e4 <UART_SetConfig+0x210>
 8009308:	2302      	movs	r3, #2
 800930a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800930e:	e069      	b.n	80093e4 <UART_SetConfig+0x210>
 8009310:	2304      	movs	r3, #4
 8009312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009316:	e065      	b.n	80093e4 <UART_SetConfig+0x210>
 8009318:	2308      	movs	r3, #8
 800931a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800931e:	e061      	b.n	80093e4 <UART_SetConfig+0x210>
 8009320:	2310      	movs	r3, #16
 8009322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009326:	e05d      	b.n	80093e4 <UART_SetConfig+0x210>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a58      	ldr	r2, [pc, #352]	@ (8009490 <UART_SetConfig+0x2bc>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d125      	bne.n	800937e <UART_SetConfig+0x1aa>
 8009332:	4b55      	ldr	r3, [pc, #340]	@ (8009488 <UART_SetConfig+0x2b4>)
 8009334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009338:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800933c:	2b30      	cmp	r3, #48	@ 0x30
 800933e:	d016      	beq.n	800936e <UART_SetConfig+0x19a>
 8009340:	2b30      	cmp	r3, #48	@ 0x30
 8009342:	d818      	bhi.n	8009376 <UART_SetConfig+0x1a2>
 8009344:	2b20      	cmp	r3, #32
 8009346:	d00a      	beq.n	800935e <UART_SetConfig+0x18a>
 8009348:	2b20      	cmp	r3, #32
 800934a:	d814      	bhi.n	8009376 <UART_SetConfig+0x1a2>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <UART_SetConfig+0x182>
 8009350:	2b10      	cmp	r3, #16
 8009352:	d008      	beq.n	8009366 <UART_SetConfig+0x192>
 8009354:	e00f      	b.n	8009376 <UART_SetConfig+0x1a2>
 8009356:	2300      	movs	r3, #0
 8009358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800935c:	e042      	b.n	80093e4 <UART_SetConfig+0x210>
 800935e:	2302      	movs	r3, #2
 8009360:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009364:	e03e      	b.n	80093e4 <UART_SetConfig+0x210>
 8009366:	2304      	movs	r3, #4
 8009368:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800936c:	e03a      	b.n	80093e4 <UART_SetConfig+0x210>
 800936e:	2308      	movs	r3, #8
 8009370:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009374:	e036      	b.n	80093e4 <UART_SetConfig+0x210>
 8009376:	2310      	movs	r3, #16
 8009378:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800937c:	e032      	b.n	80093e4 <UART_SetConfig+0x210>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a3f      	ldr	r2, [pc, #252]	@ (8009480 <UART_SetConfig+0x2ac>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d12a      	bne.n	80093de <UART_SetConfig+0x20a>
 8009388:	4b3f      	ldr	r3, [pc, #252]	@ (8009488 <UART_SetConfig+0x2b4>)
 800938a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800938e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009392:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009396:	d01a      	beq.n	80093ce <UART_SetConfig+0x1fa>
 8009398:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800939c:	d81b      	bhi.n	80093d6 <UART_SetConfig+0x202>
 800939e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093a2:	d00c      	beq.n	80093be <UART_SetConfig+0x1ea>
 80093a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093a8:	d815      	bhi.n	80093d6 <UART_SetConfig+0x202>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d003      	beq.n	80093b6 <UART_SetConfig+0x1e2>
 80093ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093b2:	d008      	beq.n	80093c6 <UART_SetConfig+0x1f2>
 80093b4:	e00f      	b.n	80093d6 <UART_SetConfig+0x202>
 80093b6:	2300      	movs	r3, #0
 80093b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093bc:	e012      	b.n	80093e4 <UART_SetConfig+0x210>
 80093be:	2302      	movs	r3, #2
 80093c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093c4:	e00e      	b.n	80093e4 <UART_SetConfig+0x210>
 80093c6:	2304      	movs	r3, #4
 80093c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093cc:	e00a      	b.n	80093e4 <UART_SetConfig+0x210>
 80093ce:	2308      	movs	r3, #8
 80093d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093d4:	e006      	b.n	80093e4 <UART_SetConfig+0x210>
 80093d6:	2310      	movs	r3, #16
 80093d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093dc:	e002      	b.n	80093e4 <UART_SetConfig+0x210>
 80093de:	2310      	movs	r3, #16
 80093e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a25      	ldr	r2, [pc, #148]	@ (8009480 <UART_SetConfig+0x2ac>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	f040 808a 	bne.w	8009504 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80093f4:	2b08      	cmp	r3, #8
 80093f6:	d824      	bhi.n	8009442 <UART_SetConfig+0x26e>
 80093f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009400 <UART_SetConfig+0x22c>)
 80093fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fe:	bf00      	nop
 8009400:	08009425 	.word	0x08009425
 8009404:	08009443 	.word	0x08009443
 8009408:	0800942d 	.word	0x0800942d
 800940c:	08009443 	.word	0x08009443
 8009410:	08009433 	.word	0x08009433
 8009414:	08009443 	.word	0x08009443
 8009418:	08009443 	.word	0x08009443
 800941c:	08009443 	.word	0x08009443
 8009420:	0800943b 	.word	0x0800943b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009424:	f7fe f860 	bl	80074e8 <HAL_RCC_GetPCLK1Freq>
 8009428:	61f8      	str	r0, [r7, #28]
        break;
 800942a:	e010      	b.n	800944e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800942c:	4b19      	ldr	r3, [pc, #100]	@ (8009494 <UART_SetConfig+0x2c0>)
 800942e:	61fb      	str	r3, [r7, #28]
        break;
 8009430:	e00d      	b.n	800944e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009432:	f7fd ffc1 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 8009436:	61f8      	str	r0, [r7, #28]
        break;
 8009438:	e009      	b.n	800944e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800943a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800943e:	61fb      	str	r3, [r7, #28]
        break;
 8009440:	e005      	b.n	800944e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800944c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8109 	beq.w	8009668 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	4613      	mov	r3, r2
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	4413      	add	r3, r2
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	429a      	cmp	r2, r3
 8009464:	d305      	bcc.n	8009472 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800946c:	69fa      	ldr	r2, [r7, #28]
 800946e:	429a      	cmp	r2, r3
 8009470:	d912      	bls.n	8009498 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009478:	e0f6      	b.n	8009668 <UART_SetConfig+0x494>
 800947a:	bf00      	nop
 800947c:	efff69f3 	.word	0xefff69f3
 8009480:	40008000 	.word	0x40008000
 8009484:	40013800 	.word	0x40013800
 8009488:	40021000 	.word	0x40021000
 800948c:	40004400 	.word	0x40004400
 8009490:	40004800 	.word	0x40004800
 8009494:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	2200      	movs	r2, #0
 800949c:	461c      	mov	r4, r3
 800949e:	4615      	mov	r5, r2
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	f04f 0300 	mov.w	r3, #0
 80094a8:	022b      	lsls	r3, r5, #8
 80094aa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80094ae:	0222      	lsls	r2, r4, #8
 80094b0:	68f9      	ldr	r1, [r7, #12]
 80094b2:	6849      	ldr	r1, [r1, #4]
 80094b4:	0849      	lsrs	r1, r1, #1
 80094b6:	2000      	movs	r0, #0
 80094b8:	4688      	mov	r8, r1
 80094ba:	4681      	mov	r9, r0
 80094bc:	eb12 0a08 	adds.w	sl, r2, r8
 80094c0:	eb43 0b09 	adc.w	fp, r3, r9
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	603b      	str	r3, [r7, #0]
 80094cc:	607a      	str	r2, [r7, #4]
 80094ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d2:	4650      	mov	r0, sl
 80094d4:	4659      	mov	r1, fp
 80094d6:	f7f7 fbd7 	bl	8000c88 <__aeabi_uldivmod>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	4613      	mov	r3, r2
 80094e0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094e8:	d308      	bcc.n	80094fc <UART_SetConfig+0x328>
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094f0:	d204      	bcs.n	80094fc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	60da      	str	r2, [r3, #12]
 80094fa:	e0b5      	b.n	8009668 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009502:	e0b1      	b.n	8009668 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800950c:	d15d      	bne.n	80095ca <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800950e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009512:	2b08      	cmp	r3, #8
 8009514:	d827      	bhi.n	8009566 <UART_SetConfig+0x392>
 8009516:	a201      	add	r2, pc, #4	@ (adr r2, 800951c <UART_SetConfig+0x348>)
 8009518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951c:	08009541 	.word	0x08009541
 8009520:	08009549 	.word	0x08009549
 8009524:	08009551 	.word	0x08009551
 8009528:	08009567 	.word	0x08009567
 800952c:	08009557 	.word	0x08009557
 8009530:	08009567 	.word	0x08009567
 8009534:	08009567 	.word	0x08009567
 8009538:	08009567 	.word	0x08009567
 800953c:	0800955f 	.word	0x0800955f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009540:	f7fd ffd2 	bl	80074e8 <HAL_RCC_GetPCLK1Freq>
 8009544:	61f8      	str	r0, [r7, #28]
        break;
 8009546:	e014      	b.n	8009572 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009548:	f7fd ffe4 	bl	8007514 <HAL_RCC_GetPCLK2Freq>
 800954c:	61f8      	str	r0, [r7, #28]
        break;
 800954e:	e010      	b.n	8009572 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009550:	4b4c      	ldr	r3, [pc, #304]	@ (8009684 <UART_SetConfig+0x4b0>)
 8009552:	61fb      	str	r3, [r7, #28]
        break;
 8009554:	e00d      	b.n	8009572 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009556:	f7fd ff2f 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 800955a:	61f8      	str	r0, [r7, #28]
        break;
 800955c:	e009      	b.n	8009572 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800955e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009562:	61fb      	str	r3, [r7, #28]
        break;
 8009564:	e005      	b.n	8009572 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009566:	2300      	movs	r3, #0
 8009568:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009570:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d077      	beq.n	8009668 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	005a      	lsls	r2, r3, #1
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	085b      	lsrs	r3, r3, #1
 8009582:	441a      	add	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	fbb2 f3f3 	udiv	r3, r2, r3
 800958c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b0f      	cmp	r3, #15
 8009592:	d916      	bls.n	80095c2 <UART_SetConfig+0x3ee>
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800959a:	d212      	bcs.n	80095c2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	b29b      	uxth	r3, r3
 80095a0:	f023 030f 	bic.w	r3, r3, #15
 80095a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	085b      	lsrs	r3, r3, #1
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	f003 0307 	and.w	r3, r3, #7
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	8afb      	ldrh	r3, [r7, #22]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	8afa      	ldrh	r2, [r7, #22]
 80095be:	60da      	str	r2, [r3, #12]
 80095c0:	e052      	b.n	8009668 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80095c8:	e04e      	b.n	8009668 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80095ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80095ce:	2b08      	cmp	r3, #8
 80095d0:	d827      	bhi.n	8009622 <UART_SetConfig+0x44e>
 80095d2:	a201      	add	r2, pc, #4	@ (adr r2, 80095d8 <UART_SetConfig+0x404>)
 80095d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d8:	080095fd 	.word	0x080095fd
 80095dc:	08009605 	.word	0x08009605
 80095e0:	0800960d 	.word	0x0800960d
 80095e4:	08009623 	.word	0x08009623
 80095e8:	08009613 	.word	0x08009613
 80095ec:	08009623 	.word	0x08009623
 80095f0:	08009623 	.word	0x08009623
 80095f4:	08009623 	.word	0x08009623
 80095f8:	0800961b 	.word	0x0800961b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095fc:	f7fd ff74 	bl	80074e8 <HAL_RCC_GetPCLK1Freq>
 8009600:	61f8      	str	r0, [r7, #28]
        break;
 8009602:	e014      	b.n	800962e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009604:	f7fd ff86 	bl	8007514 <HAL_RCC_GetPCLK2Freq>
 8009608:	61f8      	str	r0, [r7, #28]
        break;
 800960a:	e010      	b.n	800962e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800960c:	4b1d      	ldr	r3, [pc, #116]	@ (8009684 <UART_SetConfig+0x4b0>)
 800960e:	61fb      	str	r3, [r7, #28]
        break;
 8009610:	e00d      	b.n	800962e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009612:	f7fd fed1 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 8009616:	61f8      	str	r0, [r7, #28]
        break;
 8009618:	e009      	b.n	800962e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800961a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800961e:	61fb      	str	r3, [r7, #28]
        break;
 8009620:	e005      	b.n	800962e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8009622:	2300      	movs	r3, #0
 8009624:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800962c:	bf00      	nop
    }

    if (pclk != 0U)
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d019      	beq.n	8009668 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	085a      	lsrs	r2, r3, #1
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	441a      	add	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	fbb2 f3f3 	udiv	r3, r2, r3
 8009646:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	2b0f      	cmp	r3, #15
 800964c:	d909      	bls.n	8009662 <UART_SetConfig+0x48e>
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009654:	d205      	bcs.n	8009662 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	b29a      	uxth	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	60da      	str	r2, [r3, #12]
 8009660:	e002      	b.n	8009668 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009674:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009678:	4618      	mov	r0, r3
 800967a:	3728      	adds	r7, #40	@ 0x28
 800967c:	46bd      	mov	sp, r7
 800967e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009682:	bf00      	nop
 8009684:	00f42400 	.word	0x00f42400

08009688 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009694:	f003 0308 	and.w	r3, r3, #8
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00a      	beq.n	80096b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	430a      	orrs	r2, r1
 80096b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00a      	beq.n	80096d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d8:	f003 0302 	and.w	r3, r3, #2
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00a      	beq.n	80096f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096fa:	f003 0304 	and.w	r3, r3, #4
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	430a      	orrs	r2, r1
 8009716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800971c:	f003 0310 	and.w	r3, r3, #16
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00a      	beq.n	800973a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	430a      	orrs	r2, r1
 8009738:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973e:	f003 0320 	and.w	r3, r3, #32
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00a      	beq.n	800975c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	430a      	orrs	r2, r1
 800975a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009764:	2b00      	cmp	r3, #0
 8009766:	d01a      	beq.n	800979e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	430a      	orrs	r2, r1
 800977c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009782:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009786:	d10a      	bne.n	800979e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	430a      	orrs	r2, r1
 800979c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	430a      	orrs	r2, r1
 80097be:	605a      	str	r2, [r3, #4]
  }
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b098      	sub	sp, #96	@ 0x60
 80097d0:	af02      	add	r7, sp, #8
 80097d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097dc:	f7f9 fff2 	bl	80037c4 <HAL_GetTick>
 80097e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0308 	and.w	r3, r3, #8
 80097ec:	2b08      	cmp	r3, #8
 80097ee:	d12e      	bne.n	800984e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097f8:	2200      	movs	r2, #0
 80097fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f88c 	bl	800991c <UART_WaitOnFlagUntilTimeout>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d021      	beq.n	800984e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009812:	e853 3f00 	ldrex	r3, [r3]
 8009816:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800981a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800981e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	461a      	mov	r2, r3
 8009826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009828:	647b      	str	r3, [r7, #68]	@ 0x44
 800982a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800982e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009830:	e841 2300 	strex	r3, r2, [r1]
 8009834:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1e6      	bne.n	800980a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2220      	movs	r2, #32
 8009840:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e062      	b.n	8009914 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b04      	cmp	r3, #4
 800985a:	d149      	bne.n	80098f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800985c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009864:	2200      	movs	r2, #0
 8009866:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f856 	bl	800991c <UART_WaitOnFlagUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d03c      	beq.n	80098f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987e:	e853 3f00 	ldrex	r3, [r3]
 8009882:	623b      	str	r3, [r7, #32]
   return(result);
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800988a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	461a      	mov	r2, r3
 8009892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009894:	633b      	str	r3, [r7, #48]	@ 0x30
 8009896:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009898:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800989a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800989c:	e841 2300 	strex	r3, r2, [r1]
 80098a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e6      	bne.n	8009876 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	3308      	adds	r3, #8
 80098ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	e853 3f00 	ldrex	r3, [r3]
 80098b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f023 0301 	bic.w	r3, r3, #1
 80098be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3308      	adds	r3, #8
 80098c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098c8:	61fa      	str	r2, [r7, #28]
 80098ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098cc:	69b9      	ldr	r1, [r7, #24]
 80098ce:	69fa      	ldr	r2, [r7, #28]
 80098d0:	e841 2300 	strex	r3, r2, [r1]
 80098d4:	617b      	str	r3, [r7, #20]
   return(result);
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1e5      	bne.n	80098a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098ec:	2303      	movs	r3, #3
 80098ee:	e011      	b.n	8009914 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2220      	movs	r2, #32
 80098f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3758      	adds	r7, #88	@ 0x58
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	603b      	str	r3, [r7, #0]
 8009928:	4613      	mov	r3, r2
 800992a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800992c:	e04f      	b.n	80099ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009934:	d04b      	beq.n	80099ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009936:	f7f9 ff45 	bl	80037c4 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	429a      	cmp	r2, r3
 8009944:	d302      	bcc.n	800994c <UART_WaitOnFlagUntilTimeout+0x30>
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800994c:	2303      	movs	r3, #3
 800994e:	e04e      	b.n	80099ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0304 	and.w	r3, r3, #4
 800995a:	2b00      	cmp	r3, #0
 800995c:	d037      	beq.n	80099ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	2b80      	cmp	r3, #128	@ 0x80
 8009962:	d034      	beq.n	80099ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2b40      	cmp	r3, #64	@ 0x40
 8009968:	d031      	beq.n	80099ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	69db      	ldr	r3, [r3, #28]
 8009970:	f003 0308 	and.w	r3, r3, #8
 8009974:	2b08      	cmp	r3, #8
 8009976:	d110      	bne.n	800999a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2208      	movs	r2, #8
 800997e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 f8ff 	bl	8009b84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2208      	movs	r2, #8
 800998a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e029      	b.n	80099ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099a8:	d111      	bne.n	80099ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 f8e5 	bl	8009b84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2220      	movs	r2, #32
 80099be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e00f      	b.n	80099ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	69da      	ldr	r2, [r3, #28]
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	4013      	ands	r3, r2
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	429a      	cmp	r2, r3
 80099dc:	bf0c      	ite	eq
 80099de:	2301      	moveq	r3, #1
 80099e0:	2300      	movne	r3, #0
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	461a      	mov	r2, r3
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d0a0      	beq.n	800992e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b096      	sub	sp, #88	@ 0x58
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	4613      	mov	r3, r2
 8009a04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	88fa      	ldrh	r2, [r7, #6]
 8009a10:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2222      	movs	r2, #34	@ 0x22
 8009a20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d028      	beq.n	8009a7e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a30:	4a3e      	ldr	r2, [pc, #248]	@ (8009b2c <UART_Start_Receive_DMA+0x134>)
 8009a32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a38:	4a3d      	ldr	r2, [pc, #244]	@ (8009b30 <UART_Start_Receive_DMA+0x138>)
 8009a3a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a40:	4a3c      	ldr	r2, [pc, #240]	@ (8009b34 <UART_Start_Receive_DMA+0x13c>)
 8009a42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a48:	2200      	movs	r2, #0
 8009a4a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3324      	adds	r3, #36	@ 0x24
 8009a56:	4619      	mov	r1, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	88fb      	ldrh	r3, [r7, #6]
 8009a60:	f7fb fd4e 	bl	8005500 <HAL_DMA_Start_IT>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d009      	beq.n	8009a7e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2210      	movs	r2, #16
 8009a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2220      	movs	r2, #32
 8009a76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e051      	b.n	8009b22 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d018      	beq.n	8009ab8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aa6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009aaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e6      	bne.n	8009a86 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3308      	adds	r3, #8
 8009abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac2:	e853 3f00 	ldrex	r3, [r3]
 8009ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	f043 0301 	orr.w	r3, r3, #1
 8009ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ad8:	637a      	str	r2, [r7, #52]	@ 0x34
 8009ada:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ade:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ae0:	e841 2300 	strex	r3, r2, [r1]
 8009ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e5      	bne.n	8009ab8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3308      	adds	r3, #8
 8009af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	e853 3f00 	ldrex	r3, [r3]
 8009afa:	613b      	str	r3, [r7, #16]
   return(result);
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3308      	adds	r3, #8
 8009b0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b0c:	623a      	str	r2, [r7, #32]
 8009b0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b10:	69f9      	ldr	r1, [r7, #28]
 8009b12:	6a3a      	ldr	r2, [r7, #32]
 8009b14:	e841 2300 	strex	r3, r2, [r1]
 8009b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e5      	bne.n	8009aec <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3758      	adds	r7, #88	@ 0x58
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	08009c4d 	.word	0x08009c4d
 8009b30:	08009d79 	.word	0x08009d79
 8009b34:	08009db7 	.word	0x08009db7

08009b38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b089      	sub	sp, #36	@ 0x24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	e853 3f00 	ldrex	r3, [r3]
 8009b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b54:	61fb      	str	r3, [r7, #28]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	61bb      	str	r3, [r7, #24]
 8009b60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b62:	6979      	ldr	r1, [r7, #20]
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	e841 2300 	strex	r3, r2, [r1]
 8009b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1e6      	bne.n	8009b40 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2220      	movs	r2, #32
 8009b76:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009b78:	bf00      	nop
 8009b7a:	3724      	adds	r7, #36	@ 0x24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b095      	sub	sp, #84	@ 0x54
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009baa:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bb2:	e841 2300 	strex	r3, r2, [r1]
 8009bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e6      	bne.n	8009b8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	e853 3f00 	ldrex	r3, [r3]
 8009bcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	f023 0301 	bic.w	r3, r3, #1
 8009bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3308      	adds	r3, #8
 8009bdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009be0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009be4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009be6:	e841 2300 	strex	r3, r2, [r1]
 8009bea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1e5      	bne.n	8009bbe <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d118      	bne.n	8009c2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	e853 3f00 	ldrex	r3, [r3]
 8009c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	f023 0310 	bic.w	r3, r3, #16
 8009c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	461a      	mov	r2, r3
 8009c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c18:	61bb      	str	r3, [r7, #24]
 8009c1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1c:	6979      	ldr	r1, [r7, #20]
 8009c1e:	69ba      	ldr	r2, [r7, #24]
 8009c20:	e841 2300 	strex	r3, r2, [r1]
 8009c24:	613b      	str	r3, [r7, #16]
   return(result);
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1e6      	bne.n	8009bfa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2220      	movs	r2, #32
 8009c30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009c40:	bf00      	nop
 8009c42:	3754      	adds	r7, #84	@ 0x54
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b09c      	sub	sp, #112	@ 0x70
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c58:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0320 	and.w	r3, r3, #32
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d171      	bne.n	8009d4c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c96:	e841 2300 	strex	r3, r2, [r1]
 8009c9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1e6      	bne.n	8009c70 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cac:	e853 3f00 	ldrex	r3, [r3]
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb4:	f023 0301 	bic.w	r3, r3, #1
 8009cb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3308      	adds	r3, #8
 8009cc0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009cc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8009cc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cca:	e841 2300 	strex	r3, r2, [r1]
 8009cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1e5      	bne.n	8009ca2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3308      	adds	r3, #8
 8009cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce0:	e853 3f00 	ldrex	r3, [r3]
 8009ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cec:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3308      	adds	r3, #8
 8009cf4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009cf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e5      	bne.n	8009cd6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d118      	bne.n	8009d4c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	e853 3f00 	ldrex	r3, [r3]
 8009d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f023 0310 	bic.w	r3, r3, #16
 8009d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	461a      	mov	r2, r3
 8009d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d38:	61fb      	str	r3, [r7, #28]
 8009d3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3c:	69b9      	ldr	r1, [r7, #24]
 8009d3e:	69fa      	ldr	r2, [r7, #28]
 8009d40:	e841 2300 	strex	r3, r2, [r1]
 8009d44:	617b      	str	r3, [r7, #20]
   return(result);
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1e6      	bne.n	8009d1a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d4e:	2200      	movs	r2, #0
 8009d50:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d107      	bne.n	8009d6a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009d60:	4619      	mov	r1, r3
 8009d62:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009d64:	f7f8 fe64 	bl	8002a30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d68:	e002      	b.n	8009d70 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009d6a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009d6c:	f7ff fa14 	bl	8009198 <HAL_UART_RxCpltCallback>
}
 8009d70:	bf00      	nop
 8009d72:	3770      	adds	r7, #112	@ 0x70
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d84:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d109      	bne.n	8009da8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009d9a:	085b      	lsrs	r3, r3, #1
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	4619      	mov	r1, r3
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f7f8 fe45 	bl	8002a30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009da6:	e002      	b.n	8009dae <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f7ff f9ff 	bl	80091ac <HAL_UART_RxHalfCpltCallback>
}
 8009dae:	bf00      	nop
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b086      	sub	sp, #24
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009dc8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dd0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ddc:	2b80      	cmp	r3, #128	@ 0x80
 8009dde:	d109      	bne.n	8009df4 <UART_DMAError+0x3e>
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	2b21      	cmp	r3, #33	@ 0x21
 8009de4:	d106      	bne.n	8009df4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009dee:	6978      	ldr	r0, [r7, #20]
 8009df0:	f7ff fea2 	bl	8009b38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dfe:	2b40      	cmp	r3, #64	@ 0x40
 8009e00:	d109      	bne.n	8009e16 <UART_DMAError+0x60>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2b22      	cmp	r3, #34	@ 0x22
 8009e06:	d106      	bne.n	8009e16 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009e10:	6978      	ldr	r0, [r7, #20]
 8009e12:	f7ff feb7 	bl	8009b84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e1c:	f043 0210 	orr.w	r2, r3, #16
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e26:	6978      	ldr	r0, [r7, #20]
 8009e28:	f7ff f9ca 	bl	80091c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e2c:	bf00      	nop
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f7ff f9b4 	bl	80091c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e58:	bf00      	nop
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	e853 3f00 	ldrex	r3, [r3]
 8009e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e7c:	61fb      	str	r3, [r7, #28]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	61bb      	str	r3, [r7, #24]
 8009e88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8a:	6979      	ldr	r1, [r7, #20]
 8009e8c:	69ba      	ldr	r2, [r7, #24]
 8009e8e:	e841 2300 	strex	r3, r2, [r1]
 8009e92:	613b      	str	r3, [r7, #16]
   return(result);
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1e6      	bne.n	8009e68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff f96c 	bl	8009184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eac:	bf00      	nop
 8009eae:	3720      	adds	r7, #32
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08c      	sub	sp, #48	@ 0x30
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009edc:	2b20      	cmp	r3, #32
 8009ede:	d142      	bne.n	8009f66 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d002      	beq.n	8009eec <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009ee6:	88fb      	ldrh	r3, [r7, #6]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e03b      	b.n	8009f68 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009efc:	88fb      	ldrh	r3, [r7, #6]
 8009efe:	461a      	mov	r2, r3
 8009f00:	68b9      	ldr	r1, [r7, #8]
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f7ff fd78 	bl	80099f8 <UART_Start_Receive_DMA>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d124      	bne.n	8009f60 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d11d      	bne.n	8009f5a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2210      	movs	r2, #16
 8009f24:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	e853 3f00 	ldrex	r3, [r3]
 8009f32:	617b      	str	r3, [r7, #20]
   return(result);
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	f043 0310 	orr.w	r3, r3, #16
 8009f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	461a      	mov	r2, r3
 8009f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f46:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f48:	6a39      	ldr	r1, [r7, #32]
 8009f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f4c:	e841 2300 	strex	r3, r2, [r1]
 8009f50:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1e6      	bne.n	8009f26 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009f58:	e002      	b.n	8009f60 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009f60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f64:	e000      	b.n	8009f68 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009f66:	2302      	movs	r3, #2
  }
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3730      	adds	r7, #48	@ 0x30
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <__cvt>:
 8009f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	ec57 6b10 	vmov	r6, r7, d0
 8009f78:	2f00      	cmp	r7, #0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	463b      	mov	r3, r7
 8009f80:	bfbb      	ittet	lt
 8009f82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f86:	461f      	movlt	r7, r3
 8009f88:	2300      	movge	r3, #0
 8009f8a:	232d      	movlt	r3, #45	@ 0x2d
 8009f8c:	700b      	strb	r3, [r1, #0]
 8009f8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f94:	4691      	mov	r9, r2
 8009f96:	f023 0820 	bic.w	r8, r3, #32
 8009f9a:	bfbc      	itt	lt
 8009f9c:	4632      	movlt	r2, r6
 8009f9e:	4616      	movlt	r6, r2
 8009fa0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fa4:	d005      	beq.n	8009fb2 <__cvt+0x42>
 8009fa6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009faa:	d100      	bne.n	8009fae <__cvt+0x3e>
 8009fac:	3401      	adds	r4, #1
 8009fae:	2102      	movs	r1, #2
 8009fb0:	e000      	b.n	8009fb4 <__cvt+0x44>
 8009fb2:	2103      	movs	r1, #3
 8009fb4:	ab03      	add	r3, sp, #12
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	ab02      	add	r3, sp, #8
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	ec47 6b10 	vmov	d0, r6, r7
 8009fc0:	4653      	mov	r3, sl
 8009fc2:	4622      	mov	r2, r4
 8009fc4:	f000 fe48 	bl	800ac58 <_dtoa_r>
 8009fc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009fcc:	4605      	mov	r5, r0
 8009fce:	d119      	bne.n	800a004 <__cvt+0x94>
 8009fd0:	f019 0f01 	tst.w	r9, #1
 8009fd4:	d00e      	beq.n	8009ff4 <__cvt+0x84>
 8009fd6:	eb00 0904 	add.w	r9, r0, r4
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2300      	movs	r3, #0
 8009fde:	4630      	mov	r0, r6
 8009fe0:	4639      	mov	r1, r7
 8009fe2:	f7f6 fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fe6:	b108      	cbz	r0, 8009fec <__cvt+0x7c>
 8009fe8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fec:	2230      	movs	r2, #48	@ 0x30
 8009fee:	9b03      	ldr	r3, [sp, #12]
 8009ff0:	454b      	cmp	r3, r9
 8009ff2:	d31e      	bcc.n	800a032 <__cvt+0xc2>
 8009ff4:	9b03      	ldr	r3, [sp, #12]
 8009ff6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ff8:	1b5b      	subs	r3, r3, r5
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	b004      	add	sp, #16
 800a000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a004:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a008:	eb00 0904 	add.w	r9, r0, r4
 800a00c:	d1e5      	bne.n	8009fda <__cvt+0x6a>
 800a00e:	7803      	ldrb	r3, [r0, #0]
 800a010:	2b30      	cmp	r3, #48	@ 0x30
 800a012:	d10a      	bne.n	800a02a <__cvt+0xba>
 800a014:	2200      	movs	r2, #0
 800a016:	2300      	movs	r3, #0
 800a018:	4630      	mov	r0, r6
 800a01a:	4639      	mov	r1, r7
 800a01c:	f7f6 fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 800a020:	b918      	cbnz	r0, 800a02a <__cvt+0xba>
 800a022:	f1c4 0401 	rsb	r4, r4, #1
 800a026:	f8ca 4000 	str.w	r4, [sl]
 800a02a:	f8da 3000 	ldr.w	r3, [sl]
 800a02e:	4499      	add	r9, r3
 800a030:	e7d3      	b.n	8009fda <__cvt+0x6a>
 800a032:	1c59      	adds	r1, r3, #1
 800a034:	9103      	str	r1, [sp, #12]
 800a036:	701a      	strb	r2, [r3, #0]
 800a038:	e7d9      	b.n	8009fee <__cvt+0x7e>

0800a03a <__exponent>:
 800a03a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a03c:	2900      	cmp	r1, #0
 800a03e:	bfba      	itte	lt
 800a040:	4249      	neglt	r1, r1
 800a042:	232d      	movlt	r3, #45	@ 0x2d
 800a044:	232b      	movge	r3, #43	@ 0x2b
 800a046:	2909      	cmp	r1, #9
 800a048:	7002      	strb	r2, [r0, #0]
 800a04a:	7043      	strb	r3, [r0, #1]
 800a04c:	dd29      	ble.n	800a0a2 <__exponent+0x68>
 800a04e:	f10d 0307 	add.w	r3, sp, #7
 800a052:	461d      	mov	r5, r3
 800a054:	270a      	movs	r7, #10
 800a056:	461a      	mov	r2, r3
 800a058:	fbb1 f6f7 	udiv	r6, r1, r7
 800a05c:	fb07 1416 	mls	r4, r7, r6, r1
 800a060:	3430      	adds	r4, #48	@ 0x30
 800a062:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a066:	460c      	mov	r4, r1
 800a068:	2c63      	cmp	r4, #99	@ 0x63
 800a06a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a06e:	4631      	mov	r1, r6
 800a070:	dcf1      	bgt.n	800a056 <__exponent+0x1c>
 800a072:	3130      	adds	r1, #48	@ 0x30
 800a074:	1e94      	subs	r4, r2, #2
 800a076:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a07a:	1c41      	adds	r1, r0, #1
 800a07c:	4623      	mov	r3, r4
 800a07e:	42ab      	cmp	r3, r5
 800a080:	d30a      	bcc.n	800a098 <__exponent+0x5e>
 800a082:	f10d 0309 	add.w	r3, sp, #9
 800a086:	1a9b      	subs	r3, r3, r2
 800a088:	42ac      	cmp	r4, r5
 800a08a:	bf88      	it	hi
 800a08c:	2300      	movhi	r3, #0
 800a08e:	3302      	adds	r3, #2
 800a090:	4403      	add	r3, r0
 800a092:	1a18      	subs	r0, r3, r0
 800a094:	b003      	add	sp, #12
 800a096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a098:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a09c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a0a0:	e7ed      	b.n	800a07e <__exponent+0x44>
 800a0a2:	2330      	movs	r3, #48	@ 0x30
 800a0a4:	3130      	adds	r1, #48	@ 0x30
 800a0a6:	7083      	strb	r3, [r0, #2]
 800a0a8:	70c1      	strb	r1, [r0, #3]
 800a0aa:	1d03      	adds	r3, r0, #4
 800a0ac:	e7f1      	b.n	800a092 <__exponent+0x58>
	...

0800a0b0 <_printf_float>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	b08d      	sub	sp, #52	@ 0x34
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a0bc:	4616      	mov	r6, r2
 800a0be:	461f      	mov	r7, r3
 800a0c0:	4605      	mov	r5, r0
 800a0c2:	f000 fd07 	bl	800aad4 <_localeconv_r>
 800a0c6:	6803      	ldr	r3, [r0, #0]
 800a0c8:	9304      	str	r3, [sp, #16]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7f6 f8d0 	bl	8000270 <strlen>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a0d8:	9005      	str	r0, [sp, #20]
 800a0da:	3307      	adds	r3, #7
 800a0dc:	f023 0307 	bic.w	r3, r3, #7
 800a0e0:	f103 0208 	add.w	r2, r3, #8
 800a0e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a0e8:	f8d4 b000 	ldr.w	fp, [r4]
 800a0ec:	f8c8 2000 	str.w	r2, [r8]
 800a0f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a0f8:	9307      	str	r3, [sp, #28]
 800a0fa:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a102:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a106:	4b9c      	ldr	r3, [pc, #624]	@ (800a378 <_printf_float+0x2c8>)
 800a108:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a10c:	f7f6 fd0e 	bl	8000b2c <__aeabi_dcmpun>
 800a110:	bb70      	cbnz	r0, 800a170 <_printf_float+0xc0>
 800a112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a116:	4b98      	ldr	r3, [pc, #608]	@ (800a378 <_printf_float+0x2c8>)
 800a118:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a11c:	f7f6 fce8 	bl	8000af0 <__aeabi_dcmple>
 800a120:	bb30      	cbnz	r0, 800a170 <_printf_float+0xc0>
 800a122:	2200      	movs	r2, #0
 800a124:	2300      	movs	r3, #0
 800a126:	4640      	mov	r0, r8
 800a128:	4649      	mov	r1, r9
 800a12a:	f7f6 fcd7 	bl	8000adc <__aeabi_dcmplt>
 800a12e:	b110      	cbz	r0, 800a136 <_printf_float+0x86>
 800a130:	232d      	movs	r3, #45	@ 0x2d
 800a132:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a136:	4a91      	ldr	r2, [pc, #580]	@ (800a37c <_printf_float+0x2cc>)
 800a138:	4b91      	ldr	r3, [pc, #580]	@ (800a380 <_printf_float+0x2d0>)
 800a13a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a13e:	bf94      	ite	ls
 800a140:	4690      	movls	r8, r2
 800a142:	4698      	movhi	r8, r3
 800a144:	2303      	movs	r3, #3
 800a146:	6123      	str	r3, [r4, #16]
 800a148:	f02b 0304 	bic.w	r3, fp, #4
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	f04f 0900 	mov.w	r9, #0
 800a152:	9700      	str	r7, [sp, #0]
 800a154:	4633      	mov	r3, r6
 800a156:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a158:	4621      	mov	r1, r4
 800a15a:	4628      	mov	r0, r5
 800a15c:	f000 f9d2 	bl	800a504 <_printf_common>
 800a160:	3001      	adds	r0, #1
 800a162:	f040 808d 	bne.w	800a280 <_printf_float+0x1d0>
 800a166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a16a:	b00d      	add	sp, #52	@ 0x34
 800a16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a170:	4642      	mov	r2, r8
 800a172:	464b      	mov	r3, r9
 800a174:	4640      	mov	r0, r8
 800a176:	4649      	mov	r1, r9
 800a178:	f7f6 fcd8 	bl	8000b2c <__aeabi_dcmpun>
 800a17c:	b140      	cbz	r0, 800a190 <_printf_float+0xe0>
 800a17e:	464b      	mov	r3, r9
 800a180:	2b00      	cmp	r3, #0
 800a182:	bfbc      	itt	lt
 800a184:	232d      	movlt	r3, #45	@ 0x2d
 800a186:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a18a:	4a7e      	ldr	r2, [pc, #504]	@ (800a384 <_printf_float+0x2d4>)
 800a18c:	4b7e      	ldr	r3, [pc, #504]	@ (800a388 <_printf_float+0x2d8>)
 800a18e:	e7d4      	b.n	800a13a <_printf_float+0x8a>
 800a190:	6863      	ldr	r3, [r4, #4]
 800a192:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a196:	9206      	str	r2, [sp, #24]
 800a198:	1c5a      	adds	r2, r3, #1
 800a19a:	d13b      	bne.n	800a214 <_printf_float+0x164>
 800a19c:	2306      	movs	r3, #6
 800a19e:	6063      	str	r3, [r4, #4]
 800a1a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	6022      	str	r2, [r4, #0]
 800a1a8:	9303      	str	r3, [sp, #12]
 800a1aa:	ab0a      	add	r3, sp, #40	@ 0x28
 800a1ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a1b0:	ab09      	add	r3, sp, #36	@ 0x24
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	6861      	ldr	r1, [r4, #4]
 800a1b6:	ec49 8b10 	vmov	d0, r8, r9
 800a1ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a1be:	4628      	mov	r0, r5
 800a1c0:	f7ff fed6 	bl	8009f70 <__cvt>
 800a1c4:	9b06      	ldr	r3, [sp, #24]
 800a1c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1c8:	2b47      	cmp	r3, #71	@ 0x47
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	d129      	bne.n	800a222 <_printf_float+0x172>
 800a1ce:	1cc8      	adds	r0, r1, #3
 800a1d0:	db02      	blt.n	800a1d8 <_printf_float+0x128>
 800a1d2:	6863      	ldr	r3, [r4, #4]
 800a1d4:	4299      	cmp	r1, r3
 800a1d6:	dd41      	ble.n	800a25c <_printf_float+0x1ac>
 800a1d8:	f1aa 0a02 	sub.w	sl, sl, #2
 800a1dc:	fa5f fa8a 	uxtb.w	sl, sl
 800a1e0:	3901      	subs	r1, #1
 800a1e2:	4652      	mov	r2, sl
 800a1e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a1e8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1ea:	f7ff ff26 	bl	800a03a <__exponent>
 800a1ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1f0:	1813      	adds	r3, r2, r0
 800a1f2:	2a01      	cmp	r2, #1
 800a1f4:	4681      	mov	r9, r0
 800a1f6:	6123      	str	r3, [r4, #16]
 800a1f8:	dc02      	bgt.n	800a200 <_printf_float+0x150>
 800a1fa:	6822      	ldr	r2, [r4, #0]
 800a1fc:	07d2      	lsls	r2, r2, #31
 800a1fe:	d501      	bpl.n	800a204 <_printf_float+0x154>
 800a200:	3301      	adds	r3, #1
 800a202:	6123      	str	r3, [r4, #16]
 800a204:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d0a2      	beq.n	800a152 <_printf_float+0xa2>
 800a20c:	232d      	movs	r3, #45	@ 0x2d
 800a20e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a212:	e79e      	b.n	800a152 <_printf_float+0xa2>
 800a214:	9a06      	ldr	r2, [sp, #24]
 800a216:	2a47      	cmp	r2, #71	@ 0x47
 800a218:	d1c2      	bne.n	800a1a0 <_printf_float+0xf0>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1c0      	bne.n	800a1a0 <_printf_float+0xf0>
 800a21e:	2301      	movs	r3, #1
 800a220:	e7bd      	b.n	800a19e <_printf_float+0xee>
 800a222:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a226:	d9db      	bls.n	800a1e0 <_printf_float+0x130>
 800a228:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a22c:	d118      	bne.n	800a260 <_printf_float+0x1b0>
 800a22e:	2900      	cmp	r1, #0
 800a230:	6863      	ldr	r3, [r4, #4]
 800a232:	dd0b      	ble.n	800a24c <_printf_float+0x19c>
 800a234:	6121      	str	r1, [r4, #16]
 800a236:	b913      	cbnz	r3, 800a23e <_printf_float+0x18e>
 800a238:	6822      	ldr	r2, [r4, #0]
 800a23a:	07d0      	lsls	r0, r2, #31
 800a23c:	d502      	bpl.n	800a244 <_printf_float+0x194>
 800a23e:	3301      	adds	r3, #1
 800a240:	440b      	add	r3, r1
 800a242:	6123      	str	r3, [r4, #16]
 800a244:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a246:	f04f 0900 	mov.w	r9, #0
 800a24a:	e7db      	b.n	800a204 <_printf_float+0x154>
 800a24c:	b913      	cbnz	r3, 800a254 <_printf_float+0x1a4>
 800a24e:	6822      	ldr	r2, [r4, #0]
 800a250:	07d2      	lsls	r2, r2, #31
 800a252:	d501      	bpl.n	800a258 <_printf_float+0x1a8>
 800a254:	3302      	adds	r3, #2
 800a256:	e7f4      	b.n	800a242 <_printf_float+0x192>
 800a258:	2301      	movs	r3, #1
 800a25a:	e7f2      	b.n	800a242 <_printf_float+0x192>
 800a25c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a262:	4299      	cmp	r1, r3
 800a264:	db05      	blt.n	800a272 <_printf_float+0x1c2>
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	6121      	str	r1, [r4, #16]
 800a26a:	07d8      	lsls	r0, r3, #31
 800a26c:	d5ea      	bpl.n	800a244 <_printf_float+0x194>
 800a26e:	1c4b      	adds	r3, r1, #1
 800a270:	e7e7      	b.n	800a242 <_printf_float+0x192>
 800a272:	2900      	cmp	r1, #0
 800a274:	bfd4      	ite	le
 800a276:	f1c1 0202 	rsble	r2, r1, #2
 800a27a:	2201      	movgt	r2, #1
 800a27c:	4413      	add	r3, r2
 800a27e:	e7e0      	b.n	800a242 <_printf_float+0x192>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	055a      	lsls	r2, r3, #21
 800a284:	d407      	bmi.n	800a296 <_printf_float+0x1e6>
 800a286:	6923      	ldr	r3, [r4, #16]
 800a288:	4642      	mov	r2, r8
 800a28a:	4631      	mov	r1, r6
 800a28c:	4628      	mov	r0, r5
 800a28e:	47b8      	blx	r7
 800a290:	3001      	adds	r0, #1
 800a292:	d12b      	bne.n	800a2ec <_printf_float+0x23c>
 800a294:	e767      	b.n	800a166 <_printf_float+0xb6>
 800a296:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a29a:	f240 80dd 	bls.w	800a458 <_printf_float+0x3a8>
 800a29e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f7f6 fc0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d033      	beq.n	800a316 <_printf_float+0x266>
 800a2ae:	4a37      	ldr	r2, [pc, #220]	@ (800a38c <_printf_float+0x2dc>)
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	47b8      	blx	r7
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	f43f af54 	beq.w	800a166 <_printf_float+0xb6>
 800a2be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a2c2:	4543      	cmp	r3, r8
 800a2c4:	db02      	blt.n	800a2cc <_printf_float+0x21c>
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	07d8      	lsls	r0, r3, #31
 800a2ca:	d50f      	bpl.n	800a2ec <_printf_float+0x23c>
 800a2cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	47b8      	blx	r7
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	f43f af45 	beq.w	800a166 <_printf_float+0xb6>
 800a2dc:	f04f 0900 	mov.w	r9, #0
 800a2e0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a2e4:	f104 0a1a 	add.w	sl, r4, #26
 800a2e8:	45c8      	cmp	r8, r9
 800a2ea:	dc09      	bgt.n	800a300 <_printf_float+0x250>
 800a2ec:	6823      	ldr	r3, [r4, #0]
 800a2ee:	079b      	lsls	r3, r3, #30
 800a2f0:	f100 8103 	bmi.w	800a4fa <_printf_float+0x44a>
 800a2f4:	68e0      	ldr	r0, [r4, #12]
 800a2f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2f8:	4298      	cmp	r0, r3
 800a2fa:	bfb8      	it	lt
 800a2fc:	4618      	movlt	r0, r3
 800a2fe:	e734      	b.n	800a16a <_printf_float+0xba>
 800a300:	2301      	movs	r3, #1
 800a302:	4652      	mov	r2, sl
 800a304:	4631      	mov	r1, r6
 800a306:	4628      	mov	r0, r5
 800a308:	47b8      	blx	r7
 800a30a:	3001      	adds	r0, #1
 800a30c:	f43f af2b 	beq.w	800a166 <_printf_float+0xb6>
 800a310:	f109 0901 	add.w	r9, r9, #1
 800a314:	e7e8      	b.n	800a2e8 <_printf_float+0x238>
 800a316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dc39      	bgt.n	800a390 <_printf_float+0x2e0>
 800a31c:	4a1b      	ldr	r2, [pc, #108]	@ (800a38c <_printf_float+0x2dc>)
 800a31e:	2301      	movs	r3, #1
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	f43f af1d 	beq.w	800a166 <_printf_float+0xb6>
 800a32c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a330:	ea59 0303 	orrs.w	r3, r9, r3
 800a334:	d102      	bne.n	800a33c <_printf_float+0x28c>
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	07d9      	lsls	r1, r3, #31
 800a33a:	d5d7      	bpl.n	800a2ec <_printf_float+0x23c>
 800a33c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a340:	4631      	mov	r1, r6
 800a342:	4628      	mov	r0, r5
 800a344:	47b8      	blx	r7
 800a346:	3001      	adds	r0, #1
 800a348:	f43f af0d 	beq.w	800a166 <_printf_float+0xb6>
 800a34c:	f04f 0a00 	mov.w	sl, #0
 800a350:	f104 0b1a 	add.w	fp, r4, #26
 800a354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a356:	425b      	negs	r3, r3
 800a358:	4553      	cmp	r3, sl
 800a35a:	dc01      	bgt.n	800a360 <_printf_float+0x2b0>
 800a35c:	464b      	mov	r3, r9
 800a35e:	e793      	b.n	800a288 <_printf_float+0x1d8>
 800a360:	2301      	movs	r3, #1
 800a362:	465a      	mov	r2, fp
 800a364:	4631      	mov	r1, r6
 800a366:	4628      	mov	r0, r5
 800a368:	47b8      	blx	r7
 800a36a:	3001      	adds	r0, #1
 800a36c:	f43f aefb 	beq.w	800a166 <_printf_float+0xb6>
 800a370:	f10a 0a01 	add.w	sl, sl, #1
 800a374:	e7ee      	b.n	800a354 <_printf_float+0x2a4>
 800a376:	bf00      	nop
 800a378:	7fefffff 	.word	0x7fefffff
 800a37c:	0800ce60 	.word	0x0800ce60
 800a380:	0800ce64 	.word	0x0800ce64
 800a384:	0800ce68 	.word	0x0800ce68
 800a388:	0800ce6c 	.word	0x0800ce6c
 800a38c:	0800ce70 	.word	0x0800ce70
 800a390:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a392:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a396:	4553      	cmp	r3, sl
 800a398:	bfa8      	it	ge
 800a39a:	4653      	movge	r3, sl
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	4699      	mov	r9, r3
 800a3a0:	dc36      	bgt.n	800a410 <_printf_float+0x360>
 800a3a2:	f04f 0b00 	mov.w	fp, #0
 800a3a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3aa:	f104 021a 	add.w	r2, r4, #26
 800a3ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a3b0:	9306      	str	r3, [sp, #24]
 800a3b2:	eba3 0309 	sub.w	r3, r3, r9
 800a3b6:	455b      	cmp	r3, fp
 800a3b8:	dc31      	bgt.n	800a41e <_printf_float+0x36e>
 800a3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3bc:	459a      	cmp	sl, r3
 800a3be:	dc3a      	bgt.n	800a436 <_printf_float+0x386>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	07da      	lsls	r2, r3, #31
 800a3c4:	d437      	bmi.n	800a436 <_printf_float+0x386>
 800a3c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c8:	ebaa 0903 	sub.w	r9, sl, r3
 800a3cc:	9b06      	ldr	r3, [sp, #24]
 800a3ce:	ebaa 0303 	sub.w	r3, sl, r3
 800a3d2:	4599      	cmp	r9, r3
 800a3d4:	bfa8      	it	ge
 800a3d6:	4699      	movge	r9, r3
 800a3d8:	f1b9 0f00 	cmp.w	r9, #0
 800a3dc:	dc33      	bgt.n	800a446 <_printf_float+0x396>
 800a3de:	f04f 0800 	mov.w	r8, #0
 800a3e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3e6:	f104 0b1a 	add.w	fp, r4, #26
 800a3ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ec:	ebaa 0303 	sub.w	r3, sl, r3
 800a3f0:	eba3 0309 	sub.w	r3, r3, r9
 800a3f4:	4543      	cmp	r3, r8
 800a3f6:	f77f af79 	ble.w	800a2ec <_printf_float+0x23c>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	465a      	mov	r2, fp
 800a3fe:	4631      	mov	r1, r6
 800a400:	4628      	mov	r0, r5
 800a402:	47b8      	blx	r7
 800a404:	3001      	adds	r0, #1
 800a406:	f43f aeae 	beq.w	800a166 <_printf_float+0xb6>
 800a40a:	f108 0801 	add.w	r8, r8, #1
 800a40e:	e7ec      	b.n	800a3ea <_printf_float+0x33a>
 800a410:	4642      	mov	r2, r8
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	47b8      	blx	r7
 800a418:	3001      	adds	r0, #1
 800a41a:	d1c2      	bne.n	800a3a2 <_printf_float+0x2f2>
 800a41c:	e6a3      	b.n	800a166 <_printf_float+0xb6>
 800a41e:	2301      	movs	r3, #1
 800a420:	4631      	mov	r1, r6
 800a422:	4628      	mov	r0, r5
 800a424:	9206      	str	r2, [sp, #24]
 800a426:	47b8      	blx	r7
 800a428:	3001      	adds	r0, #1
 800a42a:	f43f ae9c 	beq.w	800a166 <_printf_float+0xb6>
 800a42e:	9a06      	ldr	r2, [sp, #24]
 800a430:	f10b 0b01 	add.w	fp, fp, #1
 800a434:	e7bb      	b.n	800a3ae <_printf_float+0x2fe>
 800a436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a43a:	4631      	mov	r1, r6
 800a43c:	4628      	mov	r0, r5
 800a43e:	47b8      	blx	r7
 800a440:	3001      	adds	r0, #1
 800a442:	d1c0      	bne.n	800a3c6 <_printf_float+0x316>
 800a444:	e68f      	b.n	800a166 <_printf_float+0xb6>
 800a446:	9a06      	ldr	r2, [sp, #24]
 800a448:	464b      	mov	r3, r9
 800a44a:	4442      	add	r2, r8
 800a44c:	4631      	mov	r1, r6
 800a44e:	4628      	mov	r0, r5
 800a450:	47b8      	blx	r7
 800a452:	3001      	adds	r0, #1
 800a454:	d1c3      	bne.n	800a3de <_printf_float+0x32e>
 800a456:	e686      	b.n	800a166 <_printf_float+0xb6>
 800a458:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a45c:	f1ba 0f01 	cmp.w	sl, #1
 800a460:	dc01      	bgt.n	800a466 <_printf_float+0x3b6>
 800a462:	07db      	lsls	r3, r3, #31
 800a464:	d536      	bpl.n	800a4d4 <_printf_float+0x424>
 800a466:	2301      	movs	r3, #1
 800a468:	4642      	mov	r2, r8
 800a46a:	4631      	mov	r1, r6
 800a46c:	4628      	mov	r0, r5
 800a46e:	47b8      	blx	r7
 800a470:	3001      	adds	r0, #1
 800a472:	f43f ae78 	beq.w	800a166 <_printf_float+0xb6>
 800a476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a47a:	4631      	mov	r1, r6
 800a47c:	4628      	mov	r0, r5
 800a47e:	47b8      	blx	r7
 800a480:	3001      	adds	r0, #1
 800a482:	f43f ae70 	beq.w	800a166 <_printf_float+0xb6>
 800a486:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a48a:	2200      	movs	r2, #0
 800a48c:	2300      	movs	r3, #0
 800a48e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a492:	f7f6 fb19 	bl	8000ac8 <__aeabi_dcmpeq>
 800a496:	b9c0      	cbnz	r0, 800a4ca <_printf_float+0x41a>
 800a498:	4653      	mov	r3, sl
 800a49a:	f108 0201 	add.w	r2, r8, #1
 800a49e:	4631      	mov	r1, r6
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	47b8      	blx	r7
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	d10c      	bne.n	800a4c2 <_printf_float+0x412>
 800a4a8:	e65d      	b.n	800a166 <_printf_float+0xb6>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	465a      	mov	r2, fp
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	47b8      	blx	r7
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	f43f ae56 	beq.w	800a166 <_printf_float+0xb6>
 800a4ba:	f108 0801 	add.w	r8, r8, #1
 800a4be:	45d0      	cmp	r8, sl
 800a4c0:	dbf3      	blt.n	800a4aa <_printf_float+0x3fa>
 800a4c2:	464b      	mov	r3, r9
 800a4c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a4c8:	e6df      	b.n	800a28a <_printf_float+0x1da>
 800a4ca:	f04f 0800 	mov.w	r8, #0
 800a4ce:	f104 0b1a 	add.w	fp, r4, #26
 800a4d2:	e7f4      	b.n	800a4be <_printf_float+0x40e>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	4642      	mov	r2, r8
 800a4d8:	e7e1      	b.n	800a49e <_printf_float+0x3ee>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	464a      	mov	r2, r9
 800a4de:	4631      	mov	r1, r6
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	47b8      	blx	r7
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	f43f ae3e 	beq.w	800a166 <_printf_float+0xb6>
 800a4ea:	f108 0801 	add.w	r8, r8, #1
 800a4ee:	68e3      	ldr	r3, [r4, #12]
 800a4f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4f2:	1a5b      	subs	r3, r3, r1
 800a4f4:	4543      	cmp	r3, r8
 800a4f6:	dcf0      	bgt.n	800a4da <_printf_float+0x42a>
 800a4f8:	e6fc      	b.n	800a2f4 <_printf_float+0x244>
 800a4fa:	f04f 0800 	mov.w	r8, #0
 800a4fe:	f104 0919 	add.w	r9, r4, #25
 800a502:	e7f4      	b.n	800a4ee <_printf_float+0x43e>

0800a504 <_printf_common>:
 800a504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a508:	4616      	mov	r6, r2
 800a50a:	4698      	mov	r8, r3
 800a50c:	688a      	ldr	r2, [r1, #8]
 800a50e:	690b      	ldr	r3, [r1, #16]
 800a510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a514:	4293      	cmp	r3, r2
 800a516:	bfb8      	it	lt
 800a518:	4613      	movlt	r3, r2
 800a51a:	6033      	str	r3, [r6, #0]
 800a51c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a520:	4607      	mov	r7, r0
 800a522:	460c      	mov	r4, r1
 800a524:	b10a      	cbz	r2, 800a52a <_printf_common+0x26>
 800a526:	3301      	adds	r3, #1
 800a528:	6033      	str	r3, [r6, #0]
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	0699      	lsls	r1, r3, #26
 800a52e:	bf42      	ittt	mi
 800a530:	6833      	ldrmi	r3, [r6, #0]
 800a532:	3302      	addmi	r3, #2
 800a534:	6033      	strmi	r3, [r6, #0]
 800a536:	6825      	ldr	r5, [r4, #0]
 800a538:	f015 0506 	ands.w	r5, r5, #6
 800a53c:	d106      	bne.n	800a54c <_printf_common+0x48>
 800a53e:	f104 0a19 	add.w	sl, r4, #25
 800a542:	68e3      	ldr	r3, [r4, #12]
 800a544:	6832      	ldr	r2, [r6, #0]
 800a546:	1a9b      	subs	r3, r3, r2
 800a548:	42ab      	cmp	r3, r5
 800a54a:	dc26      	bgt.n	800a59a <_printf_common+0x96>
 800a54c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a550:	6822      	ldr	r2, [r4, #0]
 800a552:	3b00      	subs	r3, #0
 800a554:	bf18      	it	ne
 800a556:	2301      	movne	r3, #1
 800a558:	0692      	lsls	r2, r2, #26
 800a55a:	d42b      	bmi.n	800a5b4 <_printf_common+0xb0>
 800a55c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a560:	4641      	mov	r1, r8
 800a562:	4638      	mov	r0, r7
 800a564:	47c8      	blx	r9
 800a566:	3001      	adds	r0, #1
 800a568:	d01e      	beq.n	800a5a8 <_printf_common+0xa4>
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	6922      	ldr	r2, [r4, #16]
 800a56e:	f003 0306 	and.w	r3, r3, #6
 800a572:	2b04      	cmp	r3, #4
 800a574:	bf02      	ittt	eq
 800a576:	68e5      	ldreq	r5, [r4, #12]
 800a578:	6833      	ldreq	r3, [r6, #0]
 800a57a:	1aed      	subeq	r5, r5, r3
 800a57c:	68a3      	ldr	r3, [r4, #8]
 800a57e:	bf0c      	ite	eq
 800a580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a584:	2500      	movne	r5, #0
 800a586:	4293      	cmp	r3, r2
 800a588:	bfc4      	itt	gt
 800a58a:	1a9b      	subgt	r3, r3, r2
 800a58c:	18ed      	addgt	r5, r5, r3
 800a58e:	2600      	movs	r6, #0
 800a590:	341a      	adds	r4, #26
 800a592:	42b5      	cmp	r5, r6
 800a594:	d11a      	bne.n	800a5cc <_printf_common+0xc8>
 800a596:	2000      	movs	r0, #0
 800a598:	e008      	b.n	800a5ac <_printf_common+0xa8>
 800a59a:	2301      	movs	r3, #1
 800a59c:	4652      	mov	r2, sl
 800a59e:	4641      	mov	r1, r8
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	47c8      	blx	r9
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d103      	bne.n	800a5b0 <_printf_common+0xac>
 800a5a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b0:	3501      	adds	r5, #1
 800a5b2:	e7c6      	b.n	800a542 <_printf_common+0x3e>
 800a5b4:	18e1      	adds	r1, r4, r3
 800a5b6:	1c5a      	adds	r2, r3, #1
 800a5b8:	2030      	movs	r0, #48	@ 0x30
 800a5ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5be:	4422      	add	r2, r4
 800a5c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5c8:	3302      	adds	r3, #2
 800a5ca:	e7c7      	b.n	800a55c <_printf_common+0x58>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	4641      	mov	r1, r8
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	47c8      	blx	r9
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	d0e6      	beq.n	800a5a8 <_printf_common+0xa4>
 800a5da:	3601      	adds	r6, #1
 800a5dc:	e7d9      	b.n	800a592 <_printf_common+0x8e>
	...

0800a5e0 <_printf_i>:
 800a5e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e4:	7e0f      	ldrb	r7, [r1, #24]
 800a5e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5e8:	2f78      	cmp	r7, #120	@ 0x78
 800a5ea:	4691      	mov	r9, r2
 800a5ec:	4680      	mov	r8, r0
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	469a      	mov	sl, r3
 800a5f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5f6:	d807      	bhi.n	800a608 <_printf_i+0x28>
 800a5f8:	2f62      	cmp	r7, #98	@ 0x62
 800a5fa:	d80a      	bhi.n	800a612 <_printf_i+0x32>
 800a5fc:	2f00      	cmp	r7, #0
 800a5fe:	f000 80d2 	beq.w	800a7a6 <_printf_i+0x1c6>
 800a602:	2f58      	cmp	r7, #88	@ 0x58
 800a604:	f000 80b9 	beq.w	800a77a <_printf_i+0x19a>
 800a608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a60c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a610:	e03a      	b.n	800a688 <_printf_i+0xa8>
 800a612:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a616:	2b15      	cmp	r3, #21
 800a618:	d8f6      	bhi.n	800a608 <_printf_i+0x28>
 800a61a:	a101      	add	r1, pc, #4	@ (adr r1, 800a620 <_printf_i+0x40>)
 800a61c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a620:	0800a679 	.word	0x0800a679
 800a624:	0800a68d 	.word	0x0800a68d
 800a628:	0800a609 	.word	0x0800a609
 800a62c:	0800a609 	.word	0x0800a609
 800a630:	0800a609 	.word	0x0800a609
 800a634:	0800a609 	.word	0x0800a609
 800a638:	0800a68d 	.word	0x0800a68d
 800a63c:	0800a609 	.word	0x0800a609
 800a640:	0800a609 	.word	0x0800a609
 800a644:	0800a609 	.word	0x0800a609
 800a648:	0800a609 	.word	0x0800a609
 800a64c:	0800a78d 	.word	0x0800a78d
 800a650:	0800a6b7 	.word	0x0800a6b7
 800a654:	0800a747 	.word	0x0800a747
 800a658:	0800a609 	.word	0x0800a609
 800a65c:	0800a609 	.word	0x0800a609
 800a660:	0800a7af 	.word	0x0800a7af
 800a664:	0800a609 	.word	0x0800a609
 800a668:	0800a6b7 	.word	0x0800a6b7
 800a66c:	0800a609 	.word	0x0800a609
 800a670:	0800a609 	.word	0x0800a609
 800a674:	0800a74f 	.word	0x0800a74f
 800a678:	6833      	ldr	r3, [r6, #0]
 800a67a:	1d1a      	adds	r2, r3, #4
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6032      	str	r2, [r6, #0]
 800a680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a684:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a688:	2301      	movs	r3, #1
 800a68a:	e09d      	b.n	800a7c8 <_printf_i+0x1e8>
 800a68c:	6833      	ldr	r3, [r6, #0]
 800a68e:	6820      	ldr	r0, [r4, #0]
 800a690:	1d19      	adds	r1, r3, #4
 800a692:	6031      	str	r1, [r6, #0]
 800a694:	0606      	lsls	r6, r0, #24
 800a696:	d501      	bpl.n	800a69c <_printf_i+0xbc>
 800a698:	681d      	ldr	r5, [r3, #0]
 800a69a:	e003      	b.n	800a6a4 <_printf_i+0xc4>
 800a69c:	0645      	lsls	r5, r0, #25
 800a69e:	d5fb      	bpl.n	800a698 <_printf_i+0xb8>
 800a6a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a6a4:	2d00      	cmp	r5, #0
 800a6a6:	da03      	bge.n	800a6b0 <_printf_i+0xd0>
 800a6a8:	232d      	movs	r3, #45	@ 0x2d
 800a6aa:	426d      	negs	r5, r5
 800a6ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6b0:	4859      	ldr	r0, [pc, #356]	@ (800a818 <_printf_i+0x238>)
 800a6b2:	230a      	movs	r3, #10
 800a6b4:	e011      	b.n	800a6da <_printf_i+0xfa>
 800a6b6:	6821      	ldr	r1, [r4, #0]
 800a6b8:	6833      	ldr	r3, [r6, #0]
 800a6ba:	0608      	lsls	r0, r1, #24
 800a6bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6c0:	d402      	bmi.n	800a6c8 <_printf_i+0xe8>
 800a6c2:	0649      	lsls	r1, r1, #25
 800a6c4:	bf48      	it	mi
 800a6c6:	b2ad      	uxthmi	r5, r5
 800a6c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6ca:	4853      	ldr	r0, [pc, #332]	@ (800a818 <_printf_i+0x238>)
 800a6cc:	6033      	str	r3, [r6, #0]
 800a6ce:	bf14      	ite	ne
 800a6d0:	230a      	movne	r3, #10
 800a6d2:	2308      	moveq	r3, #8
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6da:	6866      	ldr	r6, [r4, #4]
 800a6dc:	60a6      	str	r6, [r4, #8]
 800a6de:	2e00      	cmp	r6, #0
 800a6e0:	bfa2      	ittt	ge
 800a6e2:	6821      	ldrge	r1, [r4, #0]
 800a6e4:	f021 0104 	bicge.w	r1, r1, #4
 800a6e8:	6021      	strge	r1, [r4, #0]
 800a6ea:	b90d      	cbnz	r5, 800a6f0 <_printf_i+0x110>
 800a6ec:	2e00      	cmp	r6, #0
 800a6ee:	d04b      	beq.n	800a788 <_printf_i+0x1a8>
 800a6f0:	4616      	mov	r6, r2
 800a6f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6f6:	fb03 5711 	mls	r7, r3, r1, r5
 800a6fa:	5dc7      	ldrb	r7, [r0, r7]
 800a6fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a700:	462f      	mov	r7, r5
 800a702:	42bb      	cmp	r3, r7
 800a704:	460d      	mov	r5, r1
 800a706:	d9f4      	bls.n	800a6f2 <_printf_i+0x112>
 800a708:	2b08      	cmp	r3, #8
 800a70a:	d10b      	bne.n	800a724 <_printf_i+0x144>
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	07df      	lsls	r7, r3, #31
 800a710:	d508      	bpl.n	800a724 <_printf_i+0x144>
 800a712:	6923      	ldr	r3, [r4, #16]
 800a714:	6861      	ldr	r1, [r4, #4]
 800a716:	4299      	cmp	r1, r3
 800a718:	bfde      	ittt	le
 800a71a:	2330      	movle	r3, #48	@ 0x30
 800a71c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a720:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a724:	1b92      	subs	r2, r2, r6
 800a726:	6122      	str	r2, [r4, #16]
 800a728:	f8cd a000 	str.w	sl, [sp]
 800a72c:	464b      	mov	r3, r9
 800a72e:	aa03      	add	r2, sp, #12
 800a730:	4621      	mov	r1, r4
 800a732:	4640      	mov	r0, r8
 800a734:	f7ff fee6 	bl	800a504 <_printf_common>
 800a738:	3001      	adds	r0, #1
 800a73a:	d14a      	bne.n	800a7d2 <_printf_i+0x1f2>
 800a73c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a740:	b004      	add	sp, #16
 800a742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	f043 0320 	orr.w	r3, r3, #32
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	4833      	ldr	r0, [pc, #204]	@ (800a81c <_printf_i+0x23c>)
 800a750:	2778      	movs	r7, #120	@ 0x78
 800a752:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	6831      	ldr	r1, [r6, #0]
 800a75a:	061f      	lsls	r7, r3, #24
 800a75c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a760:	d402      	bmi.n	800a768 <_printf_i+0x188>
 800a762:	065f      	lsls	r7, r3, #25
 800a764:	bf48      	it	mi
 800a766:	b2ad      	uxthmi	r5, r5
 800a768:	6031      	str	r1, [r6, #0]
 800a76a:	07d9      	lsls	r1, r3, #31
 800a76c:	bf44      	itt	mi
 800a76e:	f043 0320 	orrmi.w	r3, r3, #32
 800a772:	6023      	strmi	r3, [r4, #0]
 800a774:	b11d      	cbz	r5, 800a77e <_printf_i+0x19e>
 800a776:	2310      	movs	r3, #16
 800a778:	e7ac      	b.n	800a6d4 <_printf_i+0xf4>
 800a77a:	4827      	ldr	r0, [pc, #156]	@ (800a818 <_printf_i+0x238>)
 800a77c:	e7e9      	b.n	800a752 <_printf_i+0x172>
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	f023 0320 	bic.w	r3, r3, #32
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	e7f6      	b.n	800a776 <_printf_i+0x196>
 800a788:	4616      	mov	r6, r2
 800a78a:	e7bd      	b.n	800a708 <_printf_i+0x128>
 800a78c:	6833      	ldr	r3, [r6, #0]
 800a78e:	6825      	ldr	r5, [r4, #0]
 800a790:	6961      	ldr	r1, [r4, #20]
 800a792:	1d18      	adds	r0, r3, #4
 800a794:	6030      	str	r0, [r6, #0]
 800a796:	062e      	lsls	r6, r5, #24
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	d501      	bpl.n	800a7a0 <_printf_i+0x1c0>
 800a79c:	6019      	str	r1, [r3, #0]
 800a79e:	e002      	b.n	800a7a6 <_printf_i+0x1c6>
 800a7a0:	0668      	lsls	r0, r5, #25
 800a7a2:	d5fb      	bpl.n	800a79c <_printf_i+0x1bc>
 800a7a4:	8019      	strh	r1, [r3, #0]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	6123      	str	r3, [r4, #16]
 800a7aa:	4616      	mov	r6, r2
 800a7ac:	e7bc      	b.n	800a728 <_printf_i+0x148>
 800a7ae:	6833      	ldr	r3, [r6, #0]
 800a7b0:	1d1a      	adds	r2, r3, #4
 800a7b2:	6032      	str	r2, [r6, #0]
 800a7b4:	681e      	ldr	r6, [r3, #0]
 800a7b6:	6862      	ldr	r2, [r4, #4]
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7f5 fd08 	bl	80001d0 <memchr>
 800a7c0:	b108      	cbz	r0, 800a7c6 <_printf_i+0x1e6>
 800a7c2:	1b80      	subs	r0, r0, r6
 800a7c4:	6060      	str	r0, [r4, #4]
 800a7c6:	6863      	ldr	r3, [r4, #4]
 800a7c8:	6123      	str	r3, [r4, #16]
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7d0:	e7aa      	b.n	800a728 <_printf_i+0x148>
 800a7d2:	6923      	ldr	r3, [r4, #16]
 800a7d4:	4632      	mov	r2, r6
 800a7d6:	4649      	mov	r1, r9
 800a7d8:	4640      	mov	r0, r8
 800a7da:	47d0      	blx	sl
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d0ad      	beq.n	800a73c <_printf_i+0x15c>
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	079b      	lsls	r3, r3, #30
 800a7e4:	d413      	bmi.n	800a80e <_printf_i+0x22e>
 800a7e6:	68e0      	ldr	r0, [r4, #12]
 800a7e8:	9b03      	ldr	r3, [sp, #12]
 800a7ea:	4298      	cmp	r0, r3
 800a7ec:	bfb8      	it	lt
 800a7ee:	4618      	movlt	r0, r3
 800a7f0:	e7a6      	b.n	800a740 <_printf_i+0x160>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	4632      	mov	r2, r6
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	47d0      	blx	sl
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	d09d      	beq.n	800a73c <_printf_i+0x15c>
 800a800:	3501      	adds	r5, #1
 800a802:	68e3      	ldr	r3, [r4, #12]
 800a804:	9903      	ldr	r1, [sp, #12]
 800a806:	1a5b      	subs	r3, r3, r1
 800a808:	42ab      	cmp	r3, r5
 800a80a:	dcf2      	bgt.n	800a7f2 <_printf_i+0x212>
 800a80c:	e7eb      	b.n	800a7e6 <_printf_i+0x206>
 800a80e:	2500      	movs	r5, #0
 800a810:	f104 0619 	add.w	r6, r4, #25
 800a814:	e7f5      	b.n	800a802 <_printf_i+0x222>
 800a816:	bf00      	nop
 800a818:	0800ce72 	.word	0x0800ce72
 800a81c:	0800ce83 	.word	0x0800ce83

0800a820 <siprintf>:
 800a820:	b40e      	push	{r1, r2, r3}
 800a822:	b500      	push	{lr}
 800a824:	b09c      	sub	sp, #112	@ 0x70
 800a826:	ab1d      	add	r3, sp, #116	@ 0x74
 800a828:	9002      	str	r0, [sp, #8]
 800a82a:	9006      	str	r0, [sp, #24]
 800a82c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a830:	4809      	ldr	r0, [pc, #36]	@ (800a858 <siprintf+0x38>)
 800a832:	9107      	str	r1, [sp, #28]
 800a834:	9104      	str	r1, [sp, #16]
 800a836:	4909      	ldr	r1, [pc, #36]	@ (800a85c <siprintf+0x3c>)
 800a838:	f853 2b04 	ldr.w	r2, [r3], #4
 800a83c:	9105      	str	r1, [sp, #20]
 800a83e:	6800      	ldr	r0, [r0, #0]
 800a840:	9301      	str	r3, [sp, #4]
 800a842:	a902      	add	r1, sp, #8
 800a844:	f001 f828 	bl	800b898 <_svfiprintf_r>
 800a848:	9b02      	ldr	r3, [sp, #8]
 800a84a:	2200      	movs	r2, #0
 800a84c:	701a      	strb	r2, [r3, #0]
 800a84e:	b01c      	add	sp, #112	@ 0x70
 800a850:	f85d eb04 	ldr.w	lr, [sp], #4
 800a854:	b003      	add	sp, #12
 800a856:	4770      	bx	lr
 800a858:	20000018 	.word	0x20000018
 800a85c:	ffff0208 	.word	0xffff0208

0800a860 <std>:
 800a860:	2300      	movs	r3, #0
 800a862:	b510      	push	{r4, lr}
 800a864:	4604      	mov	r4, r0
 800a866:	e9c0 3300 	strd	r3, r3, [r0]
 800a86a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a86e:	6083      	str	r3, [r0, #8]
 800a870:	8181      	strh	r1, [r0, #12]
 800a872:	6643      	str	r3, [r0, #100]	@ 0x64
 800a874:	81c2      	strh	r2, [r0, #14]
 800a876:	6183      	str	r3, [r0, #24]
 800a878:	4619      	mov	r1, r3
 800a87a:	2208      	movs	r2, #8
 800a87c:	305c      	adds	r0, #92	@ 0x5c
 800a87e:	f000 f921 	bl	800aac4 <memset>
 800a882:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b8 <std+0x58>)
 800a884:	6263      	str	r3, [r4, #36]	@ 0x24
 800a886:	4b0d      	ldr	r3, [pc, #52]	@ (800a8bc <std+0x5c>)
 800a888:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a88a:	4b0d      	ldr	r3, [pc, #52]	@ (800a8c0 <std+0x60>)
 800a88c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a88e:	4b0d      	ldr	r3, [pc, #52]	@ (800a8c4 <std+0x64>)
 800a890:	6323      	str	r3, [r4, #48]	@ 0x30
 800a892:	4b0d      	ldr	r3, [pc, #52]	@ (800a8c8 <std+0x68>)
 800a894:	6224      	str	r4, [r4, #32]
 800a896:	429c      	cmp	r4, r3
 800a898:	d006      	beq.n	800a8a8 <std+0x48>
 800a89a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a89e:	4294      	cmp	r4, r2
 800a8a0:	d002      	beq.n	800a8a8 <std+0x48>
 800a8a2:	33d0      	adds	r3, #208	@ 0xd0
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	d105      	bne.n	800a8b4 <std+0x54>
 800a8a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8b0:	f000 b93e 	b.w	800ab30 <__retarget_lock_init_recursive>
 800a8b4:	bd10      	pop	{r4, pc}
 800a8b6:	bf00      	nop
 800a8b8:	0800c6dd 	.word	0x0800c6dd
 800a8bc:	0800c6ff 	.word	0x0800c6ff
 800a8c0:	0800c737 	.word	0x0800c737
 800a8c4:	0800c75b 	.word	0x0800c75b
 800a8c8:	20001a0c 	.word	0x20001a0c

0800a8cc <stdio_exit_handler>:
 800a8cc:	4a02      	ldr	r2, [pc, #8]	@ (800a8d8 <stdio_exit_handler+0xc>)
 800a8ce:	4903      	ldr	r1, [pc, #12]	@ (800a8dc <stdio_exit_handler+0x10>)
 800a8d0:	4803      	ldr	r0, [pc, #12]	@ (800a8e0 <stdio_exit_handler+0x14>)
 800a8d2:	f000 b869 	b.w	800a9a8 <_fwalk_sglue>
 800a8d6:	bf00      	nop
 800a8d8:	2000000c 	.word	0x2000000c
 800a8dc:	0800bf71 	.word	0x0800bf71
 800a8e0:	2000001c 	.word	0x2000001c

0800a8e4 <cleanup_stdio>:
 800a8e4:	6841      	ldr	r1, [r0, #4]
 800a8e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a918 <cleanup_stdio+0x34>)
 800a8e8:	4299      	cmp	r1, r3
 800a8ea:	b510      	push	{r4, lr}
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	d001      	beq.n	800a8f4 <cleanup_stdio+0x10>
 800a8f0:	f001 fb3e 	bl	800bf70 <_fflush_r>
 800a8f4:	68a1      	ldr	r1, [r4, #8]
 800a8f6:	4b09      	ldr	r3, [pc, #36]	@ (800a91c <cleanup_stdio+0x38>)
 800a8f8:	4299      	cmp	r1, r3
 800a8fa:	d002      	beq.n	800a902 <cleanup_stdio+0x1e>
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f001 fb37 	bl	800bf70 <_fflush_r>
 800a902:	68e1      	ldr	r1, [r4, #12]
 800a904:	4b06      	ldr	r3, [pc, #24]	@ (800a920 <cleanup_stdio+0x3c>)
 800a906:	4299      	cmp	r1, r3
 800a908:	d004      	beq.n	800a914 <cleanup_stdio+0x30>
 800a90a:	4620      	mov	r0, r4
 800a90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a910:	f001 bb2e 	b.w	800bf70 <_fflush_r>
 800a914:	bd10      	pop	{r4, pc}
 800a916:	bf00      	nop
 800a918:	20001a0c 	.word	0x20001a0c
 800a91c:	20001a74 	.word	0x20001a74
 800a920:	20001adc 	.word	0x20001adc

0800a924 <global_stdio_init.part.0>:
 800a924:	b510      	push	{r4, lr}
 800a926:	4b0b      	ldr	r3, [pc, #44]	@ (800a954 <global_stdio_init.part.0+0x30>)
 800a928:	4c0b      	ldr	r4, [pc, #44]	@ (800a958 <global_stdio_init.part.0+0x34>)
 800a92a:	4a0c      	ldr	r2, [pc, #48]	@ (800a95c <global_stdio_init.part.0+0x38>)
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	4620      	mov	r0, r4
 800a930:	2200      	movs	r2, #0
 800a932:	2104      	movs	r1, #4
 800a934:	f7ff ff94 	bl	800a860 <std>
 800a938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a93c:	2201      	movs	r2, #1
 800a93e:	2109      	movs	r1, #9
 800a940:	f7ff ff8e 	bl	800a860 <std>
 800a944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a948:	2202      	movs	r2, #2
 800a94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a94e:	2112      	movs	r1, #18
 800a950:	f7ff bf86 	b.w	800a860 <std>
 800a954:	20001b44 	.word	0x20001b44
 800a958:	20001a0c 	.word	0x20001a0c
 800a95c:	0800a8cd 	.word	0x0800a8cd

0800a960 <__sfp_lock_acquire>:
 800a960:	4801      	ldr	r0, [pc, #4]	@ (800a968 <__sfp_lock_acquire+0x8>)
 800a962:	f000 b8e6 	b.w	800ab32 <__retarget_lock_acquire_recursive>
 800a966:	bf00      	nop
 800a968:	20001b49 	.word	0x20001b49

0800a96c <__sfp_lock_release>:
 800a96c:	4801      	ldr	r0, [pc, #4]	@ (800a974 <__sfp_lock_release+0x8>)
 800a96e:	f000 b8e1 	b.w	800ab34 <__retarget_lock_release_recursive>
 800a972:	bf00      	nop
 800a974:	20001b49 	.word	0x20001b49

0800a978 <__sinit>:
 800a978:	b510      	push	{r4, lr}
 800a97a:	4604      	mov	r4, r0
 800a97c:	f7ff fff0 	bl	800a960 <__sfp_lock_acquire>
 800a980:	6a23      	ldr	r3, [r4, #32]
 800a982:	b11b      	cbz	r3, 800a98c <__sinit+0x14>
 800a984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a988:	f7ff bff0 	b.w	800a96c <__sfp_lock_release>
 800a98c:	4b04      	ldr	r3, [pc, #16]	@ (800a9a0 <__sinit+0x28>)
 800a98e:	6223      	str	r3, [r4, #32]
 800a990:	4b04      	ldr	r3, [pc, #16]	@ (800a9a4 <__sinit+0x2c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1f5      	bne.n	800a984 <__sinit+0xc>
 800a998:	f7ff ffc4 	bl	800a924 <global_stdio_init.part.0>
 800a99c:	e7f2      	b.n	800a984 <__sinit+0xc>
 800a99e:	bf00      	nop
 800a9a0:	0800a8e5 	.word	0x0800a8e5
 800a9a4:	20001b44 	.word	0x20001b44

0800a9a8 <_fwalk_sglue>:
 800a9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9ac:	4607      	mov	r7, r0
 800a9ae:	4688      	mov	r8, r1
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	2600      	movs	r6, #0
 800a9b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9b8:	f1b9 0901 	subs.w	r9, r9, #1
 800a9bc:	d505      	bpl.n	800a9ca <_fwalk_sglue+0x22>
 800a9be:	6824      	ldr	r4, [r4, #0]
 800a9c0:	2c00      	cmp	r4, #0
 800a9c2:	d1f7      	bne.n	800a9b4 <_fwalk_sglue+0xc>
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ca:	89ab      	ldrh	r3, [r5, #12]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d907      	bls.n	800a9e0 <_fwalk_sglue+0x38>
 800a9d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	d003      	beq.n	800a9e0 <_fwalk_sglue+0x38>
 800a9d8:	4629      	mov	r1, r5
 800a9da:	4638      	mov	r0, r7
 800a9dc:	47c0      	blx	r8
 800a9de:	4306      	orrs	r6, r0
 800a9e0:	3568      	adds	r5, #104	@ 0x68
 800a9e2:	e7e9      	b.n	800a9b8 <_fwalk_sglue+0x10>

0800a9e4 <iprintf>:
 800a9e4:	b40f      	push	{r0, r1, r2, r3}
 800a9e6:	b507      	push	{r0, r1, r2, lr}
 800a9e8:	4906      	ldr	r1, [pc, #24]	@ (800aa04 <iprintf+0x20>)
 800a9ea:	ab04      	add	r3, sp, #16
 800a9ec:	6808      	ldr	r0, [r1, #0]
 800a9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9f2:	6881      	ldr	r1, [r0, #8]
 800a9f4:	9301      	str	r3, [sp, #4]
 800a9f6:	f001 f875 	bl	800bae4 <_vfiprintf_r>
 800a9fa:	b003      	add	sp, #12
 800a9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa00:	b004      	add	sp, #16
 800aa02:	4770      	bx	lr
 800aa04:	20000018 	.word	0x20000018

0800aa08 <_puts_r>:
 800aa08:	6a03      	ldr	r3, [r0, #32]
 800aa0a:	b570      	push	{r4, r5, r6, lr}
 800aa0c:	6884      	ldr	r4, [r0, #8]
 800aa0e:	4605      	mov	r5, r0
 800aa10:	460e      	mov	r6, r1
 800aa12:	b90b      	cbnz	r3, 800aa18 <_puts_r+0x10>
 800aa14:	f7ff ffb0 	bl	800a978 <__sinit>
 800aa18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa1a:	07db      	lsls	r3, r3, #31
 800aa1c:	d405      	bmi.n	800aa2a <_puts_r+0x22>
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	0598      	lsls	r0, r3, #22
 800aa22:	d402      	bmi.n	800aa2a <_puts_r+0x22>
 800aa24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa26:	f000 f884 	bl	800ab32 <__retarget_lock_acquire_recursive>
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	0719      	lsls	r1, r3, #28
 800aa2e:	d502      	bpl.n	800aa36 <_puts_r+0x2e>
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d135      	bne.n	800aaa2 <_puts_r+0x9a>
 800aa36:	4621      	mov	r1, r4
 800aa38:	4628      	mov	r0, r5
 800aa3a:	f001 feff 	bl	800c83c <__swsetup_r>
 800aa3e:	b380      	cbz	r0, 800aaa2 <_puts_r+0x9a>
 800aa40:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800aa44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa46:	07da      	lsls	r2, r3, #31
 800aa48:	d405      	bmi.n	800aa56 <_puts_r+0x4e>
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	059b      	lsls	r3, r3, #22
 800aa4e:	d402      	bmi.n	800aa56 <_puts_r+0x4e>
 800aa50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa52:	f000 f86f 	bl	800ab34 <__retarget_lock_release_recursive>
 800aa56:	4628      	mov	r0, r5
 800aa58:	bd70      	pop	{r4, r5, r6, pc}
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	da04      	bge.n	800aa68 <_puts_r+0x60>
 800aa5e:	69a2      	ldr	r2, [r4, #24]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	dc17      	bgt.n	800aa94 <_puts_r+0x8c>
 800aa64:	290a      	cmp	r1, #10
 800aa66:	d015      	beq.n	800aa94 <_puts_r+0x8c>
 800aa68:	6823      	ldr	r3, [r4, #0]
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	6022      	str	r2, [r4, #0]
 800aa6e:	7019      	strb	r1, [r3, #0]
 800aa70:	68a3      	ldr	r3, [r4, #8]
 800aa72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa76:	3b01      	subs	r3, #1
 800aa78:	60a3      	str	r3, [r4, #8]
 800aa7a:	2900      	cmp	r1, #0
 800aa7c:	d1ed      	bne.n	800aa5a <_puts_r+0x52>
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	da11      	bge.n	800aaa6 <_puts_r+0x9e>
 800aa82:	4622      	mov	r2, r4
 800aa84:	210a      	movs	r1, #10
 800aa86:	4628      	mov	r0, r5
 800aa88:	f001 fe99 	bl	800c7be <__swbuf_r>
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	d0d7      	beq.n	800aa40 <_puts_r+0x38>
 800aa90:	250a      	movs	r5, #10
 800aa92:	e7d7      	b.n	800aa44 <_puts_r+0x3c>
 800aa94:	4622      	mov	r2, r4
 800aa96:	4628      	mov	r0, r5
 800aa98:	f001 fe91 	bl	800c7be <__swbuf_r>
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	d1e7      	bne.n	800aa70 <_puts_r+0x68>
 800aaa0:	e7ce      	b.n	800aa40 <_puts_r+0x38>
 800aaa2:	3e01      	subs	r6, #1
 800aaa4:	e7e4      	b.n	800aa70 <_puts_r+0x68>
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	6022      	str	r2, [r4, #0]
 800aaac:	220a      	movs	r2, #10
 800aaae:	701a      	strb	r2, [r3, #0]
 800aab0:	e7ee      	b.n	800aa90 <_puts_r+0x88>
	...

0800aab4 <puts>:
 800aab4:	4b02      	ldr	r3, [pc, #8]	@ (800aac0 <puts+0xc>)
 800aab6:	4601      	mov	r1, r0
 800aab8:	6818      	ldr	r0, [r3, #0]
 800aaba:	f7ff bfa5 	b.w	800aa08 <_puts_r>
 800aabe:	bf00      	nop
 800aac0:	20000018 	.word	0x20000018

0800aac4 <memset>:
 800aac4:	4402      	add	r2, r0
 800aac6:	4603      	mov	r3, r0
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d100      	bne.n	800aace <memset+0xa>
 800aacc:	4770      	bx	lr
 800aace:	f803 1b01 	strb.w	r1, [r3], #1
 800aad2:	e7f9      	b.n	800aac8 <memset+0x4>

0800aad4 <_localeconv_r>:
 800aad4:	4800      	ldr	r0, [pc, #0]	@ (800aad8 <_localeconv_r+0x4>)
 800aad6:	4770      	bx	lr
 800aad8:	20000158 	.word	0x20000158

0800aadc <__errno>:
 800aadc:	4b01      	ldr	r3, [pc, #4]	@ (800aae4 <__errno+0x8>)
 800aade:	6818      	ldr	r0, [r3, #0]
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	20000018 	.word	0x20000018

0800aae8 <__libc_init_array>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	4d0d      	ldr	r5, [pc, #52]	@ (800ab20 <__libc_init_array+0x38>)
 800aaec:	4c0d      	ldr	r4, [pc, #52]	@ (800ab24 <__libc_init_array+0x3c>)
 800aaee:	1b64      	subs	r4, r4, r5
 800aaf0:	10a4      	asrs	r4, r4, #2
 800aaf2:	2600      	movs	r6, #0
 800aaf4:	42a6      	cmp	r6, r4
 800aaf6:	d109      	bne.n	800ab0c <__libc_init_array+0x24>
 800aaf8:	4d0b      	ldr	r5, [pc, #44]	@ (800ab28 <__libc_init_array+0x40>)
 800aafa:	4c0c      	ldr	r4, [pc, #48]	@ (800ab2c <__libc_init_array+0x44>)
 800aafc:	f002 f8f6 	bl	800ccec <_init>
 800ab00:	1b64      	subs	r4, r4, r5
 800ab02:	10a4      	asrs	r4, r4, #2
 800ab04:	2600      	movs	r6, #0
 800ab06:	42a6      	cmp	r6, r4
 800ab08:	d105      	bne.n	800ab16 <__libc_init_array+0x2e>
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab10:	4798      	blx	r3
 800ab12:	3601      	adds	r6, #1
 800ab14:	e7ee      	b.n	800aaf4 <__libc_init_array+0xc>
 800ab16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab1a:	4798      	blx	r3
 800ab1c:	3601      	adds	r6, #1
 800ab1e:	e7f2      	b.n	800ab06 <__libc_init_array+0x1e>
 800ab20:	0800d1d8 	.word	0x0800d1d8
 800ab24:	0800d1d8 	.word	0x0800d1d8
 800ab28:	0800d1d8 	.word	0x0800d1d8
 800ab2c:	0800d1dc 	.word	0x0800d1dc

0800ab30 <__retarget_lock_init_recursive>:
 800ab30:	4770      	bx	lr

0800ab32 <__retarget_lock_acquire_recursive>:
 800ab32:	4770      	bx	lr

0800ab34 <__retarget_lock_release_recursive>:
 800ab34:	4770      	bx	lr

0800ab36 <strcpy>:
 800ab36:	4603      	mov	r3, r0
 800ab38:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab3c:	f803 2b01 	strb.w	r2, [r3], #1
 800ab40:	2a00      	cmp	r2, #0
 800ab42:	d1f9      	bne.n	800ab38 <strcpy+0x2>
 800ab44:	4770      	bx	lr

0800ab46 <quorem>:
 800ab46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4a:	6903      	ldr	r3, [r0, #16]
 800ab4c:	690c      	ldr	r4, [r1, #16]
 800ab4e:	42a3      	cmp	r3, r4
 800ab50:	4607      	mov	r7, r0
 800ab52:	db7e      	blt.n	800ac52 <quorem+0x10c>
 800ab54:	3c01      	subs	r4, #1
 800ab56:	f101 0814 	add.w	r8, r1, #20
 800ab5a:	00a3      	lsls	r3, r4, #2
 800ab5c:	f100 0514 	add.w	r5, r0, #20
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab66:	9301      	str	r3, [sp, #4]
 800ab68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab70:	3301      	adds	r3, #1
 800ab72:	429a      	cmp	r2, r3
 800ab74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab78:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab7c:	d32e      	bcc.n	800abdc <quorem+0x96>
 800ab7e:	f04f 0a00 	mov.w	sl, #0
 800ab82:	46c4      	mov	ip, r8
 800ab84:	46ae      	mov	lr, r5
 800ab86:	46d3      	mov	fp, sl
 800ab88:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ab8c:	b298      	uxth	r0, r3
 800ab8e:	fb06 a000 	mla	r0, r6, r0, sl
 800ab92:	0c02      	lsrs	r2, r0, #16
 800ab94:	0c1b      	lsrs	r3, r3, #16
 800ab96:	fb06 2303 	mla	r3, r6, r3, r2
 800ab9a:	f8de 2000 	ldr.w	r2, [lr]
 800ab9e:	b280      	uxth	r0, r0
 800aba0:	b292      	uxth	r2, r2
 800aba2:	1a12      	subs	r2, r2, r0
 800aba4:	445a      	add	r2, fp
 800aba6:	f8de 0000 	ldr.w	r0, [lr]
 800abaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abae:	b29b      	uxth	r3, r3
 800abb0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800abb4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800abb8:	b292      	uxth	r2, r2
 800abba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800abbe:	45e1      	cmp	r9, ip
 800abc0:	f84e 2b04 	str.w	r2, [lr], #4
 800abc4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800abc8:	d2de      	bcs.n	800ab88 <quorem+0x42>
 800abca:	9b00      	ldr	r3, [sp, #0]
 800abcc:	58eb      	ldr	r3, [r5, r3]
 800abce:	b92b      	cbnz	r3, 800abdc <quorem+0x96>
 800abd0:	9b01      	ldr	r3, [sp, #4]
 800abd2:	3b04      	subs	r3, #4
 800abd4:	429d      	cmp	r5, r3
 800abd6:	461a      	mov	r2, r3
 800abd8:	d32f      	bcc.n	800ac3a <quorem+0xf4>
 800abda:	613c      	str	r4, [r7, #16]
 800abdc:	4638      	mov	r0, r7
 800abde:	f001 fc75 	bl	800c4cc <__mcmp>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	db25      	blt.n	800ac32 <quorem+0xec>
 800abe6:	4629      	mov	r1, r5
 800abe8:	2000      	movs	r0, #0
 800abea:	f858 2b04 	ldr.w	r2, [r8], #4
 800abee:	f8d1 c000 	ldr.w	ip, [r1]
 800abf2:	fa1f fe82 	uxth.w	lr, r2
 800abf6:	fa1f f38c 	uxth.w	r3, ip
 800abfa:	eba3 030e 	sub.w	r3, r3, lr
 800abfe:	4403      	add	r3, r0
 800ac00:	0c12      	lsrs	r2, r2, #16
 800ac02:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ac06:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac10:	45c1      	cmp	r9, r8
 800ac12:	f841 3b04 	str.w	r3, [r1], #4
 800ac16:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac1a:	d2e6      	bcs.n	800abea <quorem+0xa4>
 800ac1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac24:	b922      	cbnz	r2, 800ac30 <quorem+0xea>
 800ac26:	3b04      	subs	r3, #4
 800ac28:	429d      	cmp	r5, r3
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	d30b      	bcc.n	800ac46 <quorem+0x100>
 800ac2e:	613c      	str	r4, [r7, #16]
 800ac30:	3601      	adds	r6, #1
 800ac32:	4630      	mov	r0, r6
 800ac34:	b003      	add	sp, #12
 800ac36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3a:	6812      	ldr	r2, [r2, #0]
 800ac3c:	3b04      	subs	r3, #4
 800ac3e:	2a00      	cmp	r2, #0
 800ac40:	d1cb      	bne.n	800abda <quorem+0x94>
 800ac42:	3c01      	subs	r4, #1
 800ac44:	e7c6      	b.n	800abd4 <quorem+0x8e>
 800ac46:	6812      	ldr	r2, [r2, #0]
 800ac48:	3b04      	subs	r3, #4
 800ac4a:	2a00      	cmp	r2, #0
 800ac4c:	d1ef      	bne.n	800ac2e <quorem+0xe8>
 800ac4e:	3c01      	subs	r4, #1
 800ac50:	e7ea      	b.n	800ac28 <quorem+0xe2>
 800ac52:	2000      	movs	r0, #0
 800ac54:	e7ee      	b.n	800ac34 <quorem+0xee>
	...

0800ac58 <_dtoa_r>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	69c7      	ldr	r7, [r0, #28]
 800ac5e:	b099      	sub	sp, #100	@ 0x64
 800ac60:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ac64:	ec55 4b10 	vmov	r4, r5, d0
 800ac68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ac6a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac6c:	4683      	mov	fp, r0
 800ac6e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac72:	b97f      	cbnz	r7, 800ac94 <_dtoa_r+0x3c>
 800ac74:	2010      	movs	r0, #16
 800ac76:	f001 f84d 	bl	800bd14 <malloc>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ac80:	b920      	cbnz	r0, 800ac8c <_dtoa_r+0x34>
 800ac82:	4ba7      	ldr	r3, [pc, #668]	@ (800af20 <_dtoa_r+0x2c8>)
 800ac84:	21ef      	movs	r1, #239	@ 0xef
 800ac86:	48a7      	ldr	r0, [pc, #668]	@ (800af24 <_dtoa_r+0x2cc>)
 800ac88:	f001 ff30 	bl	800caec <__assert_func>
 800ac8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ac90:	6007      	str	r7, [r0, #0]
 800ac92:	60c7      	str	r7, [r0, #12]
 800ac94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac98:	6819      	ldr	r1, [r3, #0]
 800ac9a:	b159      	cbz	r1, 800acb4 <_dtoa_r+0x5c>
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	604a      	str	r2, [r1, #4]
 800aca0:	2301      	movs	r3, #1
 800aca2:	4093      	lsls	r3, r2
 800aca4:	608b      	str	r3, [r1, #8]
 800aca6:	4658      	mov	r0, fp
 800aca8:	f001 f9d6 	bl	800c058 <_Bfree>
 800acac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acb0:	2200      	movs	r2, #0
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	1e2b      	subs	r3, r5, #0
 800acb6:	bfb9      	ittee	lt
 800acb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800acbc:	9303      	strlt	r3, [sp, #12]
 800acbe:	2300      	movge	r3, #0
 800acc0:	6033      	strge	r3, [r6, #0]
 800acc2:	9f03      	ldr	r7, [sp, #12]
 800acc4:	4b98      	ldr	r3, [pc, #608]	@ (800af28 <_dtoa_r+0x2d0>)
 800acc6:	bfbc      	itt	lt
 800acc8:	2201      	movlt	r2, #1
 800acca:	6032      	strlt	r2, [r6, #0]
 800accc:	43bb      	bics	r3, r7
 800acce:	d112      	bne.n	800acf6 <_dtoa_r+0x9e>
 800acd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800acd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800acd6:	6013      	str	r3, [r2, #0]
 800acd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800acdc:	4323      	orrs	r3, r4
 800acde:	f000 854d 	beq.w	800b77c <_dtoa_r+0xb24>
 800ace2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ace4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800af3c <_dtoa_r+0x2e4>
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f000 854f 	beq.w	800b78c <_dtoa_r+0xb34>
 800acee:	f10a 0303 	add.w	r3, sl, #3
 800acf2:	f000 bd49 	b.w	800b788 <_dtoa_r+0xb30>
 800acf6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800acfa:	2200      	movs	r2, #0
 800acfc:	ec51 0b17 	vmov	r0, r1, d7
 800ad00:	2300      	movs	r3, #0
 800ad02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ad06:	f7f5 fedf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad0a:	4680      	mov	r8, r0
 800ad0c:	b158      	cbz	r0, 800ad26 <_dtoa_r+0xce>
 800ad0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad10:	2301      	movs	r3, #1
 800ad12:	6013      	str	r3, [r2, #0]
 800ad14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad16:	b113      	cbz	r3, 800ad1e <_dtoa_r+0xc6>
 800ad18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad1a:	4b84      	ldr	r3, [pc, #528]	@ (800af2c <_dtoa_r+0x2d4>)
 800ad1c:	6013      	str	r3, [r2, #0]
 800ad1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800af40 <_dtoa_r+0x2e8>
 800ad22:	f000 bd33 	b.w	800b78c <_dtoa_r+0xb34>
 800ad26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ad2a:	aa16      	add	r2, sp, #88	@ 0x58
 800ad2c:	a917      	add	r1, sp, #92	@ 0x5c
 800ad2e:	4658      	mov	r0, fp
 800ad30:	f001 fc7c 	bl	800c62c <__d2b>
 800ad34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ad38:	4681      	mov	r9, r0
 800ad3a:	2e00      	cmp	r6, #0
 800ad3c:	d077      	beq.n	800ae2e <_dtoa_r+0x1d6>
 800ad3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ad44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ad50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ad54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ad58:	4619      	mov	r1, r3
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	4b74      	ldr	r3, [pc, #464]	@ (800af30 <_dtoa_r+0x2d8>)
 800ad5e:	f7f5 fa93 	bl	8000288 <__aeabi_dsub>
 800ad62:	a369      	add	r3, pc, #420	@ (adr r3, 800af08 <_dtoa_r+0x2b0>)
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	f7f5 fc46 	bl	80005f8 <__aeabi_dmul>
 800ad6c:	a368      	add	r3, pc, #416	@ (adr r3, 800af10 <_dtoa_r+0x2b8>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	f7f5 fa8b 	bl	800028c <__adddf3>
 800ad76:	4604      	mov	r4, r0
 800ad78:	4630      	mov	r0, r6
 800ad7a:	460d      	mov	r5, r1
 800ad7c:	f7f5 fbd2 	bl	8000524 <__aeabi_i2d>
 800ad80:	a365      	add	r3, pc, #404	@ (adr r3, 800af18 <_dtoa_r+0x2c0>)
 800ad82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad86:	f7f5 fc37 	bl	80005f8 <__aeabi_dmul>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	4620      	mov	r0, r4
 800ad90:	4629      	mov	r1, r5
 800ad92:	f7f5 fa7b 	bl	800028c <__adddf3>
 800ad96:	4604      	mov	r4, r0
 800ad98:	460d      	mov	r5, r1
 800ad9a:	f7f5 fedd 	bl	8000b58 <__aeabi_d2iz>
 800ad9e:	2200      	movs	r2, #0
 800ada0:	4607      	mov	r7, r0
 800ada2:	2300      	movs	r3, #0
 800ada4:	4620      	mov	r0, r4
 800ada6:	4629      	mov	r1, r5
 800ada8:	f7f5 fe98 	bl	8000adc <__aeabi_dcmplt>
 800adac:	b140      	cbz	r0, 800adc0 <_dtoa_r+0x168>
 800adae:	4638      	mov	r0, r7
 800adb0:	f7f5 fbb8 	bl	8000524 <__aeabi_i2d>
 800adb4:	4622      	mov	r2, r4
 800adb6:	462b      	mov	r3, r5
 800adb8:	f7f5 fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 800adbc:	b900      	cbnz	r0, 800adc0 <_dtoa_r+0x168>
 800adbe:	3f01      	subs	r7, #1
 800adc0:	2f16      	cmp	r7, #22
 800adc2:	d851      	bhi.n	800ae68 <_dtoa_r+0x210>
 800adc4:	4b5b      	ldr	r3, [pc, #364]	@ (800af34 <_dtoa_r+0x2dc>)
 800adc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800add2:	f7f5 fe83 	bl	8000adc <__aeabi_dcmplt>
 800add6:	2800      	cmp	r0, #0
 800add8:	d048      	beq.n	800ae6c <_dtoa_r+0x214>
 800adda:	3f01      	subs	r7, #1
 800addc:	2300      	movs	r3, #0
 800adde:	9312      	str	r3, [sp, #72]	@ 0x48
 800ade0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ade2:	1b9b      	subs	r3, r3, r6
 800ade4:	1e5a      	subs	r2, r3, #1
 800ade6:	bf44      	itt	mi
 800ade8:	f1c3 0801 	rsbmi	r8, r3, #1
 800adec:	2300      	movmi	r3, #0
 800adee:	9208      	str	r2, [sp, #32]
 800adf0:	bf54      	ite	pl
 800adf2:	f04f 0800 	movpl.w	r8, #0
 800adf6:	9308      	strmi	r3, [sp, #32]
 800adf8:	2f00      	cmp	r7, #0
 800adfa:	db39      	blt.n	800ae70 <_dtoa_r+0x218>
 800adfc:	9b08      	ldr	r3, [sp, #32]
 800adfe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ae00:	443b      	add	r3, r7
 800ae02:	9308      	str	r3, [sp, #32]
 800ae04:	2300      	movs	r3, #0
 800ae06:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0a:	2b09      	cmp	r3, #9
 800ae0c:	d864      	bhi.n	800aed8 <_dtoa_r+0x280>
 800ae0e:	2b05      	cmp	r3, #5
 800ae10:	bfc4      	itt	gt
 800ae12:	3b04      	subgt	r3, #4
 800ae14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ae16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae18:	f1a3 0302 	sub.w	r3, r3, #2
 800ae1c:	bfcc      	ite	gt
 800ae1e:	2400      	movgt	r4, #0
 800ae20:	2401      	movle	r4, #1
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d863      	bhi.n	800aeee <_dtoa_r+0x296>
 800ae26:	e8df f003 	tbb	[pc, r3]
 800ae2a:	372a      	.short	0x372a
 800ae2c:	5535      	.short	0x5535
 800ae2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ae32:	441e      	add	r6, r3
 800ae34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ae38:	2b20      	cmp	r3, #32
 800ae3a:	bfc1      	itttt	gt
 800ae3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ae40:	409f      	lslgt	r7, r3
 800ae42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ae46:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ae4a:	bfd6      	itet	le
 800ae4c:	f1c3 0320 	rsble	r3, r3, #32
 800ae50:	ea47 0003 	orrgt.w	r0, r7, r3
 800ae54:	fa04 f003 	lslle.w	r0, r4, r3
 800ae58:	f7f5 fb54 	bl	8000504 <__aeabi_ui2d>
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ae62:	3e01      	subs	r6, #1
 800ae64:	9214      	str	r2, [sp, #80]	@ 0x50
 800ae66:	e777      	b.n	800ad58 <_dtoa_r+0x100>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e7b8      	b.n	800adde <_dtoa_r+0x186>
 800ae6c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ae6e:	e7b7      	b.n	800ade0 <_dtoa_r+0x188>
 800ae70:	427b      	negs	r3, r7
 800ae72:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae74:	2300      	movs	r3, #0
 800ae76:	eba8 0807 	sub.w	r8, r8, r7
 800ae7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae7c:	e7c4      	b.n	800ae08 <_dtoa_r+0x1b0>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	dc35      	bgt.n	800aef4 <_dtoa_r+0x29c>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	9307      	str	r3, [sp, #28]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae92:	e00b      	b.n	800aeac <_dtoa_r+0x254>
 800ae94:	2301      	movs	r3, #1
 800ae96:	e7f3      	b.n	800ae80 <_dtoa_r+0x228>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae9e:	18fb      	adds	r3, r7, r3
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	3301      	adds	r3, #1
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	9307      	str	r3, [sp, #28]
 800aea8:	bfb8      	it	lt
 800aeaa:	2301      	movlt	r3, #1
 800aeac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	2204      	movs	r2, #4
 800aeb4:	f102 0514 	add.w	r5, r2, #20
 800aeb8:	429d      	cmp	r5, r3
 800aeba:	d91f      	bls.n	800aefc <_dtoa_r+0x2a4>
 800aebc:	6041      	str	r1, [r0, #4]
 800aebe:	4658      	mov	r0, fp
 800aec0:	f001 f88a 	bl	800bfd8 <_Balloc>
 800aec4:	4682      	mov	sl, r0
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d13c      	bne.n	800af44 <_dtoa_r+0x2ec>
 800aeca:	4b1b      	ldr	r3, [pc, #108]	@ (800af38 <_dtoa_r+0x2e0>)
 800aecc:	4602      	mov	r2, r0
 800aece:	f240 11af 	movw	r1, #431	@ 0x1af
 800aed2:	e6d8      	b.n	800ac86 <_dtoa_r+0x2e>
 800aed4:	2301      	movs	r3, #1
 800aed6:	e7e0      	b.n	800ae9a <_dtoa_r+0x242>
 800aed8:	2401      	movs	r4, #1
 800aeda:	2300      	movs	r3, #0
 800aedc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aede:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	9307      	str	r3, [sp, #28]
 800aee8:	2200      	movs	r2, #0
 800aeea:	2312      	movs	r3, #18
 800aeec:	e7d0      	b.n	800ae90 <_dtoa_r+0x238>
 800aeee:	2301      	movs	r3, #1
 800aef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aef2:	e7f5      	b.n	800aee0 <_dtoa_r+0x288>
 800aef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	9307      	str	r3, [sp, #28]
 800aefa:	e7d7      	b.n	800aeac <_dtoa_r+0x254>
 800aefc:	3101      	adds	r1, #1
 800aefe:	0052      	lsls	r2, r2, #1
 800af00:	e7d8      	b.n	800aeb4 <_dtoa_r+0x25c>
 800af02:	bf00      	nop
 800af04:	f3af 8000 	nop.w
 800af08:	636f4361 	.word	0x636f4361
 800af0c:	3fd287a7 	.word	0x3fd287a7
 800af10:	8b60c8b3 	.word	0x8b60c8b3
 800af14:	3fc68a28 	.word	0x3fc68a28
 800af18:	509f79fb 	.word	0x509f79fb
 800af1c:	3fd34413 	.word	0x3fd34413
 800af20:	0800cea1 	.word	0x0800cea1
 800af24:	0800ceb8 	.word	0x0800ceb8
 800af28:	7ff00000 	.word	0x7ff00000
 800af2c:	0800ce71 	.word	0x0800ce71
 800af30:	3ff80000 	.word	0x3ff80000
 800af34:	0800cfc0 	.word	0x0800cfc0
 800af38:	0800cf10 	.word	0x0800cf10
 800af3c:	0800ce9d 	.word	0x0800ce9d
 800af40:	0800ce70 	.word	0x0800ce70
 800af44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af48:	6018      	str	r0, [r3, #0]
 800af4a:	9b07      	ldr	r3, [sp, #28]
 800af4c:	2b0e      	cmp	r3, #14
 800af4e:	f200 80a4 	bhi.w	800b09a <_dtoa_r+0x442>
 800af52:	2c00      	cmp	r4, #0
 800af54:	f000 80a1 	beq.w	800b09a <_dtoa_r+0x442>
 800af58:	2f00      	cmp	r7, #0
 800af5a:	dd33      	ble.n	800afc4 <_dtoa_r+0x36c>
 800af5c:	4bad      	ldr	r3, [pc, #692]	@ (800b214 <_dtoa_r+0x5bc>)
 800af5e:	f007 020f 	and.w	r2, r7, #15
 800af62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af66:	ed93 7b00 	vldr	d7, [r3]
 800af6a:	05f8      	lsls	r0, r7, #23
 800af6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800af70:	ea4f 1427 	mov.w	r4, r7, asr #4
 800af74:	d516      	bpl.n	800afa4 <_dtoa_r+0x34c>
 800af76:	4ba8      	ldr	r3, [pc, #672]	@ (800b218 <_dtoa_r+0x5c0>)
 800af78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af80:	f7f5 fc64 	bl	800084c <__aeabi_ddiv>
 800af84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af88:	f004 040f 	and.w	r4, r4, #15
 800af8c:	2603      	movs	r6, #3
 800af8e:	4da2      	ldr	r5, [pc, #648]	@ (800b218 <_dtoa_r+0x5c0>)
 800af90:	b954      	cbnz	r4, 800afa8 <_dtoa_r+0x350>
 800af92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af9a:	f7f5 fc57 	bl	800084c <__aeabi_ddiv>
 800af9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afa2:	e028      	b.n	800aff6 <_dtoa_r+0x39e>
 800afa4:	2602      	movs	r6, #2
 800afa6:	e7f2      	b.n	800af8e <_dtoa_r+0x336>
 800afa8:	07e1      	lsls	r1, r4, #31
 800afaa:	d508      	bpl.n	800afbe <_dtoa_r+0x366>
 800afac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afb4:	f7f5 fb20 	bl	80005f8 <__aeabi_dmul>
 800afb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afbc:	3601      	adds	r6, #1
 800afbe:	1064      	asrs	r4, r4, #1
 800afc0:	3508      	adds	r5, #8
 800afc2:	e7e5      	b.n	800af90 <_dtoa_r+0x338>
 800afc4:	f000 80d2 	beq.w	800b16c <_dtoa_r+0x514>
 800afc8:	427c      	negs	r4, r7
 800afca:	4b92      	ldr	r3, [pc, #584]	@ (800b214 <_dtoa_r+0x5bc>)
 800afcc:	4d92      	ldr	r5, [pc, #584]	@ (800b218 <_dtoa_r+0x5c0>)
 800afce:	f004 020f 	and.w	r2, r4, #15
 800afd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afde:	f7f5 fb0b 	bl	80005f8 <__aeabi_dmul>
 800afe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afe6:	1124      	asrs	r4, r4, #4
 800afe8:	2300      	movs	r3, #0
 800afea:	2602      	movs	r6, #2
 800afec:	2c00      	cmp	r4, #0
 800afee:	f040 80b2 	bne.w	800b156 <_dtoa_r+0x4fe>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1d3      	bne.n	800af9e <_dtoa_r+0x346>
 800aff6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aff8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 80b7 	beq.w	800b170 <_dtoa_r+0x518>
 800b002:	4b86      	ldr	r3, [pc, #536]	@ (800b21c <_dtoa_r+0x5c4>)
 800b004:	2200      	movs	r2, #0
 800b006:	4620      	mov	r0, r4
 800b008:	4629      	mov	r1, r5
 800b00a:	f7f5 fd67 	bl	8000adc <__aeabi_dcmplt>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f000 80ae 	beq.w	800b170 <_dtoa_r+0x518>
 800b014:	9b07      	ldr	r3, [sp, #28]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f000 80aa 	beq.w	800b170 <_dtoa_r+0x518>
 800b01c:	9b00      	ldr	r3, [sp, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	dd37      	ble.n	800b092 <_dtoa_r+0x43a>
 800b022:	1e7b      	subs	r3, r7, #1
 800b024:	9304      	str	r3, [sp, #16]
 800b026:	4620      	mov	r0, r4
 800b028:	4b7d      	ldr	r3, [pc, #500]	@ (800b220 <_dtoa_r+0x5c8>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	4629      	mov	r1, r5
 800b02e:	f7f5 fae3 	bl	80005f8 <__aeabi_dmul>
 800b032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b036:	9c00      	ldr	r4, [sp, #0]
 800b038:	3601      	adds	r6, #1
 800b03a:	4630      	mov	r0, r6
 800b03c:	f7f5 fa72 	bl	8000524 <__aeabi_i2d>
 800b040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b044:	f7f5 fad8 	bl	80005f8 <__aeabi_dmul>
 800b048:	4b76      	ldr	r3, [pc, #472]	@ (800b224 <_dtoa_r+0x5cc>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	f7f5 f91e 	bl	800028c <__adddf3>
 800b050:	4605      	mov	r5, r0
 800b052:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b056:	2c00      	cmp	r4, #0
 800b058:	f040 808d 	bne.w	800b176 <_dtoa_r+0x51e>
 800b05c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b060:	4b71      	ldr	r3, [pc, #452]	@ (800b228 <_dtoa_r+0x5d0>)
 800b062:	2200      	movs	r2, #0
 800b064:	f7f5 f910 	bl	8000288 <__aeabi_dsub>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b070:	462a      	mov	r2, r5
 800b072:	4633      	mov	r3, r6
 800b074:	f7f5 fd50 	bl	8000b18 <__aeabi_dcmpgt>
 800b078:	2800      	cmp	r0, #0
 800b07a:	f040 828b 	bne.w	800b594 <_dtoa_r+0x93c>
 800b07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b082:	462a      	mov	r2, r5
 800b084:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b088:	f7f5 fd28 	bl	8000adc <__aeabi_dcmplt>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	f040 8128 	bne.w	800b2e2 <_dtoa_r+0x68a>
 800b092:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b096:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b09a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f2c0 815a 	blt.w	800b356 <_dtoa_r+0x6fe>
 800b0a2:	2f0e      	cmp	r7, #14
 800b0a4:	f300 8157 	bgt.w	800b356 <_dtoa_r+0x6fe>
 800b0a8:	4b5a      	ldr	r3, [pc, #360]	@ (800b214 <_dtoa_r+0x5bc>)
 800b0aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0ae:	ed93 7b00 	vldr	d7, [r3]
 800b0b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	ed8d 7b00 	vstr	d7, [sp]
 800b0ba:	da03      	bge.n	800b0c4 <_dtoa_r+0x46c>
 800b0bc:	9b07      	ldr	r3, [sp, #28]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f340 8101 	ble.w	800b2c6 <_dtoa_r+0x66e>
 800b0c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b0c8:	4656      	mov	r6, sl
 800b0ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	f7f5 fbbb 	bl	800084c <__aeabi_ddiv>
 800b0d6:	f7f5 fd3f 	bl	8000b58 <__aeabi_d2iz>
 800b0da:	4680      	mov	r8, r0
 800b0dc:	f7f5 fa22 	bl	8000524 <__aeabi_i2d>
 800b0e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0e4:	f7f5 fa88 	bl	80005f8 <__aeabi_dmul>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b0f4:	f7f5 f8c8 	bl	8000288 <__aeabi_dsub>
 800b0f8:	f806 4b01 	strb.w	r4, [r6], #1
 800b0fc:	9d07      	ldr	r5, [sp, #28]
 800b0fe:	eba6 040a 	sub.w	r4, r6, sl
 800b102:	42a5      	cmp	r5, r4
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	f040 8117 	bne.w	800b33a <_dtoa_r+0x6e2>
 800b10c:	f7f5 f8be 	bl	800028c <__adddf3>
 800b110:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b114:	4604      	mov	r4, r0
 800b116:	460d      	mov	r5, r1
 800b118:	f7f5 fcfe 	bl	8000b18 <__aeabi_dcmpgt>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	f040 80f9 	bne.w	800b314 <_dtoa_r+0x6bc>
 800b122:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b126:	4620      	mov	r0, r4
 800b128:	4629      	mov	r1, r5
 800b12a:	f7f5 fccd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b12e:	b118      	cbz	r0, 800b138 <_dtoa_r+0x4e0>
 800b130:	f018 0f01 	tst.w	r8, #1
 800b134:	f040 80ee 	bne.w	800b314 <_dtoa_r+0x6bc>
 800b138:	4649      	mov	r1, r9
 800b13a:	4658      	mov	r0, fp
 800b13c:	f000 ff8c 	bl	800c058 <_Bfree>
 800b140:	2300      	movs	r3, #0
 800b142:	7033      	strb	r3, [r6, #0]
 800b144:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b146:	3701      	adds	r7, #1
 800b148:	601f      	str	r7, [r3, #0]
 800b14a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 831d 	beq.w	800b78c <_dtoa_r+0xb34>
 800b152:	601e      	str	r6, [r3, #0]
 800b154:	e31a      	b.n	800b78c <_dtoa_r+0xb34>
 800b156:	07e2      	lsls	r2, r4, #31
 800b158:	d505      	bpl.n	800b166 <_dtoa_r+0x50e>
 800b15a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b15e:	f7f5 fa4b 	bl	80005f8 <__aeabi_dmul>
 800b162:	3601      	adds	r6, #1
 800b164:	2301      	movs	r3, #1
 800b166:	1064      	asrs	r4, r4, #1
 800b168:	3508      	adds	r5, #8
 800b16a:	e73f      	b.n	800afec <_dtoa_r+0x394>
 800b16c:	2602      	movs	r6, #2
 800b16e:	e742      	b.n	800aff6 <_dtoa_r+0x39e>
 800b170:	9c07      	ldr	r4, [sp, #28]
 800b172:	9704      	str	r7, [sp, #16]
 800b174:	e761      	b.n	800b03a <_dtoa_r+0x3e2>
 800b176:	4b27      	ldr	r3, [pc, #156]	@ (800b214 <_dtoa_r+0x5bc>)
 800b178:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b17a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b17e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b182:	4454      	add	r4, sl
 800b184:	2900      	cmp	r1, #0
 800b186:	d053      	beq.n	800b230 <_dtoa_r+0x5d8>
 800b188:	4928      	ldr	r1, [pc, #160]	@ (800b22c <_dtoa_r+0x5d4>)
 800b18a:	2000      	movs	r0, #0
 800b18c:	f7f5 fb5e 	bl	800084c <__aeabi_ddiv>
 800b190:	4633      	mov	r3, r6
 800b192:	462a      	mov	r2, r5
 800b194:	f7f5 f878 	bl	8000288 <__aeabi_dsub>
 800b198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b19c:	4656      	mov	r6, sl
 800b19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1a2:	f7f5 fcd9 	bl	8000b58 <__aeabi_d2iz>
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	f7f5 f9bc 	bl	8000524 <__aeabi_i2d>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1b4:	f7f5 f868 	bl	8000288 <__aeabi_dsub>
 800b1b8:	3530      	adds	r5, #48	@ 0x30
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1c2:	f806 5b01 	strb.w	r5, [r6], #1
 800b1c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b1ca:	f7f5 fc87 	bl	8000adc <__aeabi_dcmplt>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d171      	bne.n	800b2b6 <_dtoa_r+0x65e>
 800b1d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1d6:	4911      	ldr	r1, [pc, #68]	@ (800b21c <_dtoa_r+0x5c4>)
 800b1d8:	2000      	movs	r0, #0
 800b1da:	f7f5 f855 	bl	8000288 <__aeabi_dsub>
 800b1de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b1e2:	f7f5 fc7b 	bl	8000adc <__aeabi_dcmplt>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	f040 8095 	bne.w	800b316 <_dtoa_r+0x6be>
 800b1ec:	42a6      	cmp	r6, r4
 800b1ee:	f43f af50 	beq.w	800b092 <_dtoa_r+0x43a>
 800b1f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b1f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b220 <_dtoa_r+0x5c8>)
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f7f5 f9fd 	bl	80005f8 <__aeabi_dmul>
 800b1fe:	4b08      	ldr	r3, [pc, #32]	@ (800b220 <_dtoa_r+0x5c8>)
 800b200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b204:	2200      	movs	r2, #0
 800b206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b20a:	f7f5 f9f5 	bl	80005f8 <__aeabi_dmul>
 800b20e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b212:	e7c4      	b.n	800b19e <_dtoa_r+0x546>
 800b214:	0800cfc0 	.word	0x0800cfc0
 800b218:	0800cf98 	.word	0x0800cf98
 800b21c:	3ff00000 	.word	0x3ff00000
 800b220:	40240000 	.word	0x40240000
 800b224:	401c0000 	.word	0x401c0000
 800b228:	40140000 	.word	0x40140000
 800b22c:	3fe00000 	.word	0x3fe00000
 800b230:	4631      	mov	r1, r6
 800b232:	4628      	mov	r0, r5
 800b234:	f7f5 f9e0 	bl	80005f8 <__aeabi_dmul>
 800b238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b23c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b23e:	4656      	mov	r6, sl
 800b240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b244:	f7f5 fc88 	bl	8000b58 <__aeabi_d2iz>
 800b248:	4605      	mov	r5, r0
 800b24a:	f7f5 f96b 	bl	8000524 <__aeabi_i2d>
 800b24e:	4602      	mov	r2, r0
 800b250:	460b      	mov	r3, r1
 800b252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b256:	f7f5 f817 	bl	8000288 <__aeabi_dsub>
 800b25a:	3530      	adds	r5, #48	@ 0x30
 800b25c:	f806 5b01 	strb.w	r5, [r6], #1
 800b260:	4602      	mov	r2, r0
 800b262:	460b      	mov	r3, r1
 800b264:	42a6      	cmp	r6, r4
 800b266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b26a:	f04f 0200 	mov.w	r2, #0
 800b26e:	d124      	bne.n	800b2ba <_dtoa_r+0x662>
 800b270:	4bac      	ldr	r3, [pc, #688]	@ (800b524 <_dtoa_r+0x8cc>)
 800b272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b276:	f7f5 f809 	bl	800028c <__adddf3>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b282:	f7f5 fc49 	bl	8000b18 <__aeabi_dcmpgt>
 800b286:	2800      	cmp	r0, #0
 800b288:	d145      	bne.n	800b316 <_dtoa_r+0x6be>
 800b28a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b28e:	49a5      	ldr	r1, [pc, #660]	@ (800b524 <_dtoa_r+0x8cc>)
 800b290:	2000      	movs	r0, #0
 800b292:	f7f4 fff9 	bl	8000288 <__aeabi_dsub>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b29e:	f7f5 fc1d 	bl	8000adc <__aeabi_dcmplt>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	f43f aef5 	beq.w	800b092 <_dtoa_r+0x43a>
 800b2a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b2aa:	1e73      	subs	r3, r6, #1
 800b2ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800b2ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2b2:	2b30      	cmp	r3, #48	@ 0x30
 800b2b4:	d0f8      	beq.n	800b2a8 <_dtoa_r+0x650>
 800b2b6:	9f04      	ldr	r7, [sp, #16]
 800b2b8:	e73e      	b.n	800b138 <_dtoa_r+0x4e0>
 800b2ba:	4b9b      	ldr	r3, [pc, #620]	@ (800b528 <_dtoa_r+0x8d0>)
 800b2bc:	f7f5 f99c 	bl	80005f8 <__aeabi_dmul>
 800b2c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2c4:	e7bc      	b.n	800b240 <_dtoa_r+0x5e8>
 800b2c6:	d10c      	bne.n	800b2e2 <_dtoa_r+0x68a>
 800b2c8:	4b98      	ldr	r3, [pc, #608]	@ (800b52c <_dtoa_r+0x8d4>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2d0:	f7f5 f992 	bl	80005f8 <__aeabi_dmul>
 800b2d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2d8:	f7f5 fc14 	bl	8000b04 <__aeabi_dcmpge>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	f000 8157 	beq.w	800b590 <_dtoa_r+0x938>
 800b2e2:	2400      	movs	r4, #0
 800b2e4:	4625      	mov	r5, r4
 800b2e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2e8:	43db      	mvns	r3, r3
 800b2ea:	9304      	str	r3, [sp, #16]
 800b2ec:	4656      	mov	r6, sl
 800b2ee:	2700      	movs	r7, #0
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	4658      	mov	r0, fp
 800b2f4:	f000 feb0 	bl	800c058 <_Bfree>
 800b2f8:	2d00      	cmp	r5, #0
 800b2fa:	d0dc      	beq.n	800b2b6 <_dtoa_r+0x65e>
 800b2fc:	b12f      	cbz	r7, 800b30a <_dtoa_r+0x6b2>
 800b2fe:	42af      	cmp	r7, r5
 800b300:	d003      	beq.n	800b30a <_dtoa_r+0x6b2>
 800b302:	4639      	mov	r1, r7
 800b304:	4658      	mov	r0, fp
 800b306:	f000 fea7 	bl	800c058 <_Bfree>
 800b30a:	4629      	mov	r1, r5
 800b30c:	4658      	mov	r0, fp
 800b30e:	f000 fea3 	bl	800c058 <_Bfree>
 800b312:	e7d0      	b.n	800b2b6 <_dtoa_r+0x65e>
 800b314:	9704      	str	r7, [sp, #16]
 800b316:	4633      	mov	r3, r6
 800b318:	461e      	mov	r6, r3
 800b31a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b31e:	2a39      	cmp	r2, #57	@ 0x39
 800b320:	d107      	bne.n	800b332 <_dtoa_r+0x6da>
 800b322:	459a      	cmp	sl, r3
 800b324:	d1f8      	bne.n	800b318 <_dtoa_r+0x6c0>
 800b326:	9a04      	ldr	r2, [sp, #16]
 800b328:	3201      	adds	r2, #1
 800b32a:	9204      	str	r2, [sp, #16]
 800b32c:	2230      	movs	r2, #48	@ 0x30
 800b32e:	f88a 2000 	strb.w	r2, [sl]
 800b332:	781a      	ldrb	r2, [r3, #0]
 800b334:	3201      	adds	r2, #1
 800b336:	701a      	strb	r2, [r3, #0]
 800b338:	e7bd      	b.n	800b2b6 <_dtoa_r+0x65e>
 800b33a:	4b7b      	ldr	r3, [pc, #492]	@ (800b528 <_dtoa_r+0x8d0>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	f7f5 f95b 	bl	80005f8 <__aeabi_dmul>
 800b342:	2200      	movs	r2, #0
 800b344:	2300      	movs	r3, #0
 800b346:	4604      	mov	r4, r0
 800b348:	460d      	mov	r5, r1
 800b34a:	f7f5 fbbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b34e:	2800      	cmp	r0, #0
 800b350:	f43f aebb 	beq.w	800b0ca <_dtoa_r+0x472>
 800b354:	e6f0      	b.n	800b138 <_dtoa_r+0x4e0>
 800b356:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b358:	2a00      	cmp	r2, #0
 800b35a:	f000 80db 	beq.w	800b514 <_dtoa_r+0x8bc>
 800b35e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b360:	2a01      	cmp	r2, #1
 800b362:	f300 80bf 	bgt.w	800b4e4 <_dtoa_r+0x88c>
 800b366:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b368:	2a00      	cmp	r2, #0
 800b36a:	f000 80b7 	beq.w	800b4dc <_dtoa_r+0x884>
 800b36e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b372:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b374:	4646      	mov	r6, r8
 800b376:	9a08      	ldr	r2, [sp, #32]
 800b378:	2101      	movs	r1, #1
 800b37a:	441a      	add	r2, r3
 800b37c:	4658      	mov	r0, fp
 800b37e:	4498      	add	r8, r3
 800b380:	9208      	str	r2, [sp, #32]
 800b382:	f000 ff1d 	bl	800c1c0 <__i2b>
 800b386:	4605      	mov	r5, r0
 800b388:	b15e      	cbz	r6, 800b3a2 <_dtoa_r+0x74a>
 800b38a:	9b08      	ldr	r3, [sp, #32]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	dd08      	ble.n	800b3a2 <_dtoa_r+0x74a>
 800b390:	42b3      	cmp	r3, r6
 800b392:	9a08      	ldr	r2, [sp, #32]
 800b394:	bfa8      	it	ge
 800b396:	4633      	movge	r3, r6
 800b398:	eba8 0803 	sub.w	r8, r8, r3
 800b39c:	1af6      	subs	r6, r6, r3
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	9308      	str	r3, [sp, #32]
 800b3a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3a4:	b1f3      	cbz	r3, 800b3e4 <_dtoa_r+0x78c>
 800b3a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f000 80b7 	beq.w	800b51c <_dtoa_r+0x8c4>
 800b3ae:	b18c      	cbz	r4, 800b3d4 <_dtoa_r+0x77c>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4622      	mov	r2, r4
 800b3b4:	4658      	mov	r0, fp
 800b3b6:	f000 ffc3 	bl	800c340 <__pow5mult>
 800b3ba:	464a      	mov	r2, r9
 800b3bc:	4601      	mov	r1, r0
 800b3be:	4605      	mov	r5, r0
 800b3c0:	4658      	mov	r0, fp
 800b3c2:	f000 ff13 	bl	800c1ec <__multiply>
 800b3c6:	4649      	mov	r1, r9
 800b3c8:	9004      	str	r0, [sp, #16]
 800b3ca:	4658      	mov	r0, fp
 800b3cc:	f000 fe44 	bl	800c058 <_Bfree>
 800b3d0:	9b04      	ldr	r3, [sp, #16]
 800b3d2:	4699      	mov	r9, r3
 800b3d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3d6:	1b1a      	subs	r2, r3, r4
 800b3d8:	d004      	beq.n	800b3e4 <_dtoa_r+0x78c>
 800b3da:	4649      	mov	r1, r9
 800b3dc:	4658      	mov	r0, fp
 800b3de:	f000 ffaf 	bl	800c340 <__pow5mult>
 800b3e2:	4681      	mov	r9, r0
 800b3e4:	2101      	movs	r1, #1
 800b3e6:	4658      	mov	r0, fp
 800b3e8:	f000 feea 	bl	800c1c0 <__i2b>
 800b3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 81cf 	beq.w	800b794 <_dtoa_r+0xb3c>
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	4601      	mov	r1, r0
 800b3fa:	4658      	mov	r0, fp
 800b3fc:	f000 ffa0 	bl	800c340 <__pow5mult>
 800b400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b402:	2b01      	cmp	r3, #1
 800b404:	4604      	mov	r4, r0
 800b406:	f300 8095 	bgt.w	800b534 <_dtoa_r+0x8dc>
 800b40a:	9b02      	ldr	r3, [sp, #8]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f040 8087 	bne.w	800b520 <_dtoa_r+0x8c8>
 800b412:	9b03      	ldr	r3, [sp, #12]
 800b414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f040 8089 	bne.w	800b530 <_dtoa_r+0x8d8>
 800b41e:	9b03      	ldr	r3, [sp, #12]
 800b420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b424:	0d1b      	lsrs	r3, r3, #20
 800b426:	051b      	lsls	r3, r3, #20
 800b428:	b12b      	cbz	r3, 800b436 <_dtoa_r+0x7de>
 800b42a:	9b08      	ldr	r3, [sp, #32]
 800b42c:	3301      	adds	r3, #1
 800b42e:	9308      	str	r3, [sp, #32]
 800b430:	f108 0801 	add.w	r8, r8, #1
 800b434:	2301      	movs	r3, #1
 800b436:	930a      	str	r3, [sp, #40]	@ 0x28
 800b438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f000 81b0 	beq.w	800b7a0 <_dtoa_r+0xb48>
 800b440:	6923      	ldr	r3, [r4, #16]
 800b442:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b446:	6918      	ldr	r0, [r3, #16]
 800b448:	f000 fe6e 	bl	800c128 <__hi0bits>
 800b44c:	f1c0 0020 	rsb	r0, r0, #32
 800b450:	9b08      	ldr	r3, [sp, #32]
 800b452:	4418      	add	r0, r3
 800b454:	f010 001f 	ands.w	r0, r0, #31
 800b458:	d077      	beq.n	800b54a <_dtoa_r+0x8f2>
 800b45a:	f1c0 0320 	rsb	r3, r0, #32
 800b45e:	2b04      	cmp	r3, #4
 800b460:	dd6b      	ble.n	800b53a <_dtoa_r+0x8e2>
 800b462:	9b08      	ldr	r3, [sp, #32]
 800b464:	f1c0 001c 	rsb	r0, r0, #28
 800b468:	4403      	add	r3, r0
 800b46a:	4480      	add	r8, r0
 800b46c:	4406      	add	r6, r0
 800b46e:	9308      	str	r3, [sp, #32]
 800b470:	f1b8 0f00 	cmp.w	r8, #0
 800b474:	dd05      	ble.n	800b482 <_dtoa_r+0x82a>
 800b476:	4649      	mov	r1, r9
 800b478:	4642      	mov	r2, r8
 800b47a:	4658      	mov	r0, fp
 800b47c:	f000 ffba 	bl	800c3f4 <__lshift>
 800b480:	4681      	mov	r9, r0
 800b482:	9b08      	ldr	r3, [sp, #32]
 800b484:	2b00      	cmp	r3, #0
 800b486:	dd05      	ble.n	800b494 <_dtoa_r+0x83c>
 800b488:	4621      	mov	r1, r4
 800b48a:	461a      	mov	r2, r3
 800b48c:	4658      	mov	r0, fp
 800b48e:	f000 ffb1 	bl	800c3f4 <__lshift>
 800b492:	4604      	mov	r4, r0
 800b494:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b496:	2b00      	cmp	r3, #0
 800b498:	d059      	beq.n	800b54e <_dtoa_r+0x8f6>
 800b49a:	4621      	mov	r1, r4
 800b49c:	4648      	mov	r0, r9
 800b49e:	f001 f815 	bl	800c4cc <__mcmp>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	da53      	bge.n	800b54e <_dtoa_r+0x8f6>
 800b4a6:	1e7b      	subs	r3, r7, #1
 800b4a8:	9304      	str	r3, [sp, #16]
 800b4aa:	4649      	mov	r1, r9
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	220a      	movs	r2, #10
 800b4b0:	4658      	mov	r0, fp
 800b4b2:	f000 fdf3 	bl	800c09c <__multadd>
 800b4b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4b8:	4681      	mov	r9, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f000 8172 	beq.w	800b7a4 <_dtoa_r+0xb4c>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	220a      	movs	r2, #10
 800b4c6:	4658      	mov	r0, fp
 800b4c8:	f000 fde8 	bl	800c09c <__multadd>
 800b4cc:	9b00      	ldr	r3, [sp, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	4605      	mov	r5, r0
 800b4d2:	dc67      	bgt.n	800b5a4 <_dtoa_r+0x94c>
 800b4d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	dc41      	bgt.n	800b55e <_dtoa_r+0x906>
 800b4da:	e063      	b.n	800b5a4 <_dtoa_r+0x94c>
 800b4dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b4de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b4e2:	e746      	b.n	800b372 <_dtoa_r+0x71a>
 800b4e4:	9b07      	ldr	r3, [sp, #28]
 800b4e6:	1e5c      	subs	r4, r3, #1
 800b4e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4ea:	42a3      	cmp	r3, r4
 800b4ec:	bfbf      	itttt	lt
 800b4ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b4f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b4f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b4f4:	1ae3      	sublt	r3, r4, r3
 800b4f6:	bfb4      	ite	lt
 800b4f8:	18d2      	addlt	r2, r2, r3
 800b4fa:	1b1c      	subge	r4, r3, r4
 800b4fc:	9b07      	ldr	r3, [sp, #28]
 800b4fe:	bfbc      	itt	lt
 800b500:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b502:	2400      	movlt	r4, #0
 800b504:	2b00      	cmp	r3, #0
 800b506:	bfb5      	itete	lt
 800b508:	eba8 0603 	sublt.w	r6, r8, r3
 800b50c:	9b07      	ldrge	r3, [sp, #28]
 800b50e:	2300      	movlt	r3, #0
 800b510:	4646      	movge	r6, r8
 800b512:	e730      	b.n	800b376 <_dtoa_r+0x71e>
 800b514:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b516:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b518:	4646      	mov	r6, r8
 800b51a:	e735      	b.n	800b388 <_dtoa_r+0x730>
 800b51c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b51e:	e75c      	b.n	800b3da <_dtoa_r+0x782>
 800b520:	2300      	movs	r3, #0
 800b522:	e788      	b.n	800b436 <_dtoa_r+0x7de>
 800b524:	3fe00000 	.word	0x3fe00000
 800b528:	40240000 	.word	0x40240000
 800b52c:	40140000 	.word	0x40140000
 800b530:	9b02      	ldr	r3, [sp, #8]
 800b532:	e780      	b.n	800b436 <_dtoa_r+0x7de>
 800b534:	2300      	movs	r3, #0
 800b536:	930a      	str	r3, [sp, #40]	@ 0x28
 800b538:	e782      	b.n	800b440 <_dtoa_r+0x7e8>
 800b53a:	d099      	beq.n	800b470 <_dtoa_r+0x818>
 800b53c:	9a08      	ldr	r2, [sp, #32]
 800b53e:	331c      	adds	r3, #28
 800b540:	441a      	add	r2, r3
 800b542:	4498      	add	r8, r3
 800b544:	441e      	add	r6, r3
 800b546:	9208      	str	r2, [sp, #32]
 800b548:	e792      	b.n	800b470 <_dtoa_r+0x818>
 800b54a:	4603      	mov	r3, r0
 800b54c:	e7f6      	b.n	800b53c <_dtoa_r+0x8e4>
 800b54e:	9b07      	ldr	r3, [sp, #28]
 800b550:	9704      	str	r7, [sp, #16]
 800b552:	2b00      	cmp	r3, #0
 800b554:	dc20      	bgt.n	800b598 <_dtoa_r+0x940>
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	dd1e      	ble.n	800b59c <_dtoa_r+0x944>
 800b55e:	9b00      	ldr	r3, [sp, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	f47f aec0 	bne.w	800b2e6 <_dtoa_r+0x68e>
 800b566:	4621      	mov	r1, r4
 800b568:	2205      	movs	r2, #5
 800b56a:	4658      	mov	r0, fp
 800b56c:	f000 fd96 	bl	800c09c <__multadd>
 800b570:	4601      	mov	r1, r0
 800b572:	4604      	mov	r4, r0
 800b574:	4648      	mov	r0, r9
 800b576:	f000 ffa9 	bl	800c4cc <__mcmp>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	f77f aeb3 	ble.w	800b2e6 <_dtoa_r+0x68e>
 800b580:	4656      	mov	r6, sl
 800b582:	2331      	movs	r3, #49	@ 0x31
 800b584:	f806 3b01 	strb.w	r3, [r6], #1
 800b588:	9b04      	ldr	r3, [sp, #16]
 800b58a:	3301      	adds	r3, #1
 800b58c:	9304      	str	r3, [sp, #16]
 800b58e:	e6ae      	b.n	800b2ee <_dtoa_r+0x696>
 800b590:	9c07      	ldr	r4, [sp, #28]
 800b592:	9704      	str	r7, [sp, #16]
 800b594:	4625      	mov	r5, r4
 800b596:	e7f3      	b.n	800b580 <_dtoa_r+0x928>
 800b598:	9b07      	ldr	r3, [sp, #28]
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f000 8104 	beq.w	800b7ac <_dtoa_r+0xb54>
 800b5a4:	2e00      	cmp	r6, #0
 800b5a6:	dd05      	ble.n	800b5b4 <_dtoa_r+0x95c>
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4632      	mov	r2, r6
 800b5ac:	4658      	mov	r0, fp
 800b5ae:	f000 ff21 	bl	800c3f4 <__lshift>
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d05a      	beq.n	800b670 <_dtoa_r+0xa18>
 800b5ba:	6869      	ldr	r1, [r5, #4]
 800b5bc:	4658      	mov	r0, fp
 800b5be:	f000 fd0b 	bl	800bfd8 <_Balloc>
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	b928      	cbnz	r0, 800b5d2 <_dtoa_r+0x97a>
 800b5c6:	4b84      	ldr	r3, [pc, #528]	@ (800b7d8 <_dtoa_r+0xb80>)
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b5ce:	f7ff bb5a 	b.w	800ac86 <_dtoa_r+0x2e>
 800b5d2:	692a      	ldr	r2, [r5, #16]
 800b5d4:	3202      	adds	r2, #2
 800b5d6:	0092      	lsls	r2, r2, #2
 800b5d8:	f105 010c 	add.w	r1, r5, #12
 800b5dc:	300c      	adds	r0, #12
 800b5de:	f001 fa77 	bl	800cad0 <memcpy>
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	4631      	mov	r1, r6
 800b5e6:	4658      	mov	r0, fp
 800b5e8:	f000 ff04 	bl	800c3f4 <__lshift>
 800b5ec:	f10a 0301 	add.w	r3, sl, #1
 800b5f0:	9307      	str	r3, [sp, #28]
 800b5f2:	9b00      	ldr	r3, [sp, #0]
 800b5f4:	4453      	add	r3, sl
 800b5f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5f8:	9b02      	ldr	r3, [sp, #8]
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	462f      	mov	r7, r5
 800b600:	930a      	str	r3, [sp, #40]	@ 0x28
 800b602:	4605      	mov	r5, r0
 800b604:	9b07      	ldr	r3, [sp, #28]
 800b606:	4621      	mov	r1, r4
 800b608:	3b01      	subs	r3, #1
 800b60a:	4648      	mov	r0, r9
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	f7ff fa9a 	bl	800ab46 <quorem>
 800b612:	4639      	mov	r1, r7
 800b614:	9002      	str	r0, [sp, #8]
 800b616:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b61a:	4648      	mov	r0, r9
 800b61c:	f000 ff56 	bl	800c4cc <__mcmp>
 800b620:	462a      	mov	r2, r5
 800b622:	9008      	str	r0, [sp, #32]
 800b624:	4621      	mov	r1, r4
 800b626:	4658      	mov	r0, fp
 800b628:	f000 ff6c 	bl	800c504 <__mdiff>
 800b62c:	68c2      	ldr	r2, [r0, #12]
 800b62e:	4606      	mov	r6, r0
 800b630:	bb02      	cbnz	r2, 800b674 <_dtoa_r+0xa1c>
 800b632:	4601      	mov	r1, r0
 800b634:	4648      	mov	r0, r9
 800b636:	f000 ff49 	bl	800c4cc <__mcmp>
 800b63a:	4602      	mov	r2, r0
 800b63c:	4631      	mov	r1, r6
 800b63e:	4658      	mov	r0, fp
 800b640:	920e      	str	r2, [sp, #56]	@ 0x38
 800b642:	f000 fd09 	bl	800c058 <_Bfree>
 800b646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b64a:	9e07      	ldr	r6, [sp, #28]
 800b64c:	ea43 0102 	orr.w	r1, r3, r2
 800b650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b652:	4319      	orrs	r1, r3
 800b654:	d110      	bne.n	800b678 <_dtoa_r+0xa20>
 800b656:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b65a:	d029      	beq.n	800b6b0 <_dtoa_r+0xa58>
 800b65c:	9b08      	ldr	r3, [sp, #32]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	dd02      	ble.n	800b668 <_dtoa_r+0xa10>
 800b662:	9b02      	ldr	r3, [sp, #8]
 800b664:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b668:	9b00      	ldr	r3, [sp, #0]
 800b66a:	f883 8000 	strb.w	r8, [r3]
 800b66e:	e63f      	b.n	800b2f0 <_dtoa_r+0x698>
 800b670:	4628      	mov	r0, r5
 800b672:	e7bb      	b.n	800b5ec <_dtoa_r+0x994>
 800b674:	2201      	movs	r2, #1
 800b676:	e7e1      	b.n	800b63c <_dtoa_r+0x9e4>
 800b678:	9b08      	ldr	r3, [sp, #32]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	db04      	blt.n	800b688 <_dtoa_r+0xa30>
 800b67e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b680:	430b      	orrs	r3, r1
 800b682:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b684:	430b      	orrs	r3, r1
 800b686:	d120      	bne.n	800b6ca <_dtoa_r+0xa72>
 800b688:	2a00      	cmp	r2, #0
 800b68a:	dded      	ble.n	800b668 <_dtoa_r+0xa10>
 800b68c:	4649      	mov	r1, r9
 800b68e:	2201      	movs	r2, #1
 800b690:	4658      	mov	r0, fp
 800b692:	f000 feaf 	bl	800c3f4 <__lshift>
 800b696:	4621      	mov	r1, r4
 800b698:	4681      	mov	r9, r0
 800b69a:	f000 ff17 	bl	800c4cc <__mcmp>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	dc03      	bgt.n	800b6aa <_dtoa_r+0xa52>
 800b6a2:	d1e1      	bne.n	800b668 <_dtoa_r+0xa10>
 800b6a4:	f018 0f01 	tst.w	r8, #1
 800b6a8:	d0de      	beq.n	800b668 <_dtoa_r+0xa10>
 800b6aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6ae:	d1d8      	bne.n	800b662 <_dtoa_r+0xa0a>
 800b6b0:	9a00      	ldr	r2, [sp, #0]
 800b6b2:	2339      	movs	r3, #57	@ 0x39
 800b6b4:	7013      	strb	r3, [r2, #0]
 800b6b6:	4633      	mov	r3, r6
 800b6b8:	461e      	mov	r6, r3
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b6c0:	2a39      	cmp	r2, #57	@ 0x39
 800b6c2:	d052      	beq.n	800b76a <_dtoa_r+0xb12>
 800b6c4:	3201      	adds	r2, #1
 800b6c6:	701a      	strb	r2, [r3, #0]
 800b6c8:	e612      	b.n	800b2f0 <_dtoa_r+0x698>
 800b6ca:	2a00      	cmp	r2, #0
 800b6cc:	dd07      	ble.n	800b6de <_dtoa_r+0xa86>
 800b6ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6d2:	d0ed      	beq.n	800b6b0 <_dtoa_r+0xa58>
 800b6d4:	9a00      	ldr	r2, [sp, #0]
 800b6d6:	f108 0301 	add.w	r3, r8, #1
 800b6da:	7013      	strb	r3, [r2, #0]
 800b6dc:	e608      	b.n	800b2f0 <_dtoa_r+0x698>
 800b6de:	9b07      	ldr	r3, [sp, #28]
 800b6e0:	9a07      	ldr	r2, [sp, #28]
 800b6e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b6e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d028      	beq.n	800b73e <_dtoa_r+0xae6>
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	220a      	movs	r2, #10
 800b6f2:	4658      	mov	r0, fp
 800b6f4:	f000 fcd2 	bl	800c09c <__multadd>
 800b6f8:	42af      	cmp	r7, r5
 800b6fa:	4681      	mov	r9, r0
 800b6fc:	f04f 0300 	mov.w	r3, #0
 800b700:	f04f 020a 	mov.w	r2, #10
 800b704:	4639      	mov	r1, r7
 800b706:	4658      	mov	r0, fp
 800b708:	d107      	bne.n	800b71a <_dtoa_r+0xac2>
 800b70a:	f000 fcc7 	bl	800c09c <__multadd>
 800b70e:	4607      	mov	r7, r0
 800b710:	4605      	mov	r5, r0
 800b712:	9b07      	ldr	r3, [sp, #28]
 800b714:	3301      	adds	r3, #1
 800b716:	9307      	str	r3, [sp, #28]
 800b718:	e774      	b.n	800b604 <_dtoa_r+0x9ac>
 800b71a:	f000 fcbf 	bl	800c09c <__multadd>
 800b71e:	4629      	mov	r1, r5
 800b720:	4607      	mov	r7, r0
 800b722:	2300      	movs	r3, #0
 800b724:	220a      	movs	r2, #10
 800b726:	4658      	mov	r0, fp
 800b728:	f000 fcb8 	bl	800c09c <__multadd>
 800b72c:	4605      	mov	r5, r0
 800b72e:	e7f0      	b.n	800b712 <_dtoa_r+0xaba>
 800b730:	9b00      	ldr	r3, [sp, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	bfcc      	ite	gt
 800b736:	461e      	movgt	r6, r3
 800b738:	2601      	movle	r6, #1
 800b73a:	4456      	add	r6, sl
 800b73c:	2700      	movs	r7, #0
 800b73e:	4649      	mov	r1, r9
 800b740:	2201      	movs	r2, #1
 800b742:	4658      	mov	r0, fp
 800b744:	f000 fe56 	bl	800c3f4 <__lshift>
 800b748:	4621      	mov	r1, r4
 800b74a:	4681      	mov	r9, r0
 800b74c:	f000 febe 	bl	800c4cc <__mcmp>
 800b750:	2800      	cmp	r0, #0
 800b752:	dcb0      	bgt.n	800b6b6 <_dtoa_r+0xa5e>
 800b754:	d102      	bne.n	800b75c <_dtoa_r+0xb04>
 800b756:	f018 0f01 	tst.w	r8, #1
 800b75a:	d1ac      	bne.n	800b6b6 <_dtoa_r+0xa5e>
 800b75c:	4633      	mov	r3, r6
 800b75e:	461e      	mov	r6, r3
 800b760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b764:	2a30      	cmp	r2, #48	@ 0x30
 800b766:	d0fa      	beq.n	800b75e <_dtoa_r+0xb06>
 800b768:	e5c2      	b.n	800b2f0 <_dtoa_r+0x698>
 800b76a:	459a      	cmp	sl, r3
 800b76c:	d1a4      	bne.n	800b6b8 <_dtoa_r+0xa60>
 800b76e:	9b04      	ldr	r3, [sp, #16]
 800b770:	3301      	adds	r3, #1
 800b772:	9304      	str	r3, [sp, #16]
 800b774:	2331      	movs	r3, #49	@ 0x31
 800b776:	f88a 3000 	strb.w	r3, [sl]
 800b77a:	e5b9      	b.n	800b2f0 <_dtoa_r+0x698>
 800b77c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b77e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b7dc <_dtoa_r+0xb84>
 800b782:	b11b      	cbz	r3, 800b78c <_dtoa_r+0xb34>
 800b784:	f10a 0308 	add.w	r3, sl, #8
 800b788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b78a:	6013      	str	r3, [r2, #0]
 800b78c:	4650      	mov	r0, sl
 800b78e:	b019      	add	sp, #100	@ 0x64
 800b790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b796:	2b01      	cmp	r3, #1
 800b798:	f77f ae37 	ble.w	800b40a <_dtoa_r+0x7b2>
 800b79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b79e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7a0:	2001      	movs	r0, #1
 800b7a2:	e655      	b.n	800b450 <_dtoa_r+0x7f8>
 800b7a4:	9b00      	ldr	r3, [sp, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f77f aed6 	ble.w	800b558 <_dtoa_r+0x900>
 800b7ac:	4656      	mov	r6, sl
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	4648      	mov	r0, r9
 800b7b2:	f7ff f9c8 	bl	800ab46 <quorem>
 800b7b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b7ba:	f806 8b01 	strb.w	r8, [r6], #1
 800b7be:	9b00      	ldr	r3, [sp, #0]
 800b7c0:	eba6 020a 	sub.w	r2, r6, sl
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	ddb3      	ble.n	800b730 <_dtoa_r+0xad8>
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	220a      	movs	r2, #10
 800b7ce:	4658      	mov	r0, fp
 800b7d0:	f000 fc64 	bl	800c09c <__multadd>
 800b7d4:	4681      	mov	r9, r0
 800b7d6:	e7ea      	b.n	800b7ae <_dtoa_r+0xb56>
 800b7d8:	0800cf10 	.word	0x0800cf10
 800b7dc:	0800ce94 	.word	0x0800ce94

0800b7e0 <__ssputs_r>:
 800b7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7e4:	688e      	ldr	r6, [r1, #8]
 800b7e6:	461f      	mov	r7, r3
 800b7e8:	42be      	cmp	r6, r7
 800b7ea:	680b      	ldr	r3, [r1, #0]
 800b7ec:	4682      	mov	sl, r0
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	4690      	mov	r8, r2
 800b7f2:	d82d      	bhi.n	800b850 <__ssputs_r+0x70>
 800b7f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b7fc:	d026      	beq.n	800b84c <__ssputs_r+0x6c>
 800b7fe:	6965      	ldr	r5, [r4, #20]
 800b800:	6909      	ldr	r1, [r1, #16]
 800b802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b806:	eba3 0901 	sub.w	r9, r3, r1
 800b80a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b80e:	1c7b      	adds	r3, r7, #1
 800b810:	444b      	add	r3, r9
 800b812:	106d      	asrs	r5, r5, #1
 800b814:	429d      	cmp	r5, r3
 800b816:	bf38      	it	cc
 800b818:	461d      	movcc	r5, r3
 800b81a:	0553      	lsls	r3, r2, #21
 800b81c:	d527      	bpl.n	800b86e <__ssputs_r+0x8e>
 800b81e:	4629      	mov	r1, r5
 800b820:	f000 faa2 	bl	800bd68 <_malloc_r>
 800b824:	4606      	mov	r6, r0
 800b826:	b360      	cbz	r0, 800b882 <__ssputs_r+0xa2>
 800b828:	6921      	ldr	r1, [r4, #16]
 800b82a:	464a      	mov	r2, r9
 800b82c:	f001 f950 	bl	800cad0 <memcpy>
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b83a:	81a3      	strh	r3, [r4, #12]
 800b83c:	6126      	str	r6, [r4, #16]
 800b83e:	6165      	str	r5, [r4, #20]
 800b840:	444e      	add	r6, r9
 800b842:	eba5 0509 	sub.w	r5, r5, r9
 800b846:	6026      	str	r6, [r4, #0]
 800b848:	60a5      	str	r5, [r4, #8]
 800b84a:	463e      	mov	r6, r7
 800b84c:	42be      	cmp	r6, r7
 800b84e:	d900      	bls.n	800b852 <__ssputs_r+0x72>
 800b850:	463e      	mov	r6, r7
 800b852:	6820      	ldr	r0, [r4, #0]
 800b854:	4632      	mov	r2, r6
 800b856:	4641      	mov	r1, r8
 800b858:	f001 f8a8 	bl	800c9ac <memmove>
 800b85c:	68a3      	ldr	r3, [r4, #8]
 800b85e:	1b9b      	subs	r3, r3, r6
 800b860:	60a3      	str	r3, [r4, #8]
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	4433      	add	r3, r6
 800b866:	6023      	str	r3, [r4, #0]
 800b868:	2000      	movs	r0, #0
 800b86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86e:	462a      	mov	r2, r5
 800b870:	f000 ff77 	bl	800c762 <_realloc_r>
 800b874:	4606      	mov	r6, r0
 800b876:	2800      	cmp	r0, #0
 800b878:	d1e0      	bne.n	800b83c <__ssputs_r+0x5c>
 800b87a:	6921      	ldr	r1, [r4, #16]
 800b87c:	4650      	mov	r0, sl
 800b87e:	f001 f967 	bl	800cb50 <_free_r>
 800b882:	230c      	movs	r3, #12
 800b884:	f8ca 3000 	str.w	r3, [sl]
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b88e:	81a3      	strh	r3, [r4, #12]
 800b890:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b894:	e7e9      	b.n	800b86a <__ssputs_r+0x8a>
	...

0800b898 <_svfiprintf_r>:
 800b898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89c:	4698      	mov	r8, r3
 800b89e:	898b      	ldrh	r3, [r1, #12]
 800b8a0:	061b      	lsls	r3, r3, #24
 800b8a2:	b09d      	sub	sp, #116	@ 0x74
 800b8a4:	4607      	mov	r7, r0
 800b8a6:	460d      	mov	r5, r1
 800b8a8:	4614      	mov	r4, r2
 800b8aa:	d510      	bpl.n	800b8ce <_svfiprintf_r+0x36>
 800b8ac:	690b      	ldr	r3, [r1, #16]
 800b8ae:	b973      	cbnz	r3, 800b8ce <_svfiprintf_r+0x36>
 800b8b0:	2140      	movs	r1, #64	@ 0x40
 800b8b2:	f000 fa59 	bl	800bd68 <_malloc_r>
 800b8b6:	6028      	str	r0, [r5, #0]
 800b8b8:	6128      	str	r0, [r5, #16]
 800b8ba:	b930      	cbnz	r0, 800b8ca <_svfiprintf_r+0x32>
 800b8bc:	230c      	movs	r3, #12
 800b8be:	603b      	str	r3, [r7, #0]
 800b8c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8c4:	b01d      	add	sp, #116	@ 0x74
 800b8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ca:	2340      	movs	r3, #64	@ 0x40
 800b8cc:	616b      	str	r3, [r5, #20]
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8d2:	2320      	movs	r3, #32
 800b8d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b8d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8dc:	2330      	movs	r3, #48	@ 0x30
 800b8de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ba7c <_svfiprintf_r+0x1e4>
 800b8e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b8e6:	f04f 0901 	mov.w	r9, #1
 800b8ea:	4623      	mov	r3, r4
 800b8ec:	469a      	mov	sl, r3
 800b8ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8f2:	b10a      	cbz	r2, 800b8f8 <_svfiprintf_r+0x60>
 800b8f4:	2a25      	cmp	r2, #37	@ 0x25
 800b8f6:	d1f9      	bne.n	800b8ec <_svfiprintf_r+0x54>
 800b8f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b8fc:	d00b      	beq.n	800b916 <_svfiprintf_r+0x7e>
 800b8fe:	465b      	mov	r3, fp
 800b900:	4622      	mov	r2, r4
 800b902:	4629      	mov	r1, r5
 800b904:	4638      	mov	r0, r7
 800b906:	f7ff ff6b 	bl	800b7e0 <__ssputs_r>
 800b90a:	3001      	adds	r0, #1
 800b90c:	f000 80a7 	beq.w	800ba5e <_svfiprintf_r+0x1c6>
 800b910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b912:	445a      	add	r2, fp
 800b914:	9209      	str	r2, [sp, #36]	@ 0x24
 800b916:	f89a 3000 	ldrb.w	r3, [sl]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f000 809f 	beq.w	800ba5e <_svfiprintf_r+0x1c6>
 800b920:	2300      	movs	r3, #0
 800b922:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b92a:	f10a 0a01 	add.w	sl, sl, #1
 800b92e:	9304      	str	r3, [sp, #16]
 800b930:	9307      	str	r3, [sp, #28]
 800b932:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b936:	931a      	str	r3, [sp, #104]	@ 0x68
 800b938:	4654      	mov	r4, sl
 800b93a:	2205      	movs	r2, #5
 800b93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b940:	484e      	ldr	r0, [pc, #312]	@ (800ba7c <_svfiprintf_r+0x1e4>)
 800b942:	f7f4 fc45 	bl	80001d0 <memchr>
 800b946:	9a04      	ldr	r2, [sp, #16]
 800b948:	b9d8      	cbnz	r0, 800b982 <_svfiprintf_r+0xea>
 800b94a:	06d0      	lsls	r0, r2, #27
 800b94c:	bf44      	itt	mi
 800b94e:	2320      	movmi	r3, #32
 800b950:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b954:	0711      	lsls	r1, r2, #28
 800b956:	bf44      	itt	mi
 800b958:	232b      	movmi	r3, #43	@ 0x2b
 800b95a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b95e:	f89a 3000 	ldrb.w	r3, [sl]
 800b962:	2b2a      	cmp	r3, #42	@ 0x2a
 800b964:	d015      	beq.n	800b992 <_svfiprintf_r+0xfa>
 800b966:	9a07      	ldr	r2, [sp, #28]
 800b968:	4654      	mov	r4, sl
 800b96a:	2000      	movs	r0, #0
 800b96c:	f04f 0c0a 	mov.w	ip, #10
 800b970:	4621      	mov	r1, r4
 800b972:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b976:	3b30      	subs	r3, #48	@ 0x30
 800b978:	2b09      	cmp	r3, #9
 800b97a:	d94b      	bls.n	800ba14 <_svfiprintf_r+0x17c>
 800b97c:	b1b0      	cbz	r0, 800b9ac <_svfiprintf_r+0x114>
 800b97e:	9207      	str	r2, [sp, #28]
 800b980:	e014      	b.n	800b9ac <_svfiprintf_r+0x114>
 800b982:	eba0 0308 	sub.w	r3, r0, r8
 800b986:	fa09 f303 	lsl.w	r3, r9, r3
 800b98a:	4313      	orrs	r3, r2
 800b98c:	9304      	str	r3, [sp, #16]
 800b98e:	46a2      	mov	sl, r4
 800b990:	e7d2      	b.n	800b938 <_svfiprintf_r+0xa0>
 800b992:	9b03      	ldr	r3, [sp, #12]
 800b994:	1d19      	adds	r1, r3, #4
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	9103      	str	r1, [sp, #12]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	bfbb      	ittet	lt
 800b99e:	425b      	neglt	r3, r3
 800b9a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b9a4:	9307      	strge	r3, [sp, #28]
 800b9a6:	9307      	strlt	r3, [sp, #28]
 800b9a8:	bfb8      	it	lt
 800b9aa:	9204      	strlt	r2, [sp, #16]
 800b9ac:	7823      	ldrb	r3, [r4, #0]
 800b9ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9b0:	d10a      	bne.n	800b9c8 <_svfiprintf_r+0x130>
 800b9b2:	7863      	ldrb	r3, [r4, #1]
 800b9b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9b6:	d132      	bne.n	800ba1e <_svfiprintf_r+0x186>
 800b9b8:	9b03      	ldr	r3, [sp, #12]
 800b9ba:	1d1a      	adds	r2, r3, #4
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	9203      	str	r2, [sp, #12]
 800b9c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b9c4:	3402      	adds	r4, #2
 800b9c6:	9305      	str	r3, [sp, #20]
 800b9c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba8c <_svfiprintf_r+0x1f4>
 800b9cc:	7821      	ldrb	r1, [r4, #0]
 800b9ce:	2203      	movs	r2, #3
 800b9d0:	4650      	mov	r0, sl
 800b9d2:	f7f4 fbfd 	bl	80001d0 <memchr>
 800b9d6:	b138      	cbz	r0, 800b9e8 <_svfiprintf_r+0x150>
 800b9d8:	9b04      	ldr	r3, [sp, #16]
 800b9da:	eba0 000a 	sub.w	r0, r0, sl
 800b9de:	2240      	movs	r2, #64	@ 0x40
 800b9e0:	4082      	lsls	r2, r0
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	3401      	adds	r4, #1
 800b9e6:	9304      	str	r3, [sp, #16]
 800b9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ec:	4824      	ldr	r0, [pc, #144]	@ (800ba80 <_svfiprintf_r+0x1e8>)
 800b9ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b9f2:	2206      	movs	r2, #6
 800b9f4:	f7f4 fbec 	bl	80001d0 <memchr>
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	d036      	beq.n	800ba6a <_svfiprintf_r+0x1d2>
 800b9fc:	4b21      	ldr	r3, [pc, #132]	@ (800ba84 <_svfiprintf_r+0x1ec>)
 800b9fe:	bb1b      	cbnz	r3, 800ba48 <_svfiprintf_r+0x1b0>
 800ba00:	9b03      	ldr	r3, [sp, #12]
 800ba02:	3307      	adds	r3, #7
 800ba04:	f023 0307 	bic.w	r3, r3, #7
 800ba08:	3308      	adds	r3, #8
 800ba0a:	9303      	str	r3, [sp, #12]
 800ba0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba0e:	4433      	add	r3, r6
 800ba10:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba12:	e76a      	b.n	800b8ea <_svfiprintf_r+0x52>
 800ba14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba18:	460c      	mov	r4, r1
 800ba1a:	2001      	movs	r0, #1
 800ba1c:	e7a8      	b.n	800b970 <_svfiprintf_r+0xd8>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	3401      	adds	r4, #1
 800ba22:	9305      	str	r3, [sp, #20]
 800ba24:	4619      	mov	r1, r3
 800ba26:	f04f 0c0a 	mov.w	ip, #10
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba30:	3a30      	subs	r2, #48	@ 0x30
 800ba32:	2a09      	cmp	r2, #9
 800ba34:	d903      	bls.n	800ba3e <_svfiprintf_r+0x1a6>
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d0c6      	beq.n	800b9c8 <_svfiprintf_r+0x130>
 800ba3a:	9105      	str	r1, [sp, #20]
 800ba3c:	e7c4      	b.n	800b9c8 <_svfiprintf_r+0x130>
 800ba3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba42:	4604      	mov	r4, r0
 800ba44:	2301      	movs	r3, #1
 800ba46:	e7f0      	b.n	800ba2a <_svfiprintf_r+0x192>
 800ba48:	ab03      	add	r3, sp, #12
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	462a      	mov	r2, r5
 800ba4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ba88 <_svfiprintf_r+0x1f0>)
 800ba50:	a904      	add	r1, sp, #16
 800ba52:	4638      	mov	r0, r7
 800ba54:	f7fe fb2c 	bl	800a0b0 <_printf_float>
 800ba58:	1c42      	adds	r2, r0, #1
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	d1d6      	bne.n	800ba0c <_svfiprintf_r+0x174>
 800ba5e:	89ab      	ldrh	r3, [r5, #12]
 800ba60:	065b      	lsls	r3, r3, #25
 800ba62:	f53f af2d 	bmi.w	800b8c0 <_svfiprintf_r+0x28>
 800ba66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba68:	e72c      	b.n	800b8c4 <_svfiprintf_r+0x2c>
 800ba6a:	ab03      	add	r3, sp, #12
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	462a      	mov	r2, r5
 800ba70:	4b05      	ldr	r3, [pc, #20]	@ (800ba88 <_svfiprintf_r+0x1f0>)
 800ba72:	a904      	add	r1, sp, #16
 800ba74:	4638      	mov	r0, r7
 800ba76:	f7fe fdb3 	bl	800a5e0 <_printf_i>
 800ba7a:	e7ed      	b.n	800ba58 <_svfiprintf_r+0x1c0>
 800ba7c:	0800cf21 	.word	0x0800cf21
 800ba80:	0800cf2b 	.word	0x0800cf2b
 800ba84:	0800a0b1 	.word	0x0800a0b1
 800ba88:	0800b7e1 	.word	0x0800b7e1
 800ba8c:	0800cf27 	.word	0x0800cf27

0800ba90 <__sfputc_r>:
 800ba90:	6893      	ldr	r3, [r2, #8]
 800ba92:	3b01      	subs	r3, #1
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	b410      	push	{r4}
 800ba98:	6093      	str	r3, [r2, #8]
 800ba9a:	da08      	bge.n	800baae <__sfputc_r+0x1e>
 800ba9c:	6994      	ldr	r4, [r2, #24]
 800ba9e:	42a3      	cmp	r3, r4
 800baa0:	db01      	blt.n	800baa6 <__sfputc_r+0x16>
 800baa2:	290a      	cmp	r1, #10
 800baa4:	d103      	bne.n	800baae <__sfputc_r+0x1e>
 800baa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baaa:	f000 be88 	b.w	800c7be <__swbuf_r>
 800baae:	6813      	ldr	r3, [r2, #0]
 800bab0:	1c58      	adds	r0, r3, #1
 800bab2:	6010      	str	r0, [r2, #0]
 800bab4:	7019      	strb	r1, [r3, #0]
 800bab6:	4608      	mov	r0, r1
 800bab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800babc:	4770      	bx	lr

0800babe <__sfputs_r>:
 800babe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac0:	4606      	mov	r6, r0
 800bac2:	460f      	mov	r7, r1
 800bac4:	4614      	mov	r4, r2
 800bac6:	18d5      	adds	r5, r2, r3
 800bac8:	42ac      	cmp	r4, r5
 800baca:	d101      	bne.n	800bad0 <__sfputs_r+0x12>
 800bacc:	2000      	movs	r0, #0
 800bace:	e007      	b.n	800bae0 <__sfputs_r+0x22>
 800bad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad4:	463a      	mov	r2, r7
 800bad6:	4630      	mov	r0, r6
 800bad8:	f7ff ffda 	bl	800ba90 <__sfputc_r>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d1f3      	bne.n	800bac8 <__sfputs_r+0xa>
 800bae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bae4 <_vfiprintf_r>:
 800bae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae8:	460d      	mov	r5, r1
 800baea:	b09d      	sub	sp, #116	@ 0x74
 800baec:	4614      	mov	r4, r2
 800baee:	4698      	mov	r8, r3
 800baf0:	4606      	mov	r6, r0
 800baf2:	b118      	cbz	r0, 800bafc <_vfiprintf_r+0x18>
 800baf4:	6a03      	ldr	r3, [r0, #32]
 800baf6:	b90b      	cbnz	r3, 800bafc <_vfiprintf_r+0x18>
 800baf8:	f7fe ff3e 	bl	800a978 <__sinit>
 800bafc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bafe:	07d9      	lsls	r1, r3, #31
 800bb00:	d405      	bmi.n	800bb0e <_vfiprintf_r+0x2a>
 800bb02:	89ab      	ldrh	r3, [r5, #12]
 800bb04:	059a      	lsls	r2, r3, #22
 800bb06:	d402      	bmi.n	800bb0e <_vfiprintf_r+0x2a>
 800bb08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb0a:	f7ff f812 	bl	800ab32 <__retarget_lock_acquire_recursive>
 800bb0e:	89ab      	ldrh	r3, [r5, #12]
 800bb10:	071b      	lsls	r3, r3, #28
 800bb12:	d501      	bpl.n	800bb18 <_vfiprintf_r+0x34>
 800bb14:	692b      	ldr	r3, [r5, #16]
 800bb16:	b99b      	cbnz	r3, 800bb40 <_vfiprintf_r+0x5c>
 800bb18:	4629      	mov	r1, r5
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f000 fe8e 	bl	800c83c <__swsetup_r>
 800bb20:	b170      	cbz	r0, 800bb40 <_vfiprintf_r+0x5c>
 800bb22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb24:	07dc      	lsls	r4, r3, #31
 800bb26:	d504      	bpl.n	800bb32 <_vfiprintf_r+0x4e>
 800bb28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb2c:	b01d      	add	sp, #116	@ 0x74
 800bb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb32:	89ab      	ldrh	r3, [r5, #12]
 800bb34:	0598      	lsls	r0, r3, #22
 800bb36:	d4f7      	bmi.n	800bb28 <_vfiprintf_r+0x44>
 800bb38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb3a:	f7fe fffb 	bl	800ab34 <__retarget_lock_release_recursive>
 800bb3e:	e7f3      	b.n	800bb28 <_vfiprintf_r+0x44>
 800bb40:	2300      	movs	r3, #0
 800bb42:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb44:	2320      	movs	r3, #32
 800bb46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb4e:	2330      	movs	r3, #48	@ 0x30
 800bb50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd00 <_vfiprintf_r+0x21c>
 800bb54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb58:	f04f 0901 	mov.w	r9, #1
 800bb5c:	4623      	mov	r3, r4
 800bb5e:	469a      	mov	sl, r3
 800bb60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb64:	b10a      	cbz	r2, 800bb6a <_vfiprintf_r+0x86>
 800bb66:	2a25      	cmp	r2, #37	@ 0x25
 800bb68:	d1f9      	bne.n	800bb5e <_vfiprintf_r+0x7a>
 800bb6a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb6e:	d00b      	beq.n	800bb88 <_vfiprintf_r+0xa4>
 800bb70:	465b      	mov	r3, fp
 800bb72:	4622      	mov	r2, r4
 800bb74:	4629      	mov	r1, r5
 800bb76:	4630      	mov	r0, r6
 800bb78:	f7ff ffa1 	bl	800babe <__sfputs_r>
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	f000 80a7 	beq.w	800bcd0 <_vfiprintf_r+0x1ec>
 800bb82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb84:	445a      	add	r2, fp
 800bb86:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb88:	f89a 3000 	ldrb.w	r3, [sl]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 809f 	beq.w	800bcd0 <_vfiprintf_r+0x1ec>
 800bb92:	2300      	movs	r3, #0
 800bb94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb9c:	f10a 0a01 	add.w	sl, sl, #1
 800bba0:	9304      	str	r3, [sp, #16]
 800bba2:	9307      	str	r3, [sp, #28]
 800bba4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bba8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbaa:	4654      	mov	r4, sl
 800bbac:	2205      	movs	r2, #5
 800bbae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbb2:	4853      	ldr	r0, [pc, #332]	@ (800bd00 <_vfiprintf_r+0x21c>)
 800bbb4:	f7f4 fb0c 	bl	80001d0 <memchr>
 800bbb8:	9a04      	ldr	r2, [sp, #16]
 800bbba:	b9d8      	cbnz	r0, 800bbf4 <_vfiprintf_r+0x110>
 800bbbc:	06d1      	lsls	r1, r2, #27
 800bbbe:	bf44      	itt	mi
 800bbc0:	2320      	movmi	r3, #32
 800bbc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbc6:	0713      	lsls	r3, r2, #28
 800bbc8:	bf44      	itt	mi
 800bbca:	232b      	movmi	r3, #43	@ 0x2b
 800bbcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbd0:	f89a 3000 	ldrb.w	r3, [sl]
 800bbd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbd6:	d015      	beq.n	800bc04 <_vfiprintf_r+0x120>
 800bbd8:	9a07      	ldr	r2, [sp, #28]
 800bbda:	4654      	mov	r4, sl
 800bbdc:	2000      	movs	r0, #0
 800bbde:	f04f 0c0a 	mov.w	ip, #10
 800bbe2:	4621      	mov	r1, r4
 800bbe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbe8:	3b30      	subs	r3, #48	@ 0x30
 800bbea:	2b09      	cmp	r3, #9
 800bbec:	d94b      	bls.n	800bc86 <_vfiprintf_r+0x1a2>
 800bbee:	b1b0      	cbz	r0, 800bc1e <_vfiprintf_r+0x13a>
 800bbf0:	9207      	str	r2, [sp, #28]
 800bbf2:	e014      	b.n	800bc1e <_vfiprintf_r+0x13a>
 800bbf4:	eba0 0308 	sub.w	r3, r0, r8
 800bbf8:	fa09 f303 	lsl.w	r3, r9, r3
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	9304      	str	r3, [sp, #16]
 800bc00:	46a2      	mov	sl, r4
 800bc02:	e7d2      	b.n	800bbaa <_vfiprintf_r+0xc6>
 800bc04:	9b03      	ldr	r3, [sp, #12]
 800bc06:	1d19      	adds	r1, r3, #4
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	9103      	str	r1, [sp, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	bfbb      	ittet	lt
 800bc10:	425b      	neglt	r3, r3
 800bc12:	f042 0202 	orrlt.w	r2, r2, #2
 800bc16:	9307      	strge	r3, [sp, #28]
 800bc18:	9307      	strlt	r3, [sp, #28]
 800bc1a:	bfb8      	it	lt
 800bc1c:	9204      	strlt	r2, [sp, #16]
 800bc1e:	7823      	ldrb	r3, [r4, #0]
 800bc20:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc22:	d10a      	bne.n	800bc3a <_vfiprintf_r+0x156>
 800bc24:	7863      	ldrb	r3, [r4, #1]
 800bc26:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc28:	d132      	bne.n	800bc90 <_vfiprintf_r+0x1ac>
 800bc2a:	9b03      	ldr	r3, [sp, #12]
 800bc2c:	1d1a      	adds	r2, r3, #4
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	9203      	str	r2, [sp, #12]
 800bc32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc36:	3402      	adds	r4, #2
 800bc38:	9305      	str	r3, [sp, #20]
 800bc3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd10 <_vfiprintf_r+0x22c>
 800bc3e:	7821      	ldrb	r1, [r4, #0]
 800bc40:	2203      	movs	r2, #3
 800bc42:	4650      	mov	r0, sl
 800bc44:	f7f4 fac4 	bl	80001d0 <memchr>
 800bc48:	b138      	cbz	r0, 800bc5a <_vfiprintf_r+0x176>
 800bc4a:	9b04      	ldr	r3, [sp, #16]
 800bc4c:	eba0 000a 	sub.w	r0, r0, sl
 800bc50:	2240      	movs	r2, #64	@ 0x40
 800bc52:	4082      	lsls	r2, r0
 800bc54:	4313      	orrs	r3, r2
 800bc56:	3401      	adds	r4, #1
 800bc58:	9304      	str	r3, [sp, #16]
 800bc5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5e:	4829      	ldr	r0, [pc, #164]	@ (800bd04 <_vfiprintf_r+0x220>)
 800bc60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc64:	2206      	movs	r2, #6
 800bc66:	f7f4 fab3 	bl	80001d0 <memchr>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d03f      	beq.n	800bcee <_vfiprintf_r+0x20a>
 800bc6e:	4b26      	ldr	r3, [pc, #152]	@ (800bd08 <_vfiprintf_r+0x224>)
 800bc70:	bb1b      	cbnz	r3, 800bcba <_vfiprintf_r+0x1d6>
 800bc72:	9b03      	ldr	r3, [sp, #12]
 800bc74:	3307      	adds	r3, #7
 800bc76:	f023 0307 	bic.w	r3, r3, #7
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	9303      	str	r3, [sp, #12]
 800bc7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc80:	443b      	add	r3, r7
 800bc82:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc84:	e76a      	b.n	800bb5c <_vfiprintf_r+0x78>
 800bc86:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	2001      	movs	r0, #1
 800bc8e:	e7a8      	b.n	800bbe2 <_vfiprintf_r+0xfe>
 800bc90:	2300      	movs	r3, #0
 800bc92:	3401      	adds	r4, #1
 800bc94:	9305      	str	r3, [sp, #20]
 800bc96:	4619      	mov	r1, r3
 800bc98:	f04f 0c0a 	mov.w	ip, #10
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bca2:	3a30      	subs	r2, #48	@ 0x30
 800bca4:	2a09      	cmp	r2, #9
 800bca6:	d903      	bls.n	800bcb0 <_vfiprintf_r+0x1cc>
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d0c6      	beq.n	800bc3a <_vfiprintf_r+0x156>
 800bcac:	9105      	str	r1, [sp, #20]
 800bcae:	e7c4      	b.n	800bc3a <_vfiprintf_r+0x156>
 800bcb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e7f0      	b.n	800bc9c <_vfiprintf_r+0x1b8>
 800bcba:	ab03      	add	r3, sp, #12
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	462a      	mov	r2, r5
 800bcc0:	4b12      	ldr	r3, [pc, #72]	@ (800bd0c <_vfiprintf_r+0x228>)
 800bcc2:	a904      	add	r1, sp, #16
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	f7fe f9f3 	bl	800a0b0 <_printf_float>
 800bcca:	4607      	mov	r7, r0
 800bccc:	1c78      	adds	r0, r7, #1
 800bcce:	d1d6      	bne.n	800bc7e <_vfiprintf_r+0x19a>
 800bcd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcd2:	07d9      	lsls	r1, r3, #31
 800bcd4:	d405      	bmi.n	800bce2 <_vfiprintf_r+0x1fe>
 800bcd6:	89ab      	ldrh	r3, [r5, #12]
 800bcd8:	059a      	lsls	r2, r3, #22
 800bcda:	d402      	bmi.n	800bce2 <_vfiprintf_r+0x1fe>
 800bcdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcde:	f7fe ff29 	bl	800ab34 <__retarget_lock_release_recursive>
 800bce2:	89ab      	ldrh	r3, [r5, #12]
 800bce4:	065b      	lsls	r3, r3, #25
 800bce6:	f53f af1f 	bmi.w	800bb28 <_vfiprintf_r+0x44>
 800bcea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcec:	e71e      	b.n	800bb2c <_vfiprintf_r+0x48>
 800bcee:	ab03      	add	r3, sp, #12
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	462a      	mov	r2, r5
 800bcf4:	4b05      	ldr	r3, [pc, #20]	@ (800bd0c <_vfiprintf_r+0x228>)
 800bcf6:	a904      	add	r1, sp, #16
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	f7fe fc71 	bl	800a5e0 <_printf_i>
 800bcfe:	e7e4      	b.n	800bcca <_vfiprintf_r+0x1e6>
 800bd00:	0800cf21 	.word	0x0800cf21
 800bd04:	0800cf2b 	.word	0x0800cf2b
 800bd08:	0800a0b1 	.word	0x0800a0b1
 800bd0c:	0800babf 	.word	0x0800babf
 800bd10:	0800cf27 	.word	0x0800cf27

0800bd14 <malloc>:
 800bd14:	4b02      	ldr	r3, [pc, #8]	@ (800bd20 <malloc+0xc>)
 800bd16:	4601      	mov	r1, r0
 800bd18:	6818      	ldr	r0, [r3, #0]
 800bd1a:	f000 b825 	b.w	800bd68 <_malloc_r>
 800bd1e:	bf00      	nop
 800bd20:	20000018 	.word	0x20000018

0800bd24 <sbrk_aligned>:
 800bd24:	b570      	push	{r4, r5, r6, lr}
 800bd26:	4e0f      	ldr	r6, [pc, #60]	@ (800bd64 <sbrk_aligned+0x40>)
 800bd28:	460c      	mov	r4, r1
 800bd2a:	6831      	ldr	r1, [r6, #0]
 800bd2c:	4605      	mov	r5, r0
 800bd2e:	b911      	cbnz	r1, 800bd36 <sbrk_aligned+0x12>
 800bd30:	f000 feac 	bl	800ca8c <_sbrk_r>
 800bd34:	6030      	str	r0, [r6, #0]
 800bd36:	4621      	mov	r1, r4
 800bd38:	4628      	mov	r0, r5
 800bd3a:	f000 fea7 	bl	800ca8c <_sbrk_r>
 800bd3e:	1c43      	adds	r3, r0, #1
 800bd40:	d103      	bne.n	800bd4a <sbrk_aligned+0x26>
 800bd42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bd46:	4620      	mov	r0, r4
 800bd48:	bd70      	pop	{r4, r5, r6, pc}
 800bd4a:	1cc4      	adds	r4, r0, #3
 800bd4c:	f024 0403 	bic.w	r4, r4, #3
 800bd50:	42a0      	cmp	r0, r4
 800bd52:	d0f8      	beq.n	800bd46 <sbrk_aligned+0x22>
 800bd54:	1a21      	subs	r1, r4, r0
 800bd56:	4628      	mov	r0, r5
 800bd58:	f000 fe98 	bl	800ca8c <_sbrk_r>
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d1f2      	bne.n	800bd46 <sbrk_aligned+0x22>
 800bd60:	e7ef      	b.n	800bd42 <sbrk_aligned+0x1e>
 800bd62:	bf00      	nop
 800bd64:	20001b4c 	.word	0x20001b4c

0800bd68 <_malloc_r>:
 800bd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd6c:	1ccd      	adds	r5, r1, #3
 800bd6e:	f025 0503 	bic.w	r5, r5, #3
 800bd72:	3508      	adds	r5, #8
 800bd74:	2d0c      	cmp	r5, #12
 800bd76:	bf38      	it	cc
 800bd78:	250c      	movcc	r5, #12
 800bd7a:	2d00      	cmp	r5, #0
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	db01      	blt.n	800bd84 <_malloc_r+0x1c>
 800bd80:	42a9      	cmp	r1, r5
 800bd82:	d904      	bls.n	800bd8e <_malloc_r+0x26>
 800bd84:	230c      	movs	r3, #12
 800bd86:	6033      	str	r3, [r6, #0]
 800bd88:	2000      	movs	r0, #0
 800bd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be64 <_malloc_r+0xfc>
 800bd92:	f000 f915 	bl	800bfc0 <__malloc_lock>
 800bd96:	f8d8 3000 	ldr.w	r3, [r8]
 800bd9a:	461c      	mov	r4, r3
 800bd9c:	bb44      	cbnz	r4, 800bdf0 <_malloc_r+0x88>
 800bd9e:	4629      	mov	r1, r5
 800bda0:	4630      	mov	r0, r6
 800bda2:	f7ff ffbf 	bl	800bd24 <sbrk_aligned>
 800bda6:	1c43      	adds	r3, r0, #1
 800bda8:	4604      	mov	r4, r0
 800bdaa:	d158      	bne.n	800be5e <_malloc_r+0xf6>
 800bdac:	f8d8 4000 	ldr.w	r4, [r8]
 800bdb0:	4627      	mov	r7, r4
 800bdb2:	2f00      	cmp	r7, #0
 800bdb4:	d143      	bne.n	800be3e <_malloc_r+0xd6>
 800bdb6:	2c00      	cmp	r4, #0
 800bdb8:	d04b      	beq.n	800be52 <_malloc_r+0xea>
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	eb04 0903 	add.w	r9, r4, r3
 800bdc4:	f000 fe62 	bl	800ca8c <_sbrk_r>
 800bdc8:	4581      	cmp	r9, r0
 800bdca:	d142      	bne.n	800be52 <_malloc_r+0xea>
 800bdcc:	6821      	ldr	r1, [r4, #0]
 800bdce:	1a6d      	subs	r5, r5, r1
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f7ff ffa6 	bl	800bd24 <sbrk_aligned>
 800bdd8:	3001      	adds	r0, #1
 800bdda:	d03a      	beq.n	800be52 <_malloc_r+0xea>
 800bddc:	6823      	ldr	r3, [r4, #0]
 800bdde:	442b      	add	r3, r5
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	f8d8 3000 	ldr.w	r3, [r8]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	bb62      	cbnz	r2, 800be44 <_malloc_r+0xdc>
 800bdea:	f8c8 7000 	str.w	r7, [r8]
 800bdee:	e00f      	b.n	800be10 <_malloc_r+0xa8>
 800bdf0:	6822      	ldr	r2, [r4, #0]
 800bdf2:	1b52      	subs	r2, r2, r5
 800bdf4:	d420      	bmi.n	800be38 <_malloc_r+0xd0>
 800bdf6:	2a0b      	cmp	r2, #11
 800bdf8:	d917      	bls.n	800be2a <_malloc_r+0xc2>
 800bdfa:	1961      	adds	r1, r4, r5
 800bdfc:	42a3      	cmp	r3, r4
 800bdfe:	6025      	str	r5, [r4, #0]
 800be00:	bf18      	it	ne
 800be02:	6059      	strne	r1, [r3, #4]
 800be04:	6863      	ldr	r3, [r4, #4]
 800be06:	bf08      	it	eq
 800be08:	f8c8 1000 	streq.w	r1, [r8]
 800be0c:	5162      	str	r2, [r4, r5]
 800be0e:	604b      	str	r3, [r1, #4]
 800be10:	4630      	mov	r0, r6
 800be12:	f000 f8db 	bl	800bfcc <__malloc_unlock>
 800be16:	f104 000b 	add.w	r0, r4, #11
 800be1a:	1d23      	adds	r3, r4, #4
 800be1c:	f020 0007 	bic.w	r0, r0, #7
 800be20:	1ac2      	subs	r2, r0, r3
 800be22:	bf1c      	itt	ne
 800be24:	1a1b      	subne	r3, r3, r0
 800be26:	50a3      	strne	r3, [r4, r2]
 800be28:	e7af      	b.n	800bd8a <_malloc_r+0x22>
 800be2a:	6862      	ldr	r2, [r4, #4]
 800be2c:	42a3      	cmp	r3, r4
 800be2e:	bf0c      	ite	eq
 800be30:	f8c8 2000 	streq.w	r2, [r8]
 800be34:	605a      	strne	r2, [r3, #4]
 800be36:	e7eb      	b.n	800be10 <_malloc_r+0xa8>
 800be38:	4623      	mov	r3, r4
 800be3a:	6864      	ldr	r4, [r4, #4]
 800be3c:	e7ae      	b.n	800bd9c <_malloc_r+0x34>
 800be3e:	463c      	mov	r4, r7
 800be40:	687f      	ldr	r7, [r7, #4]
 800be42:	e7b6      	b.n	800bdb2 <_malloc_r+0x4a>
 800be44:	461a      	mov	r2, r3
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	42a3      	cmp	r3, r4
 800be4a:	d1fb      	bne.n	800be44 <_malloc_r+0xdc>
 800be4c:	2300      	movs	r3, #0
 800be4e:	6053      	str	r3, [r2, #4]
 800be50:	e7de      	b.n	800be10 <_malloc_r+0xa8>
 800be52:	230c      	movs	r3, #12
 800be54:	6033      	str	r3, [r6, #0]
 800be56:	4630      	mov	r0, r6
 800be58:	f000 f8b8 	bl	800bfcc <__malloc_unlock>
 800be5c:	e794      	b.n	800bd88 <_malloc_r+0x20>
 800be5e:	6005      	str	r5, [r0, #0]
 800be60:	e7d6      	b.n	800be10 <_malloc_r+0xa8>
 800be62:	bf00      	nop
 800be64:	20001b50 	.word	0x20001b50

0800be68 <__sflush_r>:
 800be68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be70:	0716      	lsls	r6, r2, #28
 800be72:	4605      	mov	r5, r0
 800be74:	460c      	mov	r4, r1
 800be76:	d454      	bmi.n	800bf22 <__sflush_r+0xba>
 800be78:	684b      	ldr	r3, [r1, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dc02      	bgt.n	800be84 <__sflush_r+0x1c>
 800be7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be80:	2b00      	cmp	r3, #0
 800be82:	dd48      	ble.n	800bf16 <__sflush_r+0xae>
 800be84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be86:	2e00      	cmp	r6, #0
 800be88:	d045      	beq.n	800bf16 <__sflush_r+0xae>
 800be8a:	2300      	movs	r3, #0
 800be8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be90:	682f      	ldr	r7, [r5, #0]
 800be92:	6a21      	ldr	r1, [r4, #32]
 800be94:	602b      	str	r3, [r5, #0]
 800be96:	d030      	beq.n	800befa <__sflush_r+0x92>
 800be98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be9a:	89a3      	ldrh	r3, [r4, #12]
 800be9c:	0759      	lsls	r1, r3, #29
 800be9e:	d505      	bpl.n	800beac <__sflush_r+0x44>
 800bea0:	6863      	ldr	r3, [r4, #4]
 800bea2:	1ad2      	subs	r2, r2, r3
 800bea4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bea6:	b10b      	cbz	r3, 800beac <__sflush_r+0x44>
 800bea8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800beaa:	1ad2      	subs	r2, r2, r3
 800beac:	2300      	movs	r3, #0
 800beae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800beb0:	6a21      	ldr	r1, [r4, #32]
 800beb2:	4628      	mov	r0, r5
 800beb4:	47b0      	blx	r6
 800beb6:	1c43      	adds	r3, r0, #1
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	d106      	bne.n	800beca <__sflush_r+0x62>
 800bebc:	6829      	ldr	r1, [r5, #0]
 800bebe:	291d      	cmp	r1, #29
 800bec0:	d82b      	bhi.n	800bf1a <__sflush_r+0xb2>
 800bec2:	4a2a      	ldr	r2, [pc, #168]	@ (800bf6c <__sflush_r+0x104>)
 800bec4:	410a      	asrs	r2, r1
 800bec6:	07d6      	lsls	r6, r2, #31
 800bec8:	d427      	bmi.n	800bf1a <__sflush_r+0xb2>
 800beca:	2200      	movs	r2, #0
 800becc:	6062      	str	r2, [r4, #4]
 800bece:	04d9      	lsls	r1, r3, #19
 800bed0:	6922      	ldr	r2, [r4, #16]
 800bed2:	6022      	str	r2, [r4, #0]
 800bed4:	d504      	bpl.n	800bee0 <__sflush_r+0x78>
 800bed6:	1c42      	adds	r2, r0, #1
 800bed8:	d101      	bne.n	800bede <__sflush_r+0x76>
 800beda:	682b      	ldr	r3, [r5, #0]
 800bedc:	b903      	cbnz	r3, 800bee0 <__sflush_r+0x78>
 800bede:	6560      	str	r0, [r4, #84]	@ 0x54
 800bee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bee2:	602f      	str	r7, [r5, #0]
 800bee4:	b1b9      	cbz	r1, 800bf16 <__sflush_r+0xae>
 800bee6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800beea:	4299      	cmp	r1, r3
 800beec:	d002      	beq.n	800bef4 <__sflush_r+0x8c>
 800beee:	4628      	mov	r0, r5
 800bef0:	f000 fe2e 	bl	800cb50 <_free_r>
 800bef4:	2300      	movs	r3, #0
 800bef6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bef8:	e00d      	b.n	800bf16 <__sflush_r+0xae>
 800befa:	2301      	movs	r3, #1
 800befc:	4628      	mov	r0, r5
 800befe:	47b0      	blx	r6
 800bf00:	4602      	mov	r2, r0
 800bf02:	1c50      	adds	r0, r2, #1
 800bf04:	d1c9      	bne.n	800be9a <__sflush_r+0x32>
 800bf06:	682b      	ldr	r3, [r5, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d0c6      	beq.n	800be9a <__sflush_r+0x32>
 800bf0c:	2b1d      	cmp	r3, #29
 800bf0e:	d001      	beq.n	800bf14 <__sflush_r+0xac>
 800bf10:	2b16      	cmp	r3, #22
 800bf12:	d11e      	bne.n	800bf52 <__sflush_r+0xea>
 800bf14:	602f      	str	r7, [r5, #0]
 800bf16:	2000      	movs	r0, #0
 800bf18:	e022      	b.n	800bf60 <__sflush_r+0xf8>
 800bf1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf1e:	b21b      	sxth	r3, r3
 800bf20:	e01b      	b.n	800bf5a <__sflush_r+0xf2>
 800bf22:	690f      	ldr	r7, [r1, #16]
 800bf24:	2f00      	cmp	r7, #0
 800bf26:	d0f6      	beq.n	800bf16 <__sflush_r+0xae>
 800bf28:	0793      	lsls	r3, r2, #30
 800bf2a:	680e      	ldr	r6, [r1, #0]
 800bf2c:	bf08      	it	eq
 800bf2e:	694b      	ldreq	r3, [r1, #20]
 800bf30:	600f      	str	r7, [r1, #0]
 800bf32:	bf18      	it	ne
 800bf34:	2300      	movne	r3, #0
 800bf36:	eba6 0807 	sub.w	r8, r6, r7
 800bf3a:	608b      	str	r3, [r1, #8]
 800bf3c:	f1b8 0f00 	cmp.w	r8, #0
 800bf40:	dde9      	ble.n	800bf16 <__sflush_r+0xae>
 800bf42:	6a21      	ldr	r1, [r4, #32]
 800bf44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf46:	4643      	mov	r3, r8
 800bf48:	463a      	mov	r2, r7
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	47b0      	blx	r6
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	dc08      	bgt.n	800bf64 <__sflush_r+0xfc>
 800bf52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf64:	4407      	add	r7, r0
 800bf66:	eba8 0800 	sub.w	r8, r8, r0
 800bf6a:	e7e7      	b.n	800bf3c <__sflush_r+0xd4>
 800bf6c:	dfbffffe 	.word	0xdfbffffe

0800bf70 <_fflush_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	690b      	ldr	r3, [r1, #16]
 800bf74:	4605      	mov	r5, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	b913      	cbnz	r3, 800bf80 <_fflush_r+0x10>
 800bf7a:	2500      	movs	r5, #0
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	bd38      	pop	{r3, r4, r5, pc}
 800bf80:	b118      	cbz	r0, 800bf8a <_fflush_r+0x1a>
 800bf82:	6a03      	ldr	r3, [r0, #32]
 800bf84:	b90b      	cbnz	r3, 800bf8a <_fflush_r+0x1a>
 800bf86:	f7fe fcf7 	bl	800a978 <__sinit>
 800bf8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0f3      	beq.n	800bf7a <_fflush_r+0xa>
 800bf92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf94:	07d0      	lsls	r0, r2, #31
 800bf96:	d404      	bmi.n	800bfa2 <_fflush_r+0x32>
 800bf98:	0599      	lsls	r1, r3, #22
 800bf9a:	d402      	bmi.n	800bfa2 <_fflush_r+0x32>
 800bf9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf9e:	f7fe fdc8 	bl	800ab32 <__retarget_lock_acquire_recursive>
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	f7ff ff5f 	bl	800be68 <__sflush_r>
 800bfaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfac:	07da      	lsls	r2, r3, #31
 800bfae:	4605      	mov	r5, r0
 800bfb0:	d4e4      	bmi.n	800bf7c <_fflush_r+0xc>
 800bfb2:	89a3      	ldrh	r3, [r4, #12]
 800bfb4:	059b      	lsls	r3, r3, #22
 800bfb6:	d4e1      	bmi.n	800bf7c <_fflush_r+0xc>
 800bfb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfba:	f7fe fdbb 	bl	800ab34 <__retarget_lock_release_recursive>
 800bfbe:	e7dd      	b.n	800bf7c <_fflush_r+0xc>

0800bfc0 <__malloc_lock>:
 800bfc0:	4801      	ldr	r0, [pc, #4]	@ (800bfc8 <__malloc_lock+0x8>)
 800bfc2:	f7fe bdb6 	b.w	800ab32 <__retarget_lock_acquire_recursive>
 800bfc6:	bf00      	nop
 800bfc8:	20001b48 	.word	0x20001b48

0800bfcc <__malloc_unlock>:
 800bfcc:	4801      	ldr	r0, [pc, #4]	@ (800bfd4 <__malloc_unlock+0x8>)
 800bfce:	f7fe bdb1 	b.w	800ab34 <__retarget_lock_release_recursive>
 800bfd2:	bf00      	nop
 800bfd4:	20001b48 	.word	0x20001b48

0800bfd8 <_Balloc>:
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	69c6      	ldr	r6, [r0, #28]
 800bfdc:	4604      	mov	r4, r0
 800bfde:	460d      	mov	r5, r1
 800bfe0:	b976      	cbnz	r6, 800c000 <_Balloc+0x28>
 800bfe2:	2010      	movs	r0, #16
 800bfe4:	f7ff fe96 	bl	800bd14 <malloc>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	61e0      	str	r0, [r4, #28]
 800bfec:	b920      	cbnz	r0, 800bff8 <_Balloc+0x20>
 800bfee:	4b18      	ldr	r3, [pc, #96]	@ (800c050 <_Balloc+0x78>)
 800bff0:	4818      	ldr	r0, [pc, #96]	@ (800c054 <_Balloc+0x7c>)
 800bff2:	216b      	movs	r1, #107	@ 0x6b
 800bff4:	f000 fd7a 	bl	800caec <__assert_func>
 800bff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bffc:	6006      	str	r6, [r0, #0]
 800bffe:	60c6      	str	r6, [r0, #12]
 800c000:	69e6      	ldr	r6, [r4, #28]
 800c002:	68f3      	ldr	r3, [r6, #12]
 800c004:	b183      	cbz	r3, 800c028 <_Balloc+0x50>
 800c006:	69e3      	ldr	r3, [r4, #28]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c00e:	b9b8      	cbnz	r0, 800c040 <_Balloc+0x68>
 800c010:	2101      	movs	r1, #1
 800c012:	fa01 f605 	lsl.w	r6, r1, r5
 800c016:	1d72      	adds	r2, r6, #5
 800c018:	0092      	lsls	r2, r2, #2
 800c01a:	4620      	mov	r0, r4
 800c01c:	f000 fd84 	bl	800cb28 <_calloc_r>
 800c020:	b160      	cbz	r0, 800c03c <_Balloc+0x64>
 800c022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c026:	e00e      	b.n	800c046 <_Balloc+0x6e>
 800c028:	2221      	movs	r2, #33	@ 0x21
 800c02a:	2104      	movs	r1, #4
 800c02c:	4620      	mov	r0, r4
 800c02e:	f000 fd7b 	bl	800cb28 <_calloc_r>
 800c032:	69e3      	ldr	r3, [r4, #28]
 800c034:	60f0      	str	r0, [r6, #12]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1e4      	bne.n	800c006 <_Balloc+0x2e>
 800c03c:	2000      	movs	r0, #0
 800c03e:	bd70      	pop	{r4, r5, r6, pc}
 800c040:	6802      	ldr	r2, [r0, #0]
 800c042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c046:	2300      	movs	r3, #0
 800c048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c04c:	e7f7      	b.n	800c03e <_Balloc+0x66>
 800c04e:	bf00      	nop
 800c050:	0800cea1 	.word	0x0800cea1
 800c054:	0800cf32 	.word	0x0800cf32

0800c058 <_Bfree>:
 800c058:	b570      	push	{r4, r5, r6, lr}
 800c05a:	69c6      	ldr	r6, [r0, #28]
 800c05c:	4605      	mov	r5, r0
 800c05e:	460c      	mov	r4, r1
 800c060:	b976      	cbnz	r6, 800c080 <_Bfree+0x28>
 800c062:	2010      	movs	r0, #16
 800c064:	f7ff fe56 	bl	800bd14 <malloc>
 800c068:	4602      	mov	r2, r0
 800c06a:	61e8      	str	r0, [r5, #28]
 800c06c:	b920      	cbnz	r0, 800c078 <_Bfree+0x20>
 800c06e:	4b09      	ldr	r3, [pc, #36]	@ (800c094 <_Bfree+0x3c>)
 800c070:	4809      	ldr	r0, [pc, #36]	@ (800c098 <_Bfree+0x40>)
 800c072:	218f      	movs	r1, #143	@ 0x8f
 800c074:	f000 fd3a 	bl	800caec <__assert_func>
 800c078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c07c:	6006      	str	r6, [r0, #0]
 800c07e:	60c6      	str	r6, [r0, #12]
 800c080:	b13c      	cbz	r4, 800c092 <_Bfree+0x3a>
 800c082:	69eb      	ldr	r3, [r5, #28]
 800c084:	6862      	ldr	r2, [r4, #4]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c08c:	6021      	str	r1, [r4, #0]
 800c08e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	0800cea1 	.word	0x0800cea1
 800c098:	0800cf32 	.word	0x0800cf32

0800c09c <__multadd>:
 800c09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a0:	690d      	ldr	r5, [r1, #16]
 800c0a2:	4607      	mov	r7, r0
 800c0a4:	460c      	mov	r4, r1
 800c0a6:	461e      	mov	r6, r3
 800c0a8:	f101 0c14 	add.w	ip, r1, #20
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	f8dc 3000 	ldr.w	r3, [ip]
 800c0b2:	b299      	uxth	r1, r3
 800c0b4:	fb02 6101 	mla	r1, r2, r1, r6
 800c0b8:	0c1e      	lsrs	r6, r3, #16
 800c0ba:	0c0b      	lsrs	r3, r1, #16
 800c0bc:	fb02 3306 	mla	r3, r2, r6, r3
 800c0c0:	b289      	uxth	r1, r1
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0c8:	4285      	cmp	r5, r0
 800c0ca:	f84c 1b04 	str.w	r1, [ip], #4
 800c0ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0d2:	dcec      	bgt.n	800c0ae <__multadd+0x12>
 800c0d4:	b30e      	cbz	r6, 800c11a <__multadd+0x7e>
 800c0d6:	68a3      	ldr	r3, [r4, #8]
 800c0d8:	42ab      	cmp	r3, r5
 800c0da:	dc19      	bgt.n	800c110 <__multadd+0x74>
 800c0dc:	6861      	ldr	r1, [r4, #4]
 800c0de:	4638      	mov	r0, r7
 800c0e0:	3101      	adds	r1, #1
 800c0e2:	f7ff ff79 	bl	800bfd8 <_Balloc>
 800c0e6:	4680      	mov	r8, r0
 800c0e8:	b928      	cbnz	r0, 800c0f6 <__multadd+0x5a>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c120 <__multadd+0x84>)
 800c0ee:	480d      	ldr	r0, [pc, #52]	@ (800c124 <__multadd+0x88>)
 800c0f0:	21ba      	movs	r1, #186	@ 0xba
 800c0f2:	f000 fcfb 	bl	800caec <__assert_func>
 800c0f6:	6922      	ldr	r2, [r4, #16]
 800c0f8:	3202      	adds	r2, #2
 800c0fa:	f104 010c 	add.w	r1, r4, #12
 800c0fe:	0092      	lsls	r2, r2, #2
 800c100:	300c      	adds	r0, #12
 800c102:	f000 fce5 	bl	800cad0 <memcpy>
 800c106:	4621      	mov	r1, r4
 800c108:	4638      	mov	r0, r7
 800c10a:	f7ff ffa5 	bl	800c058 <_Bfree>
 800c10e:	4644      	mov	r4, r8
 800c110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c114:	3501      	adds	r5, #1
 800c116:	615e      	str	r6, [r3, #20]
 800c118:	6125      	str	r5, [r4, #16]
 800c11a:	4620      	mov	r0, r4
 800c11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c120:	0800cf10 	.word	0x0800cf10
 800c124:	0800cf32 	.word	0x0800cf32

0800c128 <__hi0bits>:
 800c128:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c12c:	4603      	mov	r3, r0
 800c12e:	bf36      	itet	cc
 800c130:	0403      	lslcc	r3, r0, #16
 800c132:	2000      	movcs	r0, #0
 800c134:	2010      	movcc	r0, #16
 800c136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c13a:	bf3c      	itt	cc
 800c13c:	021b      	lslcc	r3, r3, #8
 800c13e:	3008      	addcc	r0, #8
 800c140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c144:	bf3c      	itt	cc
 800c146:	011b      	lslcc	r3, r3, #4
 800c148:	3004      	addcc	r0, #4
 800c14a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c14e:	bf3c      	itt	cc
 800c150:	009b      	lslcc	r3, r3, #2
 800c152:	3002      	addcc	r0, #2
 800c154:	2b00      	cmp	r3, #0
 800c156:	db05      	blt.n	800c164 <__hi0bits+0x3c>
 800c158:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c15c:	f100 0001 	add.w	r0, r0, #1
 800c160:	bf08      	it	eq
 800c162:	2020      	moveq	r0, #32
 800c164:	4770      	bx	lr

0800c166 <__lo0bits>:
 800c166:	6803      	ldr	r3, [r0, #0]
 800c168:	4602      	mov	r2, r0
 800c16a:	f013 0007 	ands.w	r0, r3, #7
 800c16e:	d00b      	beq.n	800c188 <__lo0bits+0x22>
 800c170:	07d9      	lsls	r1, r3, #31
 800c172:	d421      	bmi.n	800c1b8 <__lo0bits+0x52>
 800c174:	0798      	lsls	r0, r3, #30
 800c176:	bf49      	itett	mi
 800c178:	085b      	lsrmi	r3, r3, #1
 800c17a:	089b      	lsrpl	r3, r3, #2
 800c17c:	2001      	movmi	r0, #1
 800c17e:	6013      	strmi	r3, [r2, #0]
 800c180:	bf5c      	itt	pl
 800c182:	6013      	strpl	r3, [r2, #0]
 800c184:	2002      	movpl	r0, #2
 800c186:	4770      	bx	lr
 800c188:	b299      	uxth	r1, r3
 800c18a:	b909      	cbnz	r1, 800c190 <__lo0bits+0x2a>
 800c18c:	0c1b      	lsrs	r3, r3, #16
 800c18e:	2010      	movs	r0, #16
 800c190:	b2d9      	uxtb	r1, r3
 800c192:	b909      	cbnz	r1, 800c198 <__lo0bits+0x32>
 800c194:	3008      	adds	r0, #8
 800c196:	0a1b      	lsrs	r3, r3, #8
 800c198:	0719      	lsls	r1, r3, #28
 800c19a:	bf04      	itt	eq
 800c19c:	091b      	lsreq	r3, r3, #4
 800c19e:	3004      	addeq	r0, #4
 800c1a0:	0799      	lsls	r1, r3, #30
 800c1a2:	bf04      	itt	eq
 800c1a4:	089b      	lsreq	r3, r3, #2
 800c1a6:	3002      	addeq	r0, #2
 800c1a8:	07d9      	lsls	r1, r3, #31
 800c1aa:	d403      	bmi.n	800c1b4 <__lo0bits+0x4e>
 800c1ac:	085b      	lsrs	r3, r3, #1
 800c1ae:	f100 0001 	add.w	r0, r0, #1
 800c1b2:	d003      	beq.n	800c1bc <__lo0bits+0x56>
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	4770      	bx	lr
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	4770      	bx	lr
 800c1bc:	2020      	movs	r0, #32
 800c1be:	4770      	bx	lr

0800c1c0 <__i2b>:
 800c1c0:	b510      	push	{r4, lr}
 800c1c2:	460c      	mov	r4, r1
 800c1c4:	2101      	movs	r1, #1
 800c1c6:	f7ff ff07 	bl	800bfd8 <_Balloc>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	b928      	cbnz	r0, 800c1da <__i2b+0x1a>
 800c1ce:	4b05      	ldr	r3, [pc, #20]	@ (800c1e4 <__i2b+0x24>)
 800c1d0:	4805      	ldr	r0, [pc, #20]	@ (800c1e8 <__i2b+0x28>)
 800c1d2:	f240 1145 	movw	r1, #325	@ 0x145
 800c1d6:	f000 fc89 	bl	800caec <__assert_func>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	6144      	str	r4, [r0, #20]
 800c1de:	6103      	str	r3, [r0, #16]
 800c1e0:	bd10      	pop	{r4, pc}
 800c1e2:	bf00      	nop
 800c1e4:	0800cf10 	.word	0x0800cf10
 800c1e8:	0800cf32 	.word	0x0800cf32

0800c1ec <__multiply>:
 800c1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f0:	4614      	mov	r4, r2
 800c1f2:	690a      	ldr	r2, [r1, #16]
 800c1f4:	6923      	ldr	r3, [r4, #16]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	bfa8      	it	ge
 800c1fa:	4623      	movge	r3, r4
 800c1fc:	460f      	mov	r7, r1
 800c1fe:	bfa4      	itt	ge
 800c200:	460c      	movge	r4, r1
 800c202:	461f      	movge	r7, r3
 800c204:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c208:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c20c:	68a3      	ldr	r3, [r4, #8]
 800c20e:	6861      	ldr	r1, [r4, #4]
 800c210:	eb0a 0609 	add.w	r6, sl, r9
 800c214:	42b3      	cmp	r3, r6
 800c216:	b085      	sub	sp, #20
 800c218:	bfb8      	it	lt
 800c21a:	3101      	addlt	r1, #1
 800c21c:	f7ff fedc 	bl	800bfd8 <_Balloc>
 800c220:	b930      	cbnz	r0, 800c230 <__multiply+0x44>
 800c222:	4602      	mov	r2, r0
 800c224:	4b44      	ldr	r3, [pc, #272]	@ (800c338 <__multiply+0x14c>)
 800c226:	4845      	ldr	r0, [pc, #276]	@ (800c33c <__multiply+0x150>)
 800c228:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c22c:	f000 fc5e 	bl	800caec <__assert_func>
 800c230:	f100 0514 	add.w	r5, r0, #20
 800c234:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c238:	462b      	mov	r3, r5
 800c23a:	2200      	movs	r2, #0
 800c23c:	4543      	cmp	r3, r8
 800c23e:	d321      	bcc.n	800c284 <__multiply+0x98>
 800c240:	f107 0114 	add.w	r1, r7, #20
 800c244:	f104 0214 	add.w	r2, r4, #20
 800c248:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c24c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c250:	9302      	str	r3, [sp, #8]
 800c252:	1b13      	subs	r3, r2, r4
 800c254:	3b15      	subs	r3, #21
 800c256:	f023 0303 	bic.w	r3, r3, #3
 800c25a:	3304      	adds	r3, #4
 800c25c:	f104 0715 	add.w	r7, r4, #21
 800c260:	42ba      	cmp	r2, r7
 800c262:	bf38      	it	cc
 800c264:	2304      	movcc	r3, #4
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	9b02      	ldr	r3, [sp, #8]
 800c26a:	9103      	str	r1, [sp, #12]
 800c26c:	428b      	cmp	r3, r1
 800c26e:	d80c      	bhi.n	800c28a <__multiply+0x9e>
 800c270:	2e00      	cmp	r6, #0
 800c272:	dd03      	ble.n	800c27c <__multiply+0x90>
 800c274:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d05b      	beq.n	800c334 <__multiply+0x148>
 800c27c:	6106      	str	r6, [r0, #16]
 800c27e:	b005      	add	sp, #20
 800c280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c284:	f843 2b04 	str.w	r2, [r3], #4
 800c288:	e7d8      	b.n	800c23c <__multiply+0x50>
 800c28a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c28e:	f1ba 0f00 	cmp.w	sl, #0
 800c292:	d024      	beq.n	800c2de <__multiply+0xf2>
 800c294:	f104 0e14 	add.w	lr, r4, #20
 800c298:	46a9      	mov	r9, r5
 800c29a:	f04f 0c00 	mov.w	ip, #0
 800c29e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c2a2:	f8d9 3000 	ldr.w	r3, [r9]
 800c2a6:	fa1f fb87 	uxth.w	fp, r7
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	fb0a 330b 	mla	r3, sl, fp, r3
 800c2b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c2b4:	f8d9 7000 	ldr.w	r7, [r9]
 800c2b8:	4463      	add	r3, ip
 800c2ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c2be:	fb0a c70b 	mla	r7, sl, fp, ip
 800c2c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c2cc:	4572      	cmp	r2, lr
 800c2ce:	f849 3b04 	str.w	r3, [r9], #4
 800c2d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c2d6:	d8e2      	bhi.n	800c29e <__multiply+0xb2>
 800c2d8:	9b01      	ldr	r3, [sp, #4]
 800c2da:	f845 c003 	str.w	ip, [r5, r3]
 800c2de:	9b03      	ldr	r3, [sp, #12]
 800c2e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c2e4:	3104      	adds	r1, #4
 800c2e6:	f1b9 0f00 	cmp.w	r9, #0
 800c2ea:	d021      	beq.n	800c330 <__multiply+0x144>
 800c2ec:	682b      	ldr	r3, [r5, #0]
 800c2ee:	f104 0c14 	add.w	ip, r4, #20
 800c2f2:	46ae      	mov	lr, r5
 800c2f4:	f04f 0a00 	mov.w	sl, #0
 800c2f8:	f8bc b000 	ldrh.w	fp, [ip]
 800c2fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c300:	fb09 770b 	mla	r7, r9, fp, r7
 800c304:	4457      	add	r7, sl
 800c306:	b29b      	uxth	r3, r3
 800c308:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c30c:	f84e 3b04 	str.w	r3, [lr], #4
 800c310:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c314:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c318:	f8be 3000 	ldrh.w	r3, [lr]
 800c31c:	fb09 330a 	mla	r3, r9, sl, r3
 800c320:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c324:	4562      	cmp	r2, ip
 800c326:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c32a:	d8e5      	bhi.n	800c2f8 <__multiply+0x10c>
 800c32c:	9f01      	ldr	r7, [sp, #4]
 800c32e:	51eb      	str	r3, [r5, r7]
 800c330:	3504      	adds	r5, #4
 800c332:	e799      	b.n	800c268 <__multiply+0x7c>
 800c334:	3e01      	subs	r6, #1
 800c336:	e79b      	b.n	800c270 <__multiply+0x84>
 800c338:	0800cf10 	.word	0x0800cf10
 800c33c:	0800cf32 	.word	0x0800cf32

0800c340 <__pow5mult>:
 800c340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c344:	4615      	mov	r5, r2
 800c346:	f012 0203 	ands.w	r2, r2, #3
 800c34a:	4607      	mov	r7, r0
 800c34c:	460e      	mov	r6, r1
 800c34e:	d007      	beq.n	800c360 <__pow5mult+0x20>
 800c350:	4c25      	ldr	r4, [pc, #148]	@ (800c3e8 <__pow5mult+0xa8>)
 800c352:	3a01      	subs	r2, #1
 800c354:	2300      	movs	r3, #0
 800c356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c35a:	f7ff fe9f 	bl	800c09c <__multadd>
 800c35e:	4606      	mov	r6, r0
 800c360:	10ad      	asrs	r5, r5, #2
 800c362:	d03d      	beq.n	800c3e0 <__pow5mult+0xa0>
 800c364:	69fc      	ldr	r4, [r7, #28]
 800c366:	b97c      	cbnz	r4, 800c388 <__pow5mult+0x48>
 800c368:	2010      	movs	r0, #16
 800c36a:	f7ff fcd3 	bl	800bd14 <malloc>
 800c36e:	4602      	mov	r2, r0
 800c370:	61f8      	str	r0, [r7, #28]
 800c372:	b928      	cbnz	r0, 800c380 <__pow5mult+0x40>
 800c374:	4b1d      	ldr	r3, [pc, #116]	@ (800c3ec <__pow5mult+0xac>)
 800c376:	481e      	ldr	r0, [pc, #120]	@ (800c3f0 <__pow5mult+0xb0>)
 800c378:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c37c:	f000 fbb6 	bl	800caec <__assert_func>
 800c380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c384:	6004      	str	r4, [r0, #0]
 800c386:	60c4      	str	r4, [r0, #12]
 800c388:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c38c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c390:	b94c      	cbnz	r4, 800c3a6 <__pow5mult+0x66>
 800c392:	f240 2171 	movw	r1, #625	@ 0x271
 800c396:	4638      	mov	r0, r7
 800c398:	f7ff ff12 	bl	800c1c0 <__i2b>
 800c39c:	2300      	movs	r3, #0
 800c39e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	6003      	str	r3, [r0, #0]
 800c3a6:	f04f 0900 	mov.w	r9, #0
 800c3aa:	07eb      	lsls	r3, r5, #31
 800c3ac:	d50a      	bpl.n	800c3c4 <__pow5mult+0x84>
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	f7ff ff1a 	bl	800c1ec <__multiply>
 800c3b8:	4631      	mov	r1, r6
 800c3ba:	4680      	mov	r8, r0
 800c3bc:	4638      	mov	r0, r7
 800c3be:	f7ff fe4b 	bl	800c058 <_Bfree>
 800c3c2:	4646      	mov	r6, r8
 800c3c4:	106d      	asrs	r5, r5, #1
 800c3c6:	d00b      	beq.n	800c3e0 <__pow5mult+0xa0>
 800c3c8:	6820      	ldr	r0, [r4, #0]
 800c3ca:	b938      	cbnz	r0, 800c3dc <__pow5mult+0x9c>
 800c3cc:	4622      	mov	r2, r4
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	4638      	mov	r0, r7
 800c3d2:	f7ff ff0b 	bl	800c1ec <__multiply>
 800c3d6:	6020      	str	r0, [r4, #0]
 800c3d8:	f8c0 9000 	str.w	r9, [r0]
 800c3dc:	4604      	mov	r4, r0
 800c3de:	e7e4      	b.n	800c3aa <__pow5mult+0x6a>
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3e6:	bf00      	nop
 800c3e8:	0800cf8c 	.word	0x0800cf8c
 800c3ec:	0800cea1 	.word	0x0800cea1
 800c3f0:	0800cf32 	.word	0x0800cf32

0800c3f4 <__lshift>:
 800c3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	6849      	ldr	r1, [r1, #4]
 800c3fc:	6923      	ldr	r3, [r4, #16]
 800c3fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c402:	68a3      	ldr	r3, [r4, #8]
 800c404:	4607      	mov	r7, r0
 800c406:	4691      	mov	r9, r2
 800c408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c40c:	f108 0601 	add.w	r6, r8, #1
 800c410:	42b3      	cmp	r3, r6
 800c412:	db0b      	blt.n	800c42c <__lshift+0x38>
 800c414:	4638      	mov	r0, r7
 800c416:	f7ff fddf 	bl	800bfd8 <_Balloc>
 800c41a:	4605      	mov	r5, r0
 800c41c:	b948      	cbnz	r0, 800c432 <__lshift+0x3e>
 800c41e:	4602      	mov	r2, r0
 800c420:	4b28      	ldr	r3, [pc, #160]	@ (800c4c4 <__lshift+0xd0>)
 800c422:	4829      	ldr	r0, [pc, #164]	@ (800c4c8 <__lshift+0xd4>)
 800c424:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c428:	f000 fb60 	bl	800caec <__assert_func>
 800c42c:	3101      	adds	r1, #1
 800c42e:	005b      	lsls	r3, r3, #1
 800c430:	e7ee      	b.n	800c410 <__lshift+0x1c>
 800c432:	2300      	movs	r3, #0
 800c434:	f100 0114 	add.w	r1, r0, #20
 800c438:	f100 0210 	add.w	r2, r0, #16
 800c43c:	4618      	mov	r0, r3
 800c43e:	4553      	cmp	r3, sl
 800c440:	db33      	blt.n	800c4aa <__lshift+0xb6>
 800c442:	6920      	ldr	r0, [r4, #16]
 800c444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c448:	f104 0314 	add.w	r3, r4, #20
 800c44c:	f019 091f 	ands.w	r9, r9, #31
 800c450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c454:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c458:	d02b      	beq.n	800c4b2 <__lshift+0xbe>
 800c45a:	f1c9 0e20 	rsb	lr, r9, #32
 800c45e:	468a      	mov	sl, r1
 800c460:	2200      	movs	r2, #0
 800c462:	6818      	ldr	r0, [r3, #0]
 800c464:	fa00 f009 	lsl.w	r0, r0, r9
 800c468:	4310      	orrs	r0, r2
 800c46a:	f84a 0b04 	str.w	r0, [sl], #4
 800c46e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c472:	459c      	cmp	ip, r3
 800c474:	fa22 f20e 	lsr.w	r2, r2, lr
 800c478:	d8f3      	bhi.n	800c462 <__lshift+0x6e>
 800c47a:	ebac 0304 	sub.w	r3, ip, r4
 800c47e:	3b15      	subs	r3, #21
 800c480:	f023 0303 	bic.w	r3, r3, #3
 800c484:	3304      	adds	r3, #4
 800c486:	f104 0015 	add.w	r0, r4, #21
 800c48a:	4584      	cmp	ip, r0
 800c48c:	bf38      	it	cc
 800c48e:	2304      	movcc	r3, #4
 800c490:	50ca      	str	r2, [r1, r3]
 800c492:	b10a      	cbz	r2, 800c498 <__lshift+0xa4>
 800c494:	f108 0602 	add.w	r6, r8, #2
 800c498:	3e01      	subs	r6, #1
 800c49a:	4638      	mov	r0, r7
 800c49c:	612e      	str	r6, [r5, #16]
 800c49e:	4621      	mov	r1, r4
 800c4a0:	f7ff fdda 	bl	800c058 <_Bfree>
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	e7c5      	b.n	800c43e <__lshift+0x4a>
 800c4b2:	3904      	subs	r1, #4
 800c4b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4bc:	459c      	cmp	ip, r3
 800c4be:	d8f9      	bhi.n	800c4b4 <__lshift+0xc0>
 800c4c0:	e7ea      	b.n	800c498 <__lshift+0xa4>
 800c4c2:	bf00      	nop
 800c4c4:	0800cf10 	.word	0x0800cf10
 800c4c8:	0800cf32 	.word	0x0800cf32

0800c4cc <__mcmp>:
 800c4cc:	690a      	ldr	r2, [r1, #16]
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	6900      	ldr	r0, [r0, #16]
 800c4d2:	1a80      	subs	r0, r0, r2
 800c4d4:	b530      	push	{r4, r5, lr}
 800c4d6:	d10e      	bne.n	800c4f6 <__mcmp+0x2a>
 800c4d8:	3314      	adds	r3, #20
 800c4da:	3114      	adds	r1, #20
 800c4dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c4e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c4e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c4e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c4ec:	4295      	cmp	r5, r2
 800c4ee:	d003      	beq.n	800c4f8 <__mcmp+0x2c>
 800c4f0:	d205      	bcs.n	800c4fe <__mcmp+0x32>
 800c4f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4f6:	bd30      	pop	{r4, r5, pc}
 800c4f8:	42a3      	cmp	r3, r4
 800c4fa:	d3f3      	bcc.n	800c4e4 <__mcmp+0x18>
 800c4fc:	e7fb      	b.n	800c4f6 <__mcmp+0x2a>
 800c4fe:	2001      	movs	r0, #1
 800c500:	e7f9      	b.n	800c4f6 <__mcmp+0x2a>
	...

0800c504 <__mdiff>:
 800c504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c508:	4689      	mov	r9, r1
 800c50a:	4606      	mov	r6, r0
 800c50c:	4611      	mov	r1, r2
 800c50e:	4648      	mov	r0, r9
 800c510:	4614      	mov	r4, r2
 800c512:	f7ff ffdb 	bl	800c4cc <__mcmp>
 800c516:	1e05      	subs	r5, r0, #0
 800c518:	d112      	bne.n	800c540 <__mdiff+0x3c>
 800c51a:	4629      	mov	r1, r5
 800c51c:	4630      	mov	r0, r6
 800c51e:	f7ff fd5b 	bl	800bfd8 <_Balloc>
 800c522:	4602      	mov	r2, r0
 800c524:	b928      	cbnz	r0, 800c532 <__mdiff+0x2e>
 800c526:	4b3f      	ldr	r3, [pc, #252]	@ (800c624 <__mdiff+0x120>)
 800c528:	f240 2137 	movw	r1, #567	@ 0x237
 800c52c:	483e      	ldr	r0, [pc, #248]	@ (800c628 <__mdiff+0x124>)
 800c52e:	f000 fadd 	bl	800caec <__assert_func>
 800c532:	2301      	movs	r3, #1
 800c534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c538:	4610      	mov	r0, r2
 800c53a:	b003      	add	sp, #12
 800c53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c540:	bfbc      	itt	lt
 800c542:	464b      	movlt	r3, r9
 800c544:	46a1      	movlt	r9, r4
 800c546:	4630      	mov	r0, r6
 800c548:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c54c:	bfba      	itte	lt
 800c54e:	461c      	movlt	r4, r3
 800c550:	2501      	movlt	r5, #1
 800c552:	2500      	movge	r5, #0
 800c554:	f7ff fd40 	bl	800bfd8 <_Balloc>
 800c558:	4602      	mov	r2, r0
 800c55a:	b918      	cbnz	r0, 800c564 <__mdiff+0x60>
 800c55c:	4b31      	ldr	r3, [pc, #196]	@ (800c624 <__mdiff+0x120>)
 800c55e:	f240 2145 	movw	r1, #581	@ 0x245
 800c562:	e7e3      	b.n	800c52c <__mdiff+0x28>
 800c564:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c568:	6926      	ldr	r6, [r4, #16]
 800c56a:	60c5      	str	r5, [r0, #12]
 800c56c:	f109 0310 	add.w	r3, r9, #16
 800c570:	f109 0514 	add.w	r5, r9, #20
 800c574:	f104 0e14 	add.w	lr, r4, #20
 800c578:	f100 0b14 	add.w	fp, r0, #20
 800c57c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c580:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c584:	9301      	str	r3, [sp, #4]
 800c586:	46d9      	mov	r9, fp
 800c588:	f04f 0c00 	mov.w	ip, #0
 800c58c:	9b01      	ldr	r3, [sp, #4]
 800c58e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c592:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c596:	9301      	str	r3, [sp, #4]
 800c598:	fa1f f38a 	uxth.w	r3, sl
 800c59c:	4619      	mov	r1, r3
 800c59e:	b283      	uxth	r3, r0
 800c5a0:	1acb      	subs	r3, r1, r3
 800c5a2:	0c00      	lsrs	r0, r0, #16
 800c5a4:	4463      	add	r3, ip
 800c5a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c5aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c5b4:	4576      	cmp	r6, lr
 800c5b6:	f849 3b04 	str.w	r3, [r9], #4
 800c5ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5be:	d8e5      	bhi.n	800c58c <__mdiff+0x88>
 800c5c0:	1b33      	subs	r3, r6, r4
 800c5c2:	3b15      	subs	r3, #21
 800c5c4:	f023 0303 	bic.w	r3, r3, #3
 800c5c8:	3415      	adds	r4, #21
 800c5ca:	3304      	adds	r3, #4
 800c5cc:	42a6      	cmp	r6, r4
 800c5ce:	bf38      	it	cc
 800c5d0:	2304      	movcc	r3, #4
 800c5d2:	441d      	add	r5, r3
 800c5d4:	445b      	add	r3, fp
 800c5d6:	461e      	mov	r6, r3
 800c5d8:	462c      	mov	r4, r5
 800c5da:	4544      	cmp	r4, r8
 800c5dc:	d30e      	bcc.n	800c5fc <__mdiff+0xf8>
 800c5de:	f108 0103 	add.w	r1, r8, #3
 800c5e2:	1b49      	subs	r1, r1, r5
 800c5e4:	f021 0103 	bic.w	r1, r1, #3
 800c5e8:	3d03      	subs	r5, #3
 800c5ea:	45a8      	cmp	r8, r5
 800c5ec:	bf38      	it	cc
 800c5ee:	2100      	movcc	r1, #0
 800c5f0:	440b      	add	r3, r1
 800c5f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5f6:	b191      	cbz	r1, 800c61e <__mdiff+0x11a>
 800c5f8:	6117      	str	r7, [r2, #16]
 800c5fa:	e79d      	b.n	800c538 <__mdiff+0x34>
 800c5fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800c600:	46e6      	mov	lr, ip
 800c602:	0c08      	lsrs	r0, r1, #16
 800c604:	fa1c fc81 	uxtah	ip, ip, r1
 800c608:	4471      	add	r1, lr
 800c60a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c60e:	b289      	uxth	r1, r1
 800c610:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c614:	f846 1b04 	str.w	r1, [r6], #4
 800c618:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c61c:	e7dd      	b.n	800c5da <__mdiff+0xd6>
 800c61e:	3f01      	subs	r7, #1
 800c620:	e7e7      	b.n	800c5f2 <__mdiff+0xee>
 800c622:	bf00      	nop
 800c624:	0800cf10 	.word	0x0800cf10
 800c628:	0800cf32 	.word	0x0800cf32

0800c62c <__d2b>:
 800c62c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c630:	460f      	mov	r7, r1
 800c632:	2101      	movs	r1, #1
 800c634:	ec59 8b10 	vmov	r8, r9, d0
 800c638:	4616      	mov	r6, r2
 800c63a:	f7ff fccd 	bl	800bfd8 <_Balloc>
 800c63e:	4604      	mov	r4, r0
 800c640:	b930      	cbnz	r0, 800c650 <__d2b+0x24>
 800c642:	4602      	mov	r2, r0
 800c644:	4b23      	ldr	r3, [pc, #140]	@ (800c6d4 <__d2b+0xa8>)
 800c646:	4824      	ldr	r0, [pc, #144]	@ (800c6d8 <__d2b+0xac>)
 800c648:	f240 310f 	movw	r1, #783	@ 0x30f
 800c64c:	f000 fa4e 	bl	800caec <__assert_func>
 800c650:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c654:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c658:	b10d      	cbz	r5, 800c65e <__d2b+0x32>
 800c65a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c65e:	9301      	str	r3, [sp, #4]
 800c660:	f1b8 0300 	subs.w	r3, r8, #0
 800c664:	d023      	beq.n	800c6ae <__d2b+0x82>
 800c666:	4668      	mov	r0, sp
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	f7ff fd7c 	bl	800c166 <__lo0bits>
 800c66e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c672:	b1d0      	cbz	r0, 800c6aa <__d2b+0x7e>
 800c674:	f1c0 0320 	rsb	r3, r0, #32
 800c678:	fa02 f303 	lsl.w	r3, r2, r3
 800c67c:	430b      	orrs	r3, r1
 800c67e:	40c2      	lsrs	r2, r0
 800c680:	6163      	str	r3, [r4, #20]
 800c682:	9201      	str	r2, [sp, #4]
 800c684:	9b01      	ldr	r3, [sp, #4]
 800c686:	61a3      	str	r3, [r4, #24]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	bf0c      	ite	eq
 800c68c:	2201      	moveq	r2, #1
 800c68e:	2202      	movne	r2, #2
 800c690:	6122      	str	r2, [r4, #16]
 800c692:	b1a5      	cbz	r5, 800c6be <__d2b+0x92>
 800c694:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c698:	4405      	add	r5, r0
 800c69a:	603d      	str	r5, [r7, #0]
 800c69c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c6a0:	6030      	str	r0, [r6, #0]
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	b003      	add	sp, #12
 800c6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6aa:	6161      	str	r1, [r4, #20]
 800c6ac:	e7ea      	b.n	800c684 <__d2b+0x58>
 800c6ae:	a801      	add	r0, sp, #4
 800c6b0:	f7ff fd59 	bl	800c166 <__lo0bits>
 800c6b4:	9b01      	ldr	r3, [sp, #4]
 800c6b6:	6163      	str	r3, [r4, #20]
 800c6b8:	3020      	adds	r0, #32
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	e7e8      	b.n	800c690 <__d2b+0x64>
 800c6be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c6c6:	6038      	str	r0, [r7, #0]
 800c6c8:	6918      	ldr	r0, [r3, #16]
 800c6ca:	f7ff fd2d 	bl	800c128 <__hi0bits>
 800c6ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6d2:	e7e5      	b.n	800c6a0 <__d2b+0x74>
 800c6d4:	0800cf10 	.word	0x0800cf10
 800c6d8:	0800cf32 	.word	0x0800cf32

0800c6dc <__sread>:
 800c6dc:	b510      	push	{r4, lr}
 800c6de:	460c      	mov	r4, r1
 800c6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6e4:	f000 f9c0 	bl	800ca68 <_read_r>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	bfab      	itete	ge
 800c6ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c6f0:	181b      	addge	r3, r3, r0
 800c6f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6f6:	bfac      	ite	ge
 800c6f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6fa:	81a3      	strhlt	r3, [r4, #12]
 800c6fc:	bd10      	pop	{r4, pc}

0800c6fe <__swrite>:
 800c6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c702:	461f      	mov	r7, r3
 800c704:	898b      	ldrh	r3, [r1, #12]
 800c706:	05db      	lsls	r3, r3, #23
 800c708:	4605      	mov	r5, r0
 800c70a:	460c      	mov	r4, r1
 800c70c:	4616      	mov	r6, r2
 800c70e:	d505      	bpl.n	800c71c <__swrite+0x1e>
 800c710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c714:	2302      	movs	r3, #2
 800c716:	2200      	movs	r2, #0
 800c718:	f000 f994 	bl	800ca44 <_lseek_r>
 800c71c:	89a3      	ldrh	r3, [r4, #12]
 800c71e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c722:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c726:	81a3      	strh	r3, [r4, #12]
 800c728:	4632      	mov	r2, r6
 800c72a:	463b      	mov	r3, r7
 800c72c:	4628      	mov	r0, r5
 800c72e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c732:	f000 b9bb 	b.w	800caac <_write_r>

0800c736 <__sseek>:
 800c736:	b510      	push	{r4, lr}
 800c738:	460c      	mov	r4, r1
 800c73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c73e:	f000 f981 	bl	800ca44 <_lseek_r>
 800c742:	1c43      	adds	r3, r0, #1
 800c744:	89a3      	ldrh	r3, [r4, #12]
 800c746:	bf15      	itete	ne
 800c748:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c74a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c74e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c752:	81a3      	strheq	r3, [r4, #12]
 800c754:	bf18      	it	ne
 800c756:	81a3      	strhne	r3, [r4, #12]
 800c758:	bd10      	pop	{r4, pc}

0800c75a <__sclose>:
 800c75a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c75e:	f000 b93f 	b.w	800c9e0 <_close_r>

0800c762 <_realloc_r>:
 800c762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c766:	4680      	mov	r8, r0
 800c768:	4615      	mov	r5, r2
 800c76a:	460c      	mov	r4, r1
 800c76c:	b921      	cbnz	r1, 800c778 <_realloc_r+0x16>
 800c76e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c772:	4611      	mov	r1, r2
 800c774:	f7ff baf8 	b.w	800bd68 <_malloc_r>
 800c778:	b92a      	cbnz	r2, 800c786 <_realloc_r+0x24>
 800c77a:	f000 f9e9 	bl	800cb50 <_free_r>
 800c77e:	2400      	movs	r4, #0
 800c780:	4620      	mov	r0, r4
 800c782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c786:	f000 fa3f 	bl	800cc08 <_malloc_usable_size_r>
 800c78a:	4285      	cmp	r5, r0
 800c78c:	4606      	mov	r6, r0
 800c78e:	d802      	bhi.n	800c796 <_realloc_r+0x34>
 800c790:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c794:	d8f4      	bhi.n	800c780 <_realloc_r+0x1e>
 800c796:	4629      	mov	r1, r5
 800c798:	4640      	mov	r0, r8
 800c79a:	f7ff fae5 	bl	800bd68 <_malloc_r>
 800c79e:	4607      	mov	r7, r0
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	d0ec      	beq.n	800c77e <_realloc_r+0x1c>
 800c7a4:	42b5      	cmp	r5, r6
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	bf28      	it	cs
 800c7ac:	4632      	movcs	r2, r6
 800c7ae:	f000 f98f 	bl	800cad0 <memcpy>
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	f000 f9cb 	bl	800cb50 <_free_r>
 800c7ba:	463c      	mov	r4, r7
 800c7bc:	e7e0      	b.n	800c780 <_realloc_r+0x1e>

0800c7be <__swbuf_r>:
 800c7be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c0:	460e      	mov	r6, r1
 800c7c2:	4614      	mov	r4, r2
 800c7c4:	4605      	mov	r5, r0
 800c7c6:	b118      	cbz	r0, 800c7d0 <__swbuf_r+0x12>
 800c7c8:	6a03      	ldr	r3, [r0, #32]
 800c7ca:	b90b      	cbnz	r3, 800c7d0 <__swbuf_r+0x12>
 800c7cc:	f7fe f8d4 	bl	800a978 <__sinit>
 800c7d0:	69a3      	ldr	r3, [r4, #24]
 800c7d2:	60a3      	str	r3, [r4, #8]
 800c7d4:	89a3      	ldrh	r3, [r4, #12]
 800c7d6:	071a      	lsls	r2, r3, #28
 800c7d8:	d501      	bpl.n	800c7de <__swbuf_r+0x20>
 800c7da:	6923      	ldr	r3, [r4, #16]
 800c7dc:	b943      	cbnz	r3, 800c7f0 <__swbuf_r+0x32>
 800c7de:	4621      	mov	r1, r4
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	f000 f82b 	bl	800c83c <__swsetup_r>
 800c7e6:	b118      	cbz	r0, 800c7f0 <__swbuf_r+0x32>
 800c7e8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c7ec:	4638      	mov	r0, r7
 800c7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7f0:	6823      	ldr	r3, [r4, #0]
 800c7f2:	6922      	ldr	r2, [r4, #16]
 800c7f4:	1a98      	subs	r0, r3, r2
 800c7f6:	6963      	ldr	r3, [r4, #20]
 800c7f8:	b2f6      	uxtb	r6, r6
 800c7fa:	4283      	cmp	r3, r0
 800c7fc:	4637      	mov	r7, r6
 800c7fe:	dc05      	bgt.n	800c80c <__swbuf_r+0x4e>
 800c800:	4621      	mov	r1, r4
 800c802:	4628      	mov	r0, r5
 800c804:	f7ff fbb4 	bl	800bf70 <_fflush_r>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d1ed      	bne.n	800c7e8 <__swbuf_r+0x2a>
 800c80c:	68a3      	ldr	r3, [r4, #8]
 800c80e:	3b01      	subs	r3, #1
 800c810:	60a3      	str	r3, [r4, #8]
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	1c5a      	adds	r2, r3, #1
 800c816:	6022      	str	r2, [r4, #0]
 800c818:	701e      	strb	r6, [r3, #0]
 800c81a:	6962      	ldr	r2, [r4, #20]
 800c81c:	1c43      	adds	r3, r0, #1
 800c81e:	429a      	cmp	r2, r3
 800c820:	d004      	beq.n	800c82c <__swbuf_r+0x6e>
 800c822:	89a3      	ldrh	r3, [r4, #12]
 800c824:	07db      	lsls	r3, r3, #31
 800c826:	d5e1      	bpl.n	800c7ec <__swbuf_r+0x2e>
 800c828:	2e0a      	cmp	r6, #10
 800c82a:	d1df      	bne.n	800c7ec <__swbuf_r+0x2e>
 800c82c:	4621      	mov	r1, r4
 800c82e:	4628      	mov	r0, r5
 800c830:	f7ff fb9e 	bl	800bf70 <_fflush_r>
 800c834:	2800      	cmp	r0, #0
 800c836:	d0d9      	beq.n	800c7ec <__swbuf_r+0x2e>
 800c838:	e7d6      	b.n	800c7e8 <__swbuf_r+0x2a>
	...

0800c83c <__swsetup_r>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4b29      	ldr	r3, [pc, #164]	@ (800c8e4 <__swsetup_r+0xa8>)
 800c840:	4605      	mov	r5, r0
 800c842:	6818      	ldr	r0, [r3, #0]
 800c844:	460c      	mov	r4, r1
 800c846:	b118      	cbz	r0, 800c850 <__swsetup_r+0x14>
 800c848:	6a03      	ldr	r3, [r0, #32]
 800c84a:	b90b      	cbnz	r3, 800c850 <__swsetup_r+0x14>
 800c84c:	f7fe f894 	bl	800a978 <__sinit>
 800c850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c854:	0719      	lsls	r1, r3, #28
 800c856:	d422      	bmi.n	800c89e <__swsetup_r+0x62>
 800c858:	06da      	lsls	r2, r3, #27
 800c85a:	d407      	bmi.n	800c86c <__swsetup_r+0x30>
 800c85c:	2209      	movs	r2, #9
 800c85e:	602a      	str	r2, [r5, #0]
 800c860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c864:	81a3      	strh	r3, [r4, #12]
 800c866:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c86a:	e033      	b.n	800c8d4 <__swsetup_r+0x98>
 800c86c:	0758      	lsls	r0, r3, #29
 800c86e:	d512      	bpl.n	800c896 <__swsetup_r+0x5a>
 800c870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c872:	b141      	cbz	r1, 800c886 <__swsetup_r+0x4a>
 800c874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c878:	4299      	cmp	r1, r3
 800c87a:	d002      	beq.n	800c882 <__swsetup_r+0x46>
 800c87c:	4628      	mov	r0, r5
 800c87e:	f000 f967 	bl	800cb50 <_free_r>
 800c882:	2300      	movs	r3, #0
 800c884:	6363      	str	r3, [r4, #52]	@ 0x34
 800c886:	89a3      	ldrh	r3, [r4, #12]
 800c888:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c88c:	81a3      	strh	r3, [r4, #12]
 800c88e:	2300      	movs	r3, #0
 800c890:	6063      	str	r3, [r4, #4]
 800c892:	6923      	ldr	r3, [r4, #16]
 800c894:	6023      	str	r3, [r4, #0]
 800c896:	89a3      	ldrh	r3, [r4, #12]
 800c898:	f043 0308 	orr.w	r3, r3, #8
 800c89c:	81a3      	strh	r3, [r4, #12]
 800c89e:	6923      	ldr	r3, [r4, #16]
 800c8a0:	b94b      	cbnz	r3, 800c8b6 <__swsetup_r+0x7a>
 800c8a2:	89a3      	ldrh	r3, [r4, #12]
 800c8a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c8a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8ac:	d003      	beq.n	800c8b6 <__swsetup_r+0x7a>
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	f000 f83f 	bl	800c934 <__smakebuf_r>
 800c8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ba:	f013 0201 	ands.w	r2, r3, #1
 800c8be:	d00a      	beq.n	800c8d6 <__swsetup_r+0x9a>
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	60a2      	str	r2, [r4, #8]
 800c8c4:	6962      	ldr	r2, [r4, #20]
 800c8c6:	4252      	negs	r2, r2
 800c8c8:	61a2      	str	r2, [r4, #24]
 800c8ca:	6922      	ldr	r2, [r4, #16]
 800c8cc:	b942      	cbnz	r2, 800c8e0 <__swsetup_r+0xa4>
 800c8ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c8d2:	d1c5      	bne.n	800c860 <__swsetup_r+0x24>
 800c8d4:	bd38      	pop	{r3, r4, r5, pc}
 800c8d6:	0799      	lsls	r1, r3, #30
 800c8d8:	bf58      	it	pl
 800c8da:	6962      	ldrpl	r2, [r4, #20]
 800c8dc:	60a2      	str	r2, [r4, #8]
 800c8de:	e7f4      	b.n	800c8ca <__swsetup_r+0x8e>
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	e7f7      	b.n	800c8d4 <__swsetup_r+0x98>
 800c8e4:	20000018 	.word	0x20000018

0800c8e8 <__swhatbuf_r>:
 800c8e8:	b570      	push	{r4, r5, r6, lr}
 800c8ea:	460c      	mov	r4, r1
 800c8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8f0:	2900      	cmp	r1, #0
 800c8f2:	b096      	sub	sp, #88	@ 0x58
 800c8f4:	4615      	mov	r5, r2
 800c8f6:	461e      	mov	r6, r3
 800c8f8:	da0d      	bge.n	800c916 <__swhatbuf_r+0x2e>
 800c8fa:	89a3      	ldrh	r3, [r4, #12]
 800c8fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c900:	f04f 0100 	mov.w	r1, #0
 800c904:	bf14      	ite	ne
 800c906:	2340      	movne	r3, #64	@ 0x40
 800c908:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c90c:	2000      	movs	r0, #0
 800c90e:	6031      	str	r1, [r6, #0]
 800c910:	602b      	str	r3, [r5, #0]
 800c912:	b016      	add	sp, #88	@ 0x58
 800c914:	bd70      	pop	{r4, r5, r6, pc}
 800c916:	466a      	mov	r2, sp
 800c918:	f000 f872 	bl	800ca00 <_fstat_r>
 800c91c:	2800      	cmp	r0, #0
 800c91e:	dbec      	blt.n	800c8fa <__swhatbuf_r+0x12>
 800c920:	9901      	ldr	r1, [sp, #4]
 800c922:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c926:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c92a:	4259      	negs	r1, r3
 800c92c:	4159      	adcs	r1, r3
 800c92e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c932:	e7eb      	b.n	800c90c <__swhatbuf_r+0x24>

0800c934 <__smakebuf_r>:
 800c934:	898b      	ldrh	r3, [r1, #12]
 800c936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c938:	079d      	lsls	r5, r3, #30
 800c93a:	4606      	mov	r6, r0
 800c93c:	460c      	mov	r4, r1
 800c93e:	d507      	bpl.n	800c950 <__smakebuf_r+0x1c>
 800c940:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c944:	6023      	str	r3, [r4, #0]
 800c946:	6123      	str	r3, [r4, #16]
 800c948:	2301      	movs	r3, #1
 800c94a:	6163      	str	r3, [r4, #20]
 800c94c:	b003      	add	sp, #12
 800c94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c950:	ab01      	add	r3, sp, #4
 800c952:	466a      	mov	r2, sp
 800c954:	f7ff ffc8 	bl	800c8e8 <__swhatbuf_r>
 800c958:	9f00      	ldr	r7, [sp, #0]
 800c95a:	4605      	mov	r5, r0
 800c95c:	4639      	mov	r1, r7
 800c95e:	4630      	mov	r0, r6
 800c960:	f7ff fa02 	bl	800bd68 <_malloc_r>
 800c964:	b948      	cbnz	r0, 800c97a <__smakebuf_r+0x46>
 800c966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c96a:	059a      	lsls	r2, r3, #22
 800c96c:	d4ee      	bmi.n	800c94c <__smakebuf_r+0x18>
 800c96e:	f023 0303 	bic.w	r3, r3, #3
 800c972:	f043 0302 	orr.w	r3, r3, #2
 800c976:	81a3      	strh	r3, [r4, #12]
 800c978:	e7e2      	b.n	800c940 <__smakebuf_r+0xc>
 800c97a:	89a3      	ldrh	r3, [r4, #12]
 800c97c:	6020      	str	r0, [r4, #0]
 800c97e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c982:	81a3      	strh	r3, [r4, #12]
 800c984:	9b01      	ldr	r3, [sp, #4]
 800c986:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c98a:	b15b      	cbz	r3, 800c9a4 <__smakebuf_r+0x70>
 800c98c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c990:	4630      	mov	r0, r6
 800c992:	f000 f847 	bl	800ca24 <_isatty_r>
 800c996:	b128      	cbz	r0, 800c9a4 <__smakebuf_r+0x70>
 800c998:	89a3      	ldrh	r3, [r4, #12]
 800c99a:	f023 0303 	bic.w	r3, r3, #3
 800c99e:	f043 0301 	orr.w	r3, r3, #1
 800c9a2:	81a3      	strh	r3, [r4, #12]
 800c9a4:	89a3      	ldrh	r3, [r4, #12]
 800c9a6:	431d      	orrs	r5, r3
 800c9a8:	81a5      	strh	r5, [r4, #12]
 800c9aa:	e7cf      	b.n	800c94c <__smakebuf_r+0x18>

0800c9ac <memmove>:
 800c9ac:	4288      	cmp	r0, r1
 800c9ae:	b510      	push	{r4, lr}
 800c9b0:	eb01 0402 	add.w	r4, r1, r2
 800c9b4:	d902      	bls.n	800c9bc <memmove+0x10>
 800c9b6:	4284      	cmp	r4, r0
 800c9b8:	4623      	mov	r3, r4
 800c9ba:	d807      	bhi.n	800c9cc <memmove+0x20>
 800c9bc:	1e43      	subs	r3, r0, #1
 800c9be:	42a1      	cmp	r1, r4
 800c9c0:	d008      	beq.n	800c9d4 <memmove+0x28>
 800c9c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9ca:	e7f8      	b.n	800c9be <memmove+0x12>
 800c9cc:	4402      	add	r2, r0
 800c9ce:	4601      	mov	r1, r0
 800c9d0:	428a      	cmp	r2, r1
 800c9d2:	d100      	bne.n	800c9d6 <memmove+0x2a>
 800c9d4:	bd10      	pop	{r4, pc}
 800c9d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9de:	e7f7      	b.n	800c9d0 <memmove+0x24>

0800c9e0 <_close_r>:
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	4d06      	ldr	r5, [pc, #24]	@ (800c9fc <_close_r+0x1c>)
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	4608      	mov	r0, r1
 800c9ea:	602b      	str	r3, [r5, #0]
 800c9ec:	f7f6 fddc 	bl	80035a8 <_close>
 800c9f0:	1c43      	adds	r3, r0, #1
 800c9f2:	d102      	bne.n	800c9fa <_close_r+0x1a>
 800c9f4:	682b      	ldr	r3, [r5, #0]
 800c9f6:	b103      	cbz	r3, 800c9fa <_close_r+0x1a>
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	bd38      	pop	{r3, r4, r5, pc}
 800c9fc:	20001b54 	.word	0x20001b54

0800ca00 <_fstat_r>:
 800ca00:	b538      	push	{r3, r4, r5, lr}
 800ca02:	4d07      	ldr	r5, [pc, #28]	@ (800ca20 <_fstat_r+0x20>)
 800ca04:	2300      	movs	r3, #0
 800ca06:	4604      	mov	r4, r0
 800ca08:	4608      	mov	r0, r1
 800ca0a:	4611      	mov	r1, r2
 800ca0c:	602b      	str	r3, [r5, #0]
 800ca0e:	f7f6 fdd7 	bl	80035c0 <_fstat>
 800ca12:	1c43      	adds	r3, r0, #1
 800ca14:	d102      	bne.n	800ca1c <_fstat_r+0x1c>
 800ca16:	682b      	ldr	r3, [r5, #0]
 800ca18:	b103      	cbz	r3, 800ca1c <_fstat_r+0x1c>
 800ca1a:	6023      	str	r3, [r4, #0]
 800ca1c:	bd38      	pop	{r3, r4, r5, pc}
 800ca1e:	bf00      	nop
 800ca20:	20001b54 	.word	0x20001b54

0800ca24 <_isatty_r>:
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	4d06      	ldr	r5, [pc, #24]	@ (800ca40 <_isatty_r+0x1c>)
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	602b      	str	r3, [r5, #0]
 800ca30:	f7f6 fdd6 	bl	80035e0 <_isatty>
 800ca34:	1c43      	adds	r3, r0, #1
 800ca36:	d102      	bne.n	800ca3e <_isatty_r+0x1a>
 800ca38:	682b      	ldr	r3, [r5, #0]
 800ca3a:	b103      	cbz	r3, 800ca3e <_isatty_r+0x1a>
 800ca3c:	6023      	str	r3, [r4, #0]
 800ca3e:	bd38      	pop	{r3, r4, r5, pc}
 800ca40:	20001b54 	.word	0x20001b54

0800ca44 <_lseek_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	4d07      	ldr	r5, [pc, #28]	@ (800ca64 <_lseek_r+0x20>)
 800ca48:	4604      	mov	r4, r0
 800ca4a:	4608      	mov	r0, r1
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	2200      	movs	r2, #0
 800ca50:	602a      	str	r2, [r5, #0]
 800ca52:	461a      	mov	r2, r3
 800ca54:	f7f6 fdcf 	bl	80035f6 <_lseek>
 800ca58:	1c43      	adds	r3, r0, #1
 800ca5a:	d102      	bne.n	800ca62 <_lseek_r+0x1e>
 800ca5c:	682b      	ldr	r3, [r5, #0]
 800ca5e:	b103      	cbz	r3, 800ca62 <_lseek_r+0x1e>
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	bd38      	pop	{r3, r4, r5, pc}
 800ca64:	20001b54 	.word	0x20001b54

0800ca68 <_read_r>:
 800ca68:	b538      	push	{r3, r4, r5, lr}
 800ca6a:	4d07      	ldr	r5, [pc, #28]	@ (800ca88 <_read_r+0x20>)
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	4608      	mov	r0, r1
 800ca70:	4611      	mov	r1, r2
 800ca72:	2200      	movs	r2, #0
 800ca74:	602a      	str	r2, [r5, #0]
 800ca76:	461a      	mov	r2, r3
 800ca78:	f7f6 fd79 	bl	800356e <_read>
 800ca7c:	1c43      	adds	r3, r0, #1
 800ca7e:	d102      	bne.n	800ca86 <_read_r+0x1e>
 800ca80:	682b      	ldr	r3, [r5, #0]
 800ca82:	b103      	cbz	r3, 800ca86 <_read_r+0x1e>
 800ca84:	6023      	str	r3, [r4, #0]
 800ca86:	bd38      	pop	{r3, r4, r5, pc}
 800ca88:	20001b54 	.word	0x20001b54

0800ca8c <_sbrk_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	4d06      	ldr	r5, [pc, #24]	@ (800caa8 <_sbrk_r+0x1c>)
 800ca90:	2300      	movs	r3, #0
 800ca92:	4604      	mov	r4, r0
 800ca94:	4608      	mov	r0, r1
 800ca96:	602b      	str	r3, [r5, #0]
 800ca98:	f7f6 fdba 	bl	8003610 <_sbrk>
 800ca9c:	1c43      	adds	r3, r0, #1
 800ca9e:	d102      	bne.n	800caa6 <_sbrk_r+0x1a>
 800caa0:	682b      	ldr	r3, [r5, #0]
 800caa2:	b103      	cbz	r3, 800caa6 <_sbrk_r+0x1a>
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	20001b54 	.word	0x20001b54

0800caac <_write_r>:
 800caac:	b538      	push	{r3, r4, r5, lr}
 800caae:	4d07      	ldr	r5, [pc, #28]	@ (800cacc <_write_r+0x20>)
 800cab0:	4604      	mov	r4, r0
 800cab2:	4608      	mov	r0, r1
 800cab4:	4611      	mov	r1, r2
 800cab6:	2200      	movs	r2, #0
 800cab8:	602a      	str	r2, [r5, #0]
 800caba:	461a      	mov	r2, r3
 800cabc:	f7f5 ff9c 	bl	80029f8 <_write>
 800cac0:	1c43      	adds	r3, r0, #1
 800cac2:	d102      	bne.n	800caca <_write_r+0x1e>
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	b103      	cbz	r3, 800caca <_write_r+0x1e>
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	bd38      	pop	{r3, r4, r5, pc}
 800cacc:	20001b54 	.word	0x20001b54

0800cad0 <memcpy>:
 800cad0:	440a      	add	r2, r1
 800cad2:	4291      	cmp	r1, r2
 800cad4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cad8:	d100      	bne.n	800cadc <memcpy+0xc>
 800cada:	4770      	bx	lr
 800cadc:	b510      	push	{r4, lr}
 800cade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cae6:	4291      	cmp	r1, r2
 800cae8:	d1f9      	bne.n	800cade <memcpy+0xe>
 800caea:	bd10      	pop	{r4, pc}

0800caec <__assert_func>:
 800caec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caee:	4614      	mov	r4, r2
 800caf0:	461a      	mov	r2, r3
 800caf2:	4b09      	ldr	r3, [pc, #36]	@ (800cb18 <__assert_func+0x2c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4605      	mov	r5, r0
 800caf8:	68d8      	ldr	r0, [r3, #12]
 800cafa:	b954      	cbnz	r4, 800cb12 <__assert_func+0x26>
 800cafc:	4b07      	ldr	r3, [pc, #28]	@ (800cb1c <__assert_func+0x30>)
 800cafe:	461c      	mov	r4, r3
 800cb00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb04:	9100      	str	r1, [sp, #0]
 800cb06:	462b      	mov	r3, r5
 800cb08:	4905      	ldr	r1, [pc, #20]	@ (800cb20 <__assert_func+0x34>)
 800cb0a:	f000 f885 	bl	800cc18 <fiprintf>
 800cb0e:	f000 f8a2 	bl	800cc56 <abort>
 800cb12:	4b04      	ldr	r3, [pc, #16]	@ (800cb24 <__assert_func+0x38>)
 800cb14:	e7f4      	b.n	800cb00 <__assert_func+0x14>
 800cb16:	bf00      	nop
 800cb18:	20000018 	.word	0x20000018
 800cb1c:	0800d1ce 	.word	0x0800d1ce
 800cb20:	0800d1a0 	.word	0x0800d1a0
 800cb24:	0800d193 	.word	0x0800d193

0800cb28 <_calloc_r>:
 800cb28:	b570      	push	{r4, r5, r6, lr}
 800cb2a:	fba1 5402 	umull	r5, r4, r1, r2
 800cb2e:	b93c      	cbnz	r4, 800cb40 <_calloc_r+0x18>
 800cb30:	4629      	mov	r1, r5
 800cb32:	f7ff f919 	bl	800bd68 <_malloc_r>
 800cb36:	4606      	mov	r6, r0
 800cb38:	b928      	cbnz	r0, 800cb46 <_calloc_r+0x1e>
 800cb3a:	2600      	movs	r6, #0
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	bd70      	pop	{r4, r5, r6, pc}
 800cb40:	220c      	movs	r2, #12
 800cb42:	6002      	str	r2, [r0, #0]
 800cb44:	e7f9      	b.n	800cb3a <_calloc_r+0x12>
 800cb46:	462a      	mov	r2, r5
 800cb48:	4621      	mov	r1, r4
 800cb4a:	f7fd ffbb 	bl	800aac4 <memset>
 800cb4e:	e7f5      	b.n	800cb3c <_calloc_r+0x14>

0800cb50 <_free_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	4605      	mov	r5, r0
 800cb54:	2900      	cmp	r1, #0
 800cb56:	d041      	beq.n	800cbdc <_free_r+0x8c>
 800cb58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb5c:	1f0c      	subs	r4, r1, #4
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	bfb8      	it	lt
 800cb62:	18e4      	addlt	r4, r4, r3
 800cb64:	f7ff fa2c 	bl	800bfc0 <__malloc_lock>
 800cb68:	4a1d      	ldr	r2, [pc, #116]	@ (800cbe0 <_free_r+0x90>)
 800cb6a:	6813      	ldr	r3, [r2, #0]
 800cb6c:	b933      	cbnz	r3, 800cb7c <_free_r+0x2c>
 800cb6e:	6063      	str	r3, [r4, #4]
 800cb70:	6014      	str	r4, [r2, #0]
 800cb72:	4628      	mov	r0, r5
 800cb74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb78:	f7ff ba28 	b.w	800bfcc <__malloc_unlock>
 800cb7c:	42a3      	cmp	r3, r4
 800cb7e:	d908      	bls.n	800cb92 <_free_r+0x42>
 800cb80:	6820      	ldr	r0, [r4, #0]
 800cb82:	1821      	adds	r1, r4, r0
 800cb84:	428b      	cmp	r3, r1
 800cb86:	bf01      	itttt	eq
 800cb88:	6819      	ldreq	r1, [r3, #0]
 800cb8a:	685b      	ldreq	r3, [r3, #4]
 800cb8c:	1809      	addeq	r1, r1, r0
 800cb8e:	6021      	streq	r1, [r4, #0]
 800cb90:	e7ed      	b.n	800cb6e <_free_r+0x1e>
 800cb92:	461a      	mov	r2, r3
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	b10b      	cbz	r3, 800cb9c <_free_r+0x4c>
 800cb98:	42a3      	cmp	r3, r4
 800cb9a:	d9fa      	bls.n	800cb92 <_free_r+0x42>
 800cb9c:	6811      	ldr	r1, [r2, #0]
 800cb9e:	1850      	adds	r0, r2, r1
 800cba0:	42a0      	cmp	r0, r4
 800cba2:	d10b      	bne.n	800cbbc <_free_r+0x6c>
 800cba4:	6820      	ldr	r0, [r4, #0]
 800cba6:	4401      	add	r1, r0
 800cba8:	1850      	adds	r0, r2, r1
 800cbaa:	4283      	cmp	r3, r0
 800cbac:	6011      	str	r1, [r2, #0]
 800cbae:	d1e0      	bne.n	800cb72 <_free_r+0x22>
 800cbb0:	6818      	ldr	r0, [r3, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	6053      	str	r3, [r2, #4]
 800cbb6:	4408      	add	r0, r1
 800cbb8:	6010      	str	r0, [r2, #0]
 800cbba:	e7da      	b.n	800cb72 <_free_r+0x22>
 800cbbc:	d902      	bls.n	800cbc4 <_free_r+0x74>
 800cbbe:	230c      	movs	r3, #12
 800cbc0:	602b      	str	r3, [r5, #0]
 800cbc2:	e7d6      	b.n	800cb72 <_free_r+0x22>
 800cbc4:	6820      	ldr	r0, [r4, #0]
 800cbc6:	1821      	adds	r1, r4, r0
 800cbc8:	428b      	cmp	r3, r1
 800cbca:	bf04      	itt	eq
 800cbcc:	6819      	ldreq	r1, [r3, #0]
 800cbce:	685b      	ldreq	r3, [r3, #4]
 800cbd0:	6063      	str	r3, [r4, #4]
 800cbd2:	bf04      	itt	eq
 800cbd4:	1809      	addeq	r1, r1, r0
 800cbd6:	6021      	streq	r1, [r4, #0]
 800cbd8:	6054      	str	r4, [r2, #4]
 800cbda:	e7ca      	b.n	800cb72 <_free_r+0x22>
 800cbdc:	bd38      	pop	{r3, r4, r5, pc}
 800cbde:	bf00      	nop
 800cbe0:	20001b50 	.word	0x20001b50

0800cbe4 <__ascii_mbtowc>:
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	b901      	cbnz	r1, 800cbea <__ascii_mbtowc+0x6>
 800cbe8:	a901      	add	r1, sp, #4
 800cbea:	b142      	cbz	r2, 800cbfe <__ascii_mbtowc+0x1a>
 800cbec:	b14b      	cbz	r3, 800cc02 <__ascii_mbtowc+0x1e>
 800cbee:	7813      	ldrb	r3, [r2, #0]
 800cbf0:	600b      	str	r3, [r1, #0]
 800cbf2:	7812      	ldrb	r2, [r2, #0]
 800cbf4:	1e10      	subs	r0, r2, #0
 800cbf6:	bf18      	it	ne
 800cbf8:	2001      	movne	r0, #1
 800cbfa:	b002      	add	sp, #8
 800cbfc:	4770      	bx	lr
 800cbfe:	4610      	mov	r0, r2
 800cc00:	e7fb      	b.n	800cbfa <__ascii_mbtowc+0x16>
 800cc02:	f06f 0001 	mvn.w	r0, #1
 800cc06:	e7f8      	b.n	800cbfa <__ascii_mbtowc+0x16>

0800cc08 <_malloc_usable_size_r>:
 800cc08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc0c:	1f18      	subs	r0, r3, #4
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	bfbc      	itt	lt
 800cc12:	580b      	ldrlt	r3, [r1, r0]
 800cc14:	18c0      	addlt	r0, r0, r3
 800cc16:	4770      	bx	lr

0800cc18 <fiprintf>:
 800cc18:	b40e      	push	{r1, r2, r3}
 800cc1a:	b503      	push	{r0, r1, lr}
 800cc1c:	4601      	mov	r1, r0
 800cc1e:	ab03      	add	r3, sp, #12
 800cc20:	4805      	ldr	r0, [pc, #20]	@ (800cc38 <fiprintf+0x20>)
 800cc22:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc26:	6800      	ldr	r0, [r0, #0]
 800cc28:	9301      	str	r3, [sp, #4]
 800cc2a:	f7fe ff5b 	bl	800bae4 <_vfiprintf_r>
 800cc2e:	b002      	add	sp, #8
 800cc30:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc34:	b003      	add	sp, #12
 800cc36:	4770      	bx	lr
 800cc38:	20000018 	.word	0x20000018

0800cc3c <__ascii_wctomb>:
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	4608      	mov	r0, r1
 800cc40:	b141      	cbz	r1, 800cc54 <__ascii_wctomb+0x18>
 800cc42:	2aff      	cmp	r2, #255	@ 0xff
 800cc44:	d904      	bls.n	800cc50 <__ascii_wctomb+0x14>
 800cc46:	228a      	movs	r2, #138	@ 0x8a
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc4e:	4770      	bx	lr
 800cc50:	700a      	strb	r2, [r1, #0]
 800cc52:	2001      	movs	r0, #1
 800cc54:	4770      	bx	lr

0800cc56 <abort>:
 800cc56:	b508      	push	{r3, lr}
 800cc58:	2006      	movs	r0, #6
 800cc5a:	f000 f82b 	bl	800ccb4 <raise>
 800cc5e:	2001      	movs	r0, #1
 800cc60:	f7f6 fc7a 	bl	8003558 <_exit>

0800cc64 <_raise_r>:
 800cc64:	291f      	cmp	r1, #31
 800cc66:	b538      	push	{r3, r4, r5, lr}
 800cc68:	4605      	mov	r5, r0
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	d904      	bls.n	800cc78 <_raise_r+0x14>
 800cc6e:	2316      	movs	r3, #22
 800cc70:	6003      	str	r3, [r0, #0]
 800cc72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc76:	bd38      	pop	{r3, r4, r5, pc}
 800cc78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc7a:	b112      	cbz	r2, 800cc82 <_raise_r+0x1e>
 800cc7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc80:	b94b      	cbnz	r3, 800cc96 <_raise_r+0x32>
 800cc82:	4628      	mov	r0, r5
 800cc84:	f000 f830 	bl	800cce8 <_getpid_r>
 800cc88:	4622      	mov	r2, r4
 800cc8a:	4601      	mov	r1, r0
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc92:	f000 b817 	b.w	800ccc4 <_kill_r>
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d00a      	beq.n	800ccb0 <_raise_r+0x4c>
 800cc9a:	1c59      	adds	r1, r3, #1
 800cc9c:	d103      	bne.n	800cca6 <_raise_r+0x42>
 800cc9e:	2316      	movs	r3, #22
 800cca0:	6003      	str	r3, [r0, #0]
 800cca2:	2001      	movs	r0, #1
 800cca4:	e7e7      	b.n	800cc76 <_raise_r+0x12>
 800cca6:	2100      	movs	r1, #0
 800cca8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ccac:	4620      	mov	r0, r4
 800ccae:	4798      	blx	r3
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	e7e0      	b.n	800cc76 <_raise_r+0x12>

0800ccb4 <raise>:
 800ccb4:	4b02      	ldr	r3, [pc, #8]	@ (800ccc0 <raise+0xc>)
 800ccb6:	4601      	mov	r1, r0
 800ccb8:	6818      	ldr	r0, [r3, #0]
 800ccba:	f7ff bfd3 	b.w	800cc64 <_raise_r>
 800ccbe:	bf00      	nop
 800ccc0:	20000018 	.word	0x20000018

0800ccc4 <_kill_r>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	4d07      	ldr	r5, [pc, #28]	@ (800cce4 <_kill_r+0x20>)
 800ccc8:	2300      	movs	r3, #0
 800ccca:	4604      	mov	r4, r0
 800cccc:	4608      	mov	r0, r1
 800ccce:	4611      	mov	r1, r2
 800ccd0:	602b      	str	r3, [r5, #0]
 800ccd2:	f7f6 fc31 	bl	8003538 <_kill>
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	d102      	bne.n	800cce0 <_kill_r+0x1c>
 800ccda:	682b      	ldr	r3, [r5, #0]
 800ccdc:	b103      	cbz	r3, 800cce0 <_kill_r+0x1c>
 800ccde:	6023      	str	r3, [r4, #0]
 800cce0:	bd38      	pop	{r3, r4, r5, pc}
 800cce2:	bf00      	nop
 800cce4:	20001b54 	.word	0x20001b54

0800cce8 <_getpid_r>:
 800cce8:	f7f6 bc1e 	b.w	8003528 <_getpid>

0800ccec <_init>:
 800ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccee:	bf00      	nop
 800ccf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf2:	bc08      	pop	{r3}
 800ccf4:	469e      	mov	lr, r3
 800ccf6:	4770      	bx	lr

0800ccf8 <_fini>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	bf00      	nop
 800ccfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfe:	bc08      	pop	{r3}
 800cd00:	469e      	mov	lr, r3
 800cd02:	4770      	bx	lr
